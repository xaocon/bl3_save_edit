// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `oak_profile.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct PlayerInputBinding_Button {
    // message fields
    pub rebind_data_path: ::std::string::String,
    pub key_names: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerInputBinding_Button {
    fn default() -> &'a PlayerInputBinding_Button {
        <PlayerInputBinding_Button as ::protobuf::Message>::default_instance()
    }
}

impl PlayerInputBinding_Button {
    pub fn new() -> PlayerInputBinding_Button {
        ::std::default::Default::default()
    }

    // string rebind_data_path = 1;


    pub fn get_rebind_data_path(&self) -> &str {
        &self.rebind_data_path
    }
    pub fn clear_rebind_data_path(&mut self) {
        self.rebind_data_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_rebind_data_path(&mut self, v: ::std::string::String) {
        self.rebind_data_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rebind_data_path(&mut self) -> &mut ::std::string::String {
        &mut self.rebind_data_path
    }

    // Take field
    pub fn take_rebind_data_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rebind_data_path, ::std::string::String::new())
    }

    // repeated string key_names = 2;


    pub fn get_key_names(&self) -> &[::std::string::String] {
        &self.key_names
    }
    pub fn clear_key_names(&mut self) {
        self.key_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.key_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_key_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.key_names
    }

    // Take field
    pub fn take_key_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.key_names, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PlayerInputBinding_Button {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rebind_data_path)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.key_names)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rebind_data_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rebind_data_path);
        }
        for value in &self.key_names {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.rebind_data_path.is_empty() {
            os.write_string(1, &self.rebind_data_path)?;
        }
        for v in &self.key_names {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerInputBinding_Button {
        PlayerInputBinding_Button::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rebind_data_path",
                |m: &PlayerInputBinding_Button| { &m.rebind_data_path },
                |m: &mut PlayerInputBinding_Button| { &mut m.rebind_data_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key_names",
                |m: &PlayerInputBinding_Button| { &m.key_names },
                |m: &mut PlayerInputBinding_Button| { &mut m.key_names },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerInputBinding_Button>(
                "PlayerInputBinding_Button",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerInputBinding_Button {
        static instance: ::protobuf::rt::LazyV2<PlayerInputBinding_Button> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerInputBinding_Button::new)
    }
}

impl ::protobuf::Clear for PlayerInputBinding_Button {
    fn clear(&mut self) {
        self.rebind_data_path.clear();
        self.key_names.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerInputBinding_Button {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerInputBinding_Button {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerInputBinding_Axis_Key {
    // message fields
    pub key_name: ::std::string::String,
    pub scale_3d: ::protobuf::SingularPtrField<super::oak_shared::Vec3>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerInputBinding_Axis_Key {
    fn default() -> &'a PlayerInputBinding_Axis_Key {
        <PlayerInputBinding_Axis_Key as ::protobuf::Message>::default_instance()
    }
}

impl PlayerInputBinding_Axis_Key {
    pub fn new() -> PlayerInputBinding_Axis_Key {
        ::std::default::Default::default()
    }

    // string key_name = 1;


    pub fn get_key_name(&self) -> &str {
        &self.key_name
    }
    pub fn clear_key_name(&mut self) {
        self.key_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_name(&mut self, v: ::std::string::String) {
        self.key_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_name(&mut self) -> &mut ::std::string::String {
        &mut self.key_name
    }

    // Take field
    pub fn take_key_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_name, ::std::string::String::new())
    }

    // .OakSave.Vec3 scale_3d = 2;


    pub fn get_scale_3d(&self) -> &super::oak_shared::Vec3 {
        self.scale_3d.as_ref().unwrap_or_else(|| <super::oak_shared::Vec3 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_scale_3d(&mut self) {
        self.scale_3d.clear();
    }

    pub fn has_scale_3d(&self) -> bool {
        self.scale_3d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scale_3d(&mut self, v: super::oak_shared::Vec3) {
        self.scale_3d = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scale_3d(&mut self) -> &mut super::oak_shared::Vec3 {
        if self.scale_3d.is_none() {
            self.scale_3d.set_default();
        }
        self.scale_3d.as_mut().unwrap()
    }

    // Take field
    pub fn take_scale_3d(&mut self) -> super::oak_shared::Vec3 {
        self.scale_3d.take().unwrap_or_else(|| super::oak_shared::Vec3::new())
    }
}

impl ::protobuf::Message for PlayerInputBinding_Axis_Key {
    fn is_initialized(&self) -> bool {
        for v in &self.scale_3d {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.scale_3d)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key_name);
        }
        if let Some(ref v) = self.scale_3d.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key_name.is_empty() {
            os.write_string(1, &self.key_name)?;
        }
        if let Some(ref v) = self.scale_3d.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerInputBinding_Axis_Key {
        PlayerInputBinding_Axis_Key::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key_name",
                |m: &PlayerInputBinding_Axis_Key| { &m.key_name },
                |m: &mut PlayerInputBinding_Axis_Key| { &mut m.key_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::Vec3>>(
                "scale_3d",
                |m: &PlayerInputBinding_Axis_Key| { &m.scale_3d },
                |m: &mut PlayerInputBinding_Axis_Key| { &mut m.scale_3d },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerInputBinding_Axis_Key>(
                "PlayerInputBinding_Axis_Key",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerInputBinding_Axis_Key {
        static instance: ::protobuf::rt::LazyV2<PlayerInputBinding_Axis_Key> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerInputBinding_Axis_Key::new)
    }
}

impl ::protobuf::Clear for PlayerInputBinding_Axis_Key {
    fn clear(&mut self) {
        self.key_name.clear();
        self.scale_3d.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerInputBinding_Axis_Key {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerInputBinding_Axis_Key {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerInputBinding_Axis {
    // message fields
    pub rebind_data_path: ::std::string::String,
    pub keys: ::protobuf::RepeatedField<PlayerInputBinding_Axis_Key>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerInputBinding_Axis {
    fn default() -> &'a PlayerInputBinding_Axis {
        <PlayerInputBinding_Axis as ::protobuf::Message>::default_instance()
    }
}

impl PlayerInputBinding_Axis {
    pub fn new() -> PlayerInputBinding_Axis {
        ::std::default::Default::default()
    }

    // string rebind_data_path = 1;


    pub fn get_rebind_data_path(&self) -> &str {
        &self.rebind_data_path
    }
    pub fn clear_rebind_data_path(&mut self) {
        self.rebind_data_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_rebind_data_path(&mut self, v: ::std::string::String) {
        self.rebind_data_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rebind_data_path(&mut self) -> &mut ::std::string::String {
        &mut self.rebind_data_path
    }

    // Take field
    pub fn take_rebind_data_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rebind_data_path, ::std::string::String::new())
    }

    // repeated .OakSave.PlayerInputBinding_Axis_Key keys = 2;


    pub fn get_keys(&self) -> &[PlayerInputBinding_Axis_Key] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<PlayerInputBinding_Axis_Key>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<PlayerInputBinding_Axis_Key> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<PlayerInputBinding_Axis_Key> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PlayerInputBinding_Axis {
    fn is_initialized(&self) -> bool {
        for v in &self.keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rebind_data_path)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rebind_data_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rebind_data_path);
        }
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.rebind_data_path.is_empty() {
            os.write_string(1, &self.rebind_data_path)?;
        }
        for v in &self.keys {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerInputBinding_Axis {
        PlayerInputBinding_Axis::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rebind_data_path",
                |m: &PlayerInputBinding_Axis| { &m.rebind_data_path },
                |m: &mut PlayerInputBinding_Axis| { &mut m.rebind_data_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerInputBinding_Axis_Key>>(
                "keys",
                |m: &PlayerInputBinding_Axis| { &m.keys },
                |m: &mut PlayerInputBinding_Axis| { &mut m.keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerInputBinding_Axis>(
                "PlayerInputBinding_Axis",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerInputBinding_Axis {
        static instance: ::protobuf::rt::LazyV2<PlayerInputBinding_Axis> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerInputBinding_Axis::new)
    }
}

impl ::protobuf::Clear for PlayerInputBinding_Axis {
    fn clear(&mut self) {
        self.rebind_data_path.clear();
        self.keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerInputBinding_Axis {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerInputBinding_Axis {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerInputBinding_Category {
    // message fields
    pub category_data_path: ::std::string::String,
    pub context_data_path: ::std::string::String,
    pub button_bindings: ::protobuf::RepeatedField<PlayerInputBinding_Button>,
    pub axis_bindings: ::protobuf::RepeatedField<PlayerInputBinding_Axis>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerInputBinding_Category {
    fn default() -> &'a PlayerInputBinding_Category {
        <PlayerInputBinding_Category as ::protobuf::Message>::default_instance()
    }
}

impl PlayerInputBinding_Category {
    pub fn new() -> PlayerInputBinding_Category {
        ::std::default::Default::default()
    }

    // string category_data_path = 1;


    pub fn get_category_data_path(&self) -> &str {
        &self.category_data_path
    }
    pub fn clear_category_data_path(&mut self) {
        self.category_data_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_category_data_path(&mut self, v: ::std::string::String) {
        self.category_data_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category_data_path(&mut self) -> &mut ::std::string::String {
        &mut self.category_data_path
    }

    // Take field
    pub fn take_category_data_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category_data_path, ::std::string::String::new())
    }

    // string context_data_path = 2;


    pub fn get_context_data_path(&self) -> &str {
        &self.context_data_path
    }
    pub fn clear_context_data_path(&mut self) {
        self.context_data_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_data_path(&mut self, v: ::std::string::String) {
        self.context_data_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_data_path(&mut self) -> &mut ::std::string::String {
        &mut self.context_data_path
    }

    // Take field
    pub fn take_context_data_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_data_path, ::std::string::String::new())
    }

    // repeated .OakSave.PlayerInputBinding_Button button_bindings = 3;


    pub fn get_button_bindings(&self) -> &[PlayerInputBinding_Button] {
        &self.button_bindings
    }
    pub fn clear_button_bindings(&mut self) {
        self.button_bindings.clear();
    }

    // Param is passed by value, moved
    pub fn set_button_bindings(&mut self, v: ::protobuf::RepeatedField<PlayerInputBinding_Button>) {
        self.button_bindings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_button_bindings(&mut self) -> &mut ::protobuf::RepeatedField<PlayerInputBinding_Button> {
        &mut self.button_bindings
    }

    // Take field
    pub fn take_button_bindings(&mut self) -> ::protobuf::RepeatedField<PlayerInputBinding_Button> {
        ::std::mem::replace(&mut self.button_bindings, ::protobuf::RepeatedField::new())
    }

    // repeated .OakSave.PlayerInputBinding_Axis axis_bindings = 4;


    pub fn get_axis_bindings(&self) -> &[PlayerInputBinding_Axis] {
        &self.axis_bindings
    }
    pub fn clear_axis_bindings(&mut self) {
        self.axis_bindings.clear();
    }

    // Param is passed by value, moved
    pub fn set_axis_bindings(&mut self, v: ::protobuf::RepeatedField<PlayerInputBinding_Axis>) {
        self.axis_bindings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_axis_bindings(&mut self) -> &mut ::protobuf::RepeatedField<PlayerInputBinding_Axis> {
        &mut self.axis_bindings
    }

    // Take field
    pub fn take_axis_bindings(&mut self) -> ::protobuf::RepeatedField<PlayerInputBinding_Axis> {
        ::std::mem::replace(&mut self.axis_bindings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PlayerInputBinding_Category {
    fn is_initialized(&self) -> bool {
        for v in &self.button_bindings {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.axis_bindings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category_data_path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_data_path)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.button_bindings)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.axis_bindings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.category_data_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.category_data_path);
        }
        if !self.context_data_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.context_data_path);
        }
        for value in &self.button_bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.axis_bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.category_data_path.is_empty() {
            os.write_string(1, &self.category_data_path)?;
        }
        if !self.context_data_path.is_empty() {
            os.write_string(2, &self.context_data_path)?;
        }
        for v in &self.button_bindings {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.axis_bindings {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerInputBinding_Category {
        PlayerInputBinding_Category::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category_data_path",
                |m: &PlayerInputBinding_Category| { &m.category_data_path },
                |m: &mut PlayerInputBinding_Category| { &mut m.category_data_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "context_data_path",
                |m: &PlayerInputBinding_Category| { &m.context_data_path },
                |m: &mut PlayerInputBinding_Category| { &mut m.context_data_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerInputBinding_Button>>(
                "button_bindings",
                |m: &PlayerInputBinding_Category| { &m.button_bindings },
                |m: &mut PlayerInputBinding_Category| { &mut m.button_bindings },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerInputBinding_Axis>>(
                "axis_bindings",
                |m: &PlayerInputBinding_Category| { &m.axis_bindings },
                |m: &mut PlayerInputBinding_Category| { &mut m.axis_bindings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerInputBinding_Category>(
                "PlayerInputBinding_Category",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerInputBinding_Category {
        static instance: ::protobuf::rt::LazyV2<PlayerInputBinding_Category> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerInputBinding_Category::new)
    }
}

impl ::protobuf::Clear for PlayerInputBinding_Category {
    fn clear(&mut self) {
        self.category_data_path.clear();
        self.context_data_path.clear();
        self.button_bindings.clear();
        self.axis_bindings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerInputBinding_Category {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerInputBinding_Category {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerInputBindings {
    // message fields
    pub categories: ::protobuf::RepeatedField<PlayerInputBinding_Category>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerInputBindings {
    fn default() -> &'a PlayerInputBindings {
        <PlayerInputBindings as ::protobuf::Message>::default_instance()
    }
}

impl PlayerInputBindings {
    pub fn new() -> PlayerInputBindings {
        ::std::default::Default::default()
    }

    // repeated .OakSave.PlayerInputBinding_Category categories = 1;


    pub fn get_categories(&self) -> &[PlayerInputBinding_Category] {
        &self.categories
    }
    pub fn clear_categories(&mut self) {
        self.categories.clear();
    }

    // Param is passed by value, moved
    pub fn set_categories(&mut self, v: ::protobuf::RepeatedField<PlayerInputBinding_Category>) {
        self.categories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_categories(&mut self) -> &mut ::protobuf::RepeatedField<PlayerInputBinding_Category> {
        &mut self.categories
    }

    // Take field
    pub fn take_categories(&mut self) -> ::protobuf::RepeatedField<PlayerInputBinding_Category> {
        ::std::mem::replace(&mut self.categories, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PlayerInputBindings {
    fn is_initialized(&self) -> bool {
        for v in &self.categories {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.categories)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.categories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.categories {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerInputBindings {
        PlayerInputBindings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerInputBinding_Category>>(
                "categories",
                |m: &PlayerInputBindings| { &m.categories },
                |m: &mut PlayerInputBindings| { &mut m.categories },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerInputBindings>(
                "PlayerInputBindings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerInputBindings {
        static instance: ::protobuf::rt::LazyV2<PlayerInputBindings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerInputBindings::new)
    }
}

impl ::protobuf::Clear for PlayerInputBindings {
    fn clear(&mut self) {
        self.categories.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerInputBindings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerInputBindings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OakProfileLastInventoryFilterInfo {
    // message fields
    pub slot_type_id: ::std::string::String,
    pub last_filter_index: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OakProfileLastInventoryFilterInfo {
    fn default() -> &'a OakProfileLastInventoryFilterInfo {
        <OakProfileLastInventoryFilterInfo as ::protobuf::Message>::default_instance()
    }
}

impl OakProfileLastInventoryFilterInfo {
    pub fn new() -> OakProfileLastInventoryFilterInfo {
        ::std::default::Default::default()
    }

    // string slot_type_id = 1;


    pub fn get_slot_type_id(&self) -> &str {
        &self.slot_type_id
    }
    pub fn clear_slot_type_id(&mut self) {
        self.slot_type_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_slot_type_id(&mut self, v: ::std::string::String) {
        self.slot_type_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slot_type_id(&mut self) -> &mut ::std::string::String {
        &mut self.slot_type_id
    }

    // Take field
    pub fn take_slot_type_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slot_type_id, ::std::string::String::new())
    }

    // int32 last_filter_index = 2;


    pub fn get_last_filter_index(&self) -> i32 {
        self.last_filter_index
    }
    pub fn clear_last_filter_index(&mut self) {
        self.last_filter_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_filter_index(&mut self, v: i32) {
        self.last_filter_index = v;
    }
}

impl ::protobuf::Message for OakProfileLastInventoryFilterInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slot_type_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.last_filter_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.slot_type_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.slot_type_id);
        }
        if self.last_filter_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last_filter_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.slot_type_id.is_empty() {
            os.write_string(1, &self.slot_type_id)?;
        }
        if self.last_filter_index != 0 {
            os.write_int32(2, self.last_filter_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OakProfileLastInventoryFilterInfo {
        OakProfileLastInventoryFilterInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slot_type_id",
                |m: &OakProfileLastInventoryFilterInfo| { &m.slot_type_id },
                |m: &mut OakProfileLastInventoryFilterInfo| { &mut m.slot_type_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "last_filter_index",
                |m: &OakProfileLastInventoryFilterInfo| { &m.last_filter_index },
                |m: &mut OakProfileLastInventoryFilterInfo| { &mut m.last_filter_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OakProfileLastInventoryFilterInfo>(
                "OakProfileLastInventoryFilterInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OakProfileLastInventoryFilterInfo {
        static instance: ::protobuf::rt::LazyV2<OakProfileLastInventoryFilterInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OakProfileLastInventoryFilterInfo::new)
    }
}

impl ::protobuf::Clear for OakProfileLastInventoryFilterInfo {
    fn clear(&mut self) {
        self.slot_type_id.clear();
        self.last_filter_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OakProfileLastInventoryFilterInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OakProfileLastInventoryFilterInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OakProfileMenuTutorialInfo {
    // message fields
    pub seen_tutorials: ::protobuf::RepeatedField<::std::string::String>,
    pub tutorials_disabled: bool,
    pub tutorials_allowed_in_non_game_modes: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OakProfileMenuTutorialInfo {
    fn default() -> &'a OakProfileMenuTutorialInfo {
        <OakProfileMenuTutorialInfo as ::protobuf::Message>::default_instance()
    }
}

impl OakProfileMenuTutorialInfo {
    pub fn new() -> OakProfileMenuTutorialInfo {
        ::std::default::Default::default()
    }

    // repeated string seen_tutorials = 1;


    pub fn get_seen_tutorials(&self) -> &[::std::string::String] {
        &self.seen_tutorials
    }
    pub fn clear_seen_tutorials(&mut self) {
        self.seen_tutorials.clear();
    }

    // Param is passed by value, moved
    pub fn set_seen_tutorials(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.seen_tutorials = v;
    }

    // Mutable pointer to the field.
    pub fn mut_seen_tutorials(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.seen_tutorials
    }

    // Take field
    pub fn take_seen_tutorials(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.seen_tutorials, ::protobuf::RepeatedField::new())
    }

    // bool tutorials_disabled = 2;


    pub fn get_tutorials_disabled(&self) -> bool {
        self.tutorials_disabled
    }
    pub fn clear_tutorials_disabled(&mut self) {
        self.tutorials_disabled = false;
    }

    // Param is passed by value, moved
    pub fn set_tutorials_disabled(&mut self, v: bool) {
        self.tutorials_disabled = v;
    }

    // bool tutorials_allowed_in_non_game_modes = 3;


    pub fn get_tutorials_allowed_in_non_game_modes(&self) -> bool {
        self.tutorials_allowed_in_non_game_modes
    }
    pub fn clear_tutorials_allowed_in_non_game_modes(&mut self) {
        self.tutorials_allowed_in_non_game_modes = false;
    }

    // Param is passed by value, moved
    pub fn set_tutorials_allowed_in_non_game_modes(&mut self, v: bool) {
        self.tutorials_allowed_in_non_game_modes = v;
    }
}

impl ::protobuf::Message for OakProfileMenuTutorialInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.seen_tutorials)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tutorials_disabled = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tutorials_allowed_in_non_game_modes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.seen_tutorials {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.tutorials_disabled != false {
            my_size += 2;
        }
        if self.tutorials_allowed_in_non_game_modes != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.seen_tutorials {
            os.write_string(1, &v)?;
        };
        if self.tutorials_disabled != false {
            os.write_bool(2, self.tutorials_disabled)?;
        }
        if self.tutorials_allowed_in_non_game_modes != false {
            os.write_bool(3, self.tutorials_allowed_in_non_game_modes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OakProfileMenuTutorialInfo {
        OakProfileMenuTutorialInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seen_tutorials",
                |m: &OakProfileMenuTutorialInfo| { &m.seen_tutorials },
                |m: &mut OakProfileMenuTutorialInfo| { &mut m.seen_tutorials },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "tutorials_disabled",
                |m: &OakProfileMenuTutorialInfo| { &m.tutorials_disabled },
                |m: &mut OakProfileMenuTutorialInfo| { &mut m.tutorials_disabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "tutorials_allowed_in_non_game_modes",
                |m: &OakProfileMenuTutorialInfo| { &m.tutorials_allowed_in_non_game_modes },
                |m: &mut OakProfileMenuTutorialInfo| { &mut m.tutorials_allowed_in_non_game_modes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OakProfileMenuTutorialInfo>(
                "OakProfileMenuTutorialInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OakProfileMenuTutorialInfo {
        static instance: ::protobuf::rt::LazyV2<OakProfileMenuTutorialInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OakProfileMenuTutorialInfo::new)
    }
}

impl ::protobuf::Clear for OakProfileMenuTutorialInfo {
    fn clear(&mut self) {
        self.seen_tutorials.clear();
        self.tutorials_disabled = false;
        self.tutorials_allowed_in_non_game_modes = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OakProfileMenuTutorialInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OakProfileMenuTutorialInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OakFriendEncounterData {
    // message fields
    pub num_encounters: u32,
    pub time_last_encounter: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OakFriendEncounterData {
    fn default() -> &'a OakFriendEncounterData {
        <OakFriendEncounterData as ::protobuf::Message>::default_instance()
    }
}

impl OakFriendEncounterData {
    pub fn new() -> OakFriendEncounterData {
        ::std::default::Default::default()
    }

    // uint32 num_encounters = 1;


    pub fn get_num_encounters(&self) -> u32 {
        self.num_encounters
    }
    pub fn clear_num_encounters(&mut self) {
        self.num_encounters = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_encounters(&mut self, v: u32) {
        self.num_encounters = v;
    }

    // int64 time_last_encounter = 2;


    pub fn get_time_last_encounter(&self) -> i64 {
        self.time_last_encounter
    }
    pub fn clear_time_last_encounter(&mut self) {
        self.time_last_encounter = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_last_encounter(&mut self, v: i64) {
        self.time_last_encounter = v;
    }
}

impl ::protobuf::Message for OakFriendEncounterData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_encounters = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time_last_encounter = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_encounters != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_encounters, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time_last_encounter != 0 {
            my_size += ::protobuf::rt::value_size(2, self.time_last_encounter, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.num_encounters != 0 {
            os.write_uint32(1, self.num_encounters)?;
        }
        if self.time_last_encounter != 0 {
            os.write_int64(2, self.time_last_encounter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OakFriendEncounterData {
        OakFriendEncounterData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_encounters",
                |m: &OakFriendEncounterData| { &m.num_encounters },
                |m: &mut OakFriendEncounterData| { &mut m.num_encounters },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "time_last_encounter",
                |m: &OakFriendEncounterData| { &m.time_last_encounter },
                |m: &mut OakFriendEncounterData| { &mut m.time_last_encounter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OakFriendEncounterData>(
                "OakFriendEncounterData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OakFriendEncounterData {
        static instance: ::protobuf::rt::LazyV2<OakFriendEncounterData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OakFriendEncounterData::new)
    }
}

impl ::protobuf::Clear for OakFriendEncounterData {
    fn clear(&mut self) {
        self.num_encounters = 0;
        self.time_last_encounter = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OakFriendEncounterData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OakFriendEncounterData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GearSoldByFriendData {
    // message fields
    pub gear_serial_number: ::std::string::String,
    pub player_class_identifier_hash: i32,
    pub friend_net_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GearSoldByFriendData {
    fn default() -> &'a GearSoldByFriendData {
        <GearSoldByFriendData as ::protobuf::Message>::default_instance()
    }
}

impl GearSoldByFriendData {
    pub fn new() -> GearSoldByFriendData {
        ::std::default::Default::default()
    }

    // string gear_serial_number = 1;


    pub fn get_gear_serial_number(&self) -> &str {
        &self.gear_serial_number
    }
    pub fn clear_gear_serial_number(&mut self) {
        self.gear_serial_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_gear_serial_number(&mut self, v: ::std::string::String) {
        self.gear_serial_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gear_serial_number(&mut self) -> &mut ::std::string::String {
        &mut self.gear_serial_number
    }

    // Take field
    pub fn take_gear_serial_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gear_serial_number, ::std::string::String::new())
    }

    // int32 player_class_identifier_hash = 2;


    pub fn get_player_class_identifier_hash(&self) -> i32 {
        self.player_class_identifier_hash
    }
    pub fn clear_player_class_identifier_hash(&mut self) {
        self.player_class_identifier_hash = 0;
    }

    // Param is passed by value, moved
    pub fn set_player_class_identifier_hash(&mut self, v: i32) {
        self.player_class_identifier_hash = v;
    }

    // string friend_net_id = 3;


    pub fn get_friend_net_id(&self) -> &str {
        &self.friend_net_id
    }
    pub fn clear_friend_net_id(&mut self) {
        self.friend_net_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_friend_net_id(&mut self, v: ::std::string::String) {
        self.friend_net_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_friend_net_id(&mut self) -> &mut ::std::string::String {
        &mut self.friend_net_id
    }

    // Take field
    pub fn take_friend_net_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.friend_net_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GearSoldByFriendData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gear_serial_number)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.player_class_identifier_hash = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.friend_net_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gear_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gear_serial_number);
        }
        if self.player_class_identifier_hash != 0 {
            my_size += ::protobuf::rt::value_size(2, self.player_class_identifier_hash, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.friend_net_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.friend_net_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gear_serial_number.is_empty() {
            os.write_string(1, &self.gear_serial_number)?;
        }
        if self.player_class_identifier_hash != 0 {
            os.write_int32(2, self.player_class_identifier_hash)?;
        }
        if !self.friend_net_id.is_empty() {
            os.write_string(3, &self.friend_net_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GearSoldByFriendData {
        GearSoldByFriendData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gear_serial_number",
                |m: &GearSoldByFriendData| { &m.gear_serial_number },
                |m: &mut GearSoldByFriendData| { &mut m.gear_serial_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "player_class_identifier_hash",
                |m: &GearSoldByFriendData| { &m.player_class_identifier_hash },
                |m: &mut GearSoldByFriendData| { &mut m.player_class_identifier_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "friend_net_id",
                |m: &GearSoldByFriendData| { &m.friend_net_id },
                |m: &mut GearSoldByFriendData| { &mut m.friend_net_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GearSoldByFriendData>(
                "GearSoldByFriendData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GearSoldByFriendData {
        static instance: ::protobuf::rt::LazyV2<GearSoldByFriendData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GearSoldByFriendData::new)
    }
}

impl ::protobuf::Clear for GearSoldByFriendData {
    fn clear(&mut self) {
        self.gear_serial_number.clear();
        self.player_class_identifier_hash = 0;
        self.friend_net_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GearSoldByFriendData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GearSoldByFriendData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GuardianRankRewardSaveGameData {
    // message fields
    pub num_tokens: i32,
    pub reward_data_path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GuardianRankRewardSaveGameData {
    fn default() -> &'a GuardianRankRewardSaveGameData {
        <GuardianRankRewardSaveGameData as ::protobuf::Message>::default_instance()
    }
}

impl GuardianRankRewardSaveGameData {
    pub fn new() -> GuardianRankRewardSaveGameData {
        ::std::default::Default::default()
    }

    // int32 num_tokens = 1;


    pub fn get_num_tokens(&self) -> i32 {
        self.num_tokens
    }
    pub fn clear_num_tokens(&mut self) {
        self.num_tokens = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_tokens(&mut self, v: i32) {
        self.num_tokens = v;
    }

    // string reward_data_path = 2;


    pub fn get_reward_data_path(&self) -> &str {
        &self.reward_data_path
    }
    pub fn clear_reward_data_path(&mut self) {
        self.reward_data_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_data_path(&mut self, v: ::std::string::String) {
        self.reward_data_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_data_path(&mut self) -> &mut ::std::string::String {
        &mut self.reward_data_path
    }

    // Take field
    pub fn take_reward_data_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_data_path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GuardianRankRewardSaveGameData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_tokens = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_data_path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_tokens != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_tokens, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reward_data_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reward_data_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.num_tokens != 0 {
            os.write_int32(1, self.num_tokens)?;
        }
        if !self.reward_data_path.is_empty() {
            os.write_string(2, &self.reward_data_path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GuardianRankRewardSaveGameData {
        GuardianRankRewardSaveGameData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "num_tokens",
                |m: &GuardianRankRewardSaveGameData| { &m.num_tokens },
                |m: &mut GuardianRankRewardSaveGameData| { &mut m.num_tokens },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reward_data_path",
                |m: &GuardianRankRewardSaveGameData| { &m.reward_data_path },
                |m: &mut GuardianRankRewardSaveGameData| { &mut m.reward_data_path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GuardianRankRewardSaveGameData>(
                "GuardianRankRewardSaveGameData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GuardianRankRewardSaveGameData {
        static instance: ::protobuf::rt::LazyV2<GuardianRankRewardSaveGameData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GuardianRankRewardSaveGameData::new)
    }
}

impl ::protobuf::Clear for GuardianRankRewardSaveGameData {
    fn clear(&mut self) {
        self.num_tokens = 0;
        self.reward_data_path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GuardianRankRewardSaveGameData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GuardianRankRewardSaveGameData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GuardianRankProfileData {
    // message fields
    pub available_tokens: i32,
    pub rank_rewards: ::protobuf::RepeatedField<GuardianRankRewardSaveGameData>,
    pub guardian_rank: i32,
    pub guardian_experience: i32,
    pub guardian_reward_random_seed: i32,
    pub new_guardian_experience: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GuardianRankProfileData {
    fn default() -> &'a GuardianRankProfileData {
        <GuardianRankProfileData as ::protobuf::Message>::default_instance()
    }
}

impl GuardianRankProfileData {
    pub fn new() -> GuardianRankProfileData {
        ::std::default::Default::default()
    }

    // int32 available_tokens = 1;


    pub fn get_available_tokens(&self) -> i32 {
        self.available_tokens
    }
    pub fn clear_available_tokens(&mut self) {
        self.available_tokens = 0;
    }

    // Param is passed by value, moved
    pub fn set_available_tokens(&mut self, v: i32) {
        self.available_tokens = v;
    }

    // repeated .OakSave.GuardianRankRewardSaveGameData rank_rewards = 2;


    pub fn get_rank_rewards(&self) -> &[GuardianRankRewardSaveGameData] {
        &self.rank_rewards
    }
    pub fn clear_rank_rewards(&mut self) {
        self.rank_rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_rank_rewards(&mut self, v: ::protobuf::RepeatedField<GuardianRankRewardSaveGameData>) {
        self.rank_rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rank_rewards(&mut self) -> &mut ::protobuf::RepeatedField<GuardianRankRewardSaveGameData> {
        &mut self.rank_rewards
    }

    // Take field
    pub fn take_rank_rewards(&mut self) -> ::protobuf::RepeatedField<GuardianRankRewardSaveGameData> {
        ::std::mem::replace(&mut self.rank_rewards, ::protobuf::RepeatedField::new())
    }

    // int32 guardian_rank = 3;


    pub fn get_guardian_rank(&self) -> i32 {
        self.guardian_rank
    }
    pub fn clear_guardian_rank(&mut self) {
        self.guardian_rank = 0;
    }

    // Param is passed by value, moved
    pub fn set_guardian_rank(&mut self, v: i32) {
        self.guardian_rank = v;
    }

    // int32 guardian_experience = 4;


    pub fn get_guardian_experience(&self) -> i32 {
        self.guardian_experience
    }
    pub fn clear_guardian_experience(&mut self) {
        self.guardian_experience = 0;
    }

    // Param is passed by value, moved
    pub fn set_guardian_experience(&mut self, v: i32) {
        self.guardian_experience = v;
    }

    // int32 guardian_reward_random_seed = 5;


    pub fn get_guardian_reward_random_seed(&self) -> i32 {
        self.guardian_reward_random_seed
    }
    pub fn clear_guardian_reward_random_seed(&mut self) {
        self.guardian_reward_random_seed = 0;
    }

    // Param is passed by value, moved
    pub fn set_guardian_reward_random_seed(&mut self, v: i32) {
        self.guardian_reward_random_seed = v;
    }

    // int64 new_guardian_experience = 6;


    pub fn get_new_guardian_experience(&self) -> i64 {
        self.new_guardian_experience
    }
    pub fn clear_new_guardian_experience(&mut self) {
        self.new_guardian_experience = 0;
    }

    // Param is passed by value, moved
    pub fn set_new_guardian_experience(&mut self, v: i64) {
        self.new_guardian_experience = v;
    }
}

impl ::protobuf::Message for GuardianRankProfileData {
    fn is_initialized(&self) -> bool {
        for v in &self.rank_rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.available_tokens = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rank_rewards)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.guardian_rank = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.guardian_experience = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.guardian_reward_random_seed = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.new_guardian_experience = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.available_tokens != 0 {
            my_size += ::protobuf::rt::value_size(1, self.available_tokens, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.rank_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.guardian_rank != 0 {
            my_size += ::protobuf::rt::value_size(3, self.guardian_rank, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.guardian_experience != 0 {
            my_size += ::protobuf::rt::value_size(4, self.guardian_experience, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.guardian_reward_random_seed != 0 {
            my_size += ::protobuf::rt::value_size(5, self.guardian_reward_random_seed, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.new_guardian_experience != 0 {
            my_size += ::protobuf::rt::value_size(6, self.new_guardian_experience, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.available_tokens != 0 {
            os.write_int32(1, self.available_tokens)?;
        }
        for v in &self.rank_rewards {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.guardian_rank != 0 {
            os.write_int32(3, self.guardian_rank)?;
        }
        if self.guardian_experience != 0 {
            os.write_int32(4, self.guardian_experience)?;
        }
        if self.guardian_reward_random_seed != 0 {
            os.write_int32(5, self.guardian_reward_random_seed)?;
        }
        if self.new_guardian_experience != 0 {
            os.write_int64(6, self.new_guardian_experience)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GuardianRankProfileData {
        GuardianRankProfileData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "available_tokens",
                |m: &GuardianRankProfileData| { &m.available_tokens },
                |m: &mut GuardianRankProfileData| { &mut m.available_tokens },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GuardianRankRewardSaveGameData>>(
                "rank_rewards",
                |m: &GuardianRankProfileData| { &m.rank_rewards },
                |m: &mut GuardianRankProfileData| { &mut m.rank_rewards },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "guardian_rank",
                |m: &GuardianRankProfileData| { &m.guardian_rank },
                |m: &mut GuardianRankProfileData| { &mut m.guardian_rank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "guardian_experience",
                |m: &GuardianRankProfileData| { &m.guardian_experience },
                |m: &mut GuardianRankProfileData| { &mut m.guardian_experience },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "guardian_reward_random_seed",
                |m: &GuardianRankProfileData| { &m.guardian_reward_random_seed },
                |m: &mut GuardianRankProfileData| { &mut m.guardian_reward_random_seed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "new_guardian_experience",
                |m: &GuardianRankProfileData| { &m.new_guardian_experience },
                |m: &mut GuardianRankProfileData| { &mut m.new_guardian_experience },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GuardianRankProfileData>(
                "GuardianRankProfileData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GuardianRankProfileData {
        static instance: ::protobuf::rt::LazyV2<GuardianRankProfileData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GuardianRankProfileData::new)
    }
}

impl ::protobuf::Clear for GuardianRankProfileData {
    fn clear(&mut self) {
        self.available_tokens = 0;
        self.rank_rewards.clear();
        self.guardian_rank = 0;
        self.guardian_experience = 0;
        self.guardian_reward_random_seed = 0;
        self.new_guardian_experience = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GuardianRankProfileData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GuardianRankProfileData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RecentlyMetPlayer {
    // message fields
    pub shift_player_id: ::std::string::String,
    pub first_party_player_id: ::std::string::String,
    pub show_shift_player_entry: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecentlyMetPlayer {
    fn default() -> &'a RecentlyMetPlayer {
        <RecentlyMetPlayer as ::protobuf::Message>::default_instance()
    }
}

impl RecentlyMetPlayer {
    pub fn new() -> RecentlyMetPlayer {
        ::std::default::Default::default()
    }

    // string shift_player_id = 1;


    pub fn get_shift_player_id(&self) -> &str {
        &self.shift_player_id
    }
    pub fn clear_shift_player_id(&mut self) {
        self.shift_player_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_shift_player_id(&mut self, v: ::std::string::String) {
        self.shift_player_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shift_player_id(&mut self) -> &mut ::std::string::String {
        &mut self.shift_player_id
    }

    // Take field
    pub fn take_shift_player_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.shift_player_id, ::std::string::String::new())
    }

    // string first_party_player_id = 2;


    pub fn get_first_party_player_id(&self) -> &str {
        &self.first_party_player_id
    }
    pub fn clear_first_party_player_id(&mut self) {
        self.first_party_player_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_first_party_player_id(&mut self, v: ::std::string::String) {
        self.first_party_player_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first_party_player_id(&mut self) -> &mut ::std::string::String {
        &mut self.first_party_player_id
    }

    // Take field
    pub fn take_first_party_player_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.first_party_player_id, ::std::string::String::new())
    }

    // bool show_shift_player_entry = 3;


    pub fn get_show_shift_player_entry(&self) -> bool {
        self.show_shift_player_entry
    }
    pub fn clear_show_shift_player_entry(&mut self) {
        self.show_shift_player_entry = false;
    }

    // Param is passed by value, moved
    pub fn set_show_shift_player_entry(&mut self, v: bool) {
        self.show_shift_player_entry = v;
    }
}

impl ::protobuf::Message for RecentlyMetPlayer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.shift_player_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.first_party_player_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_shift_player_entry = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.shift_player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.shift_player_id);
        }
        if !self.first_party_player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.first_party_player_id);
        }
        if self.show_shift_player_entry != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.shift_player_id.is_empty() {
            os.write_string(1, &self.shift_player_id)?;
        }
        if !self.first_party_player_id.is_empty() {
            os.write_string(2, &self.first_party_player_id)?;
        }
        if self.show_shift_player_entry != false {
            os.write_bool(3, self.show_shift_player_entry)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecentlyMetPlayer {
        RecentlyMetPlayer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shift_player_id",
                |m: &RecentlyMetPlayer| { &m.shift_player_id },
                |m: &mut RecentlyMetPlayer| { &mut m.shift_player_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "first_party_player_id",
                |m: &RecentlyMetPlayer| { &m.first_party_player_id },
                |m: &mut RecentlyMetPlayer| { &mut m.first_party_player_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_shift_player_entry",
                |m: &RecentlyMetPlayer| { &m.show_shift_player_entry },
                |m: &mut RecentlyMetPlayer| { &mut m.show_shift_player_entry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecentlyMetPlayer>(
                "RecentlyMetPlayer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecentlyMetPlayer {
        static instance: ::protobuf::rt::LazyV2<RecentlyMetPlayer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecentlyMetPlayer::new)
    }
}

impl ::protobuf::Clear for RecentlyMetPlayer {
    fn clear(&mut self) {
        self.shift_player_id.clear();
        self.first_party_player_id.clear();
        self.show_shift_player_entry = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecentlyMetPlayer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecentlyMetPlayer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Profile {
    // message fields
    pub enable_aim_assist: bool,
    pub gamepad_invert_look: bool,
    pub gamepad_invert_turn: bool,
    pub gamepad_invert_move: bool,
    pub gamepad_invert_strafe: bool,
    pub enable_vibration: bool,
    pub invert_mouse_pitch: bool,
    pub enable_mouse_smoothing: bool,
    pub mouse_scale: f32,
    pub show_damage_numbers: bool,
    pub show_damage_number_icons: bool,
    pub enable_training_messages: bool,
    pub show_text_chat: bool,
    pub center_crosshair: bool,
    pub toggle_sprint: bool,
    pub toggle_crouch: bool,
    pub censor_content: bool,
    pub music_volume: f32,
    pub sound_effects_volume: f32,
    pub vo_volume: f32,
    pub voice_volume: f32,
    pub enable_optional_vo: bool,
    pub push_to_talk: bool,
    pub enable_controller_audio: bool,
    pub speaker_angle_front: f32,
    pub speaker_angle_side: f32,
    pub speaker_angle_back: f32,
    pub speaker_setup: u32,
    pub mute_audio_on_focus_loss: bool,
    pub hide_strict_nat_help_dialog: bool,
    pub player_input_bindings: ::protobuf::SingularPtrField<PlayerInputBindings>,
    pub news_hashes: ::std::vec::Vec<u32>,
    pub last_used_savegame_id: u32,
    pub gamepad_hip_sensitivity_level: i32,
    pub gamepad_zoomed_sensitivity_level: i32,
    pub gamepad_vehicle_sensitivity_level: i32,
    pub gamepad_movement_dead_zone_x: f32,
    pub gamepad_movement_dead_zone_y: f32,
    pub gamepad_look_dead_zone_inner_x: f32,
    pub gamepad_look_dead_zone_outer_x: f32,
    pub gamepad_look_dead_zone_inner_y: f32,
    pub gamepad_look_dead_zone_outer_y: f32,
    pub gamepad_vehicle_movement_dead_zone_x: f32,
    pub gamepad_vehicle_movement_dead_zone_y: f32,
    pub gamepad_vehicle_look_dead_zone_inner_x: f32,
    pub gamepad_vehicle_look_dead_zone_outer_x: f32,
    pub gamepad_vehicle_look_dead_zone_inner_y: f32,
    pub gamepad_vehicle_look_dead_zone_outer_y: f32,
    pub gamepad_left_dead_zone_inner: f32,
    pub gamepad_left_dead_zone_outer: f32,
    pub gamepad_right_dead_zone_inner: f32,
    pub gamepad_right_dead_zone_outer: f32,
    pub gamepad_look_axial_dead_zone_scale: f32,
    pub gamepad_move_axial_dead_zone_scale: f32,
    pub gamepad_use_advanced_hip_aim_settings: bool,
    pub gamepad_use_advanced_zoomed_aim_settings: bool,
    pub gamepad_use_advanced_vehicle_aim_settings: bool,
    pub gamepad_hip_yaw_rate: f32,
    pub gamepad_hip_pitch_rate: f32,
    pub gamepad_hip_extra_yaw: f32,
    pub gamepad_hip_extra_pitch: f32,
    pub gamepad_hip_ramp_up_time: f32,
    pub gamepad_hip_ramp_up_delay: f32,
    pub gamepad_zoomed_yaw_rate: f32,
    pub gamepad_zoomed_pitch_rate: f32,
    pub gamepad_zoomed_extra_yaw: f32,
    pub gamepad_zoomed_extra_pitch: f32,
    pub gamepad_zoomed_ramp_up_time: f32,
    pub gamepad_zoomed_ramp_up_delay: f32,
    pub gamepad_vehicle_yaw_rate: f32,
    pub gamepad_vehicle_pitch_rate: f32,
    pub gamepad_vehicle_extra_yaw: f32,
    pub gamepad_vehicle_extra_pitch: f32,
    pub gamepad_vehicle_ramp_up_time: f32,
    pub gamepad_vehicle_ramp_up_delay: f32,
    pub ironsight_aim_assist: bool,
    pub walking_joystick_scheme: u32,
    pub driving_joystick_scheme: u32,
    pub mouse_ads_scale: f32,
    pub mouse_vehicle_scale: f32,
    pub mouse_ironsight_aim_assist: bool,
    pub vehicle_input_mode: u32,
    pub weapon_aim_toggle: bool,
    pub mantle_requires_button: bool,
    pub fixed_minimap_rotation: bool,
    pub map_invert_pitch: bool,
    pub map_invert_yaw: bool,
    pub difficulty: u32,
    pub swap_dual_wield_controls: bool,
    pub base_fov: f32,
    pub crosshair_neutral_color_frame: u32,
    pub crosshair_enemy_color_frame: u32,
    pub crosshair_ally_color_frame: u32,
    pub enable_subtitles: bool,
    pub enable_closed_captions: bool,
    pub last_status_menu_page: ::std::string::String,
    pub inventory_screen_last_filter: ::protobuf::RepeatedField<OakProfileLastInventoryFilterInfo>,
    pub tutorial_info: ::protobuf::SingularPtrField<OakProfileMenuTutorialInfo>,
    pub default_network_type: u32,
    pub default_invite_type: u32,
    pub matchmaking_region: ::std::string::String,
    pub streaming_service: u32,
    pub max_cached_friend_events: i32,
    pub max_cached_friend_statuses: i32,
    pub friend_events: ::protobuf::RepeatedField<::std::string::String>,
    pub friend_statuses: ::protobuf::RepeatedField<::std::string::String>,
    pub last_whisper_fetch_events_time: i64,
    pub last_whisper_fetch_statuses_time: i64,
    pub desired_crossplay_state: u32,
    pub friend_encounters: ::protobuf::RepeatedField<Profile_FriendEncountersEntry>,
    pub max_friend_encounter_size: i32,
    pub profile_stats_data: ::protobuf::RepeatedField<super::oak_shared::GameStatSaveGameData>,
    pub bank_inventory_category_list: ::protobuf::RepeatedField<super::oak_shared::InventoryCategorySaveData>,
    pub bank_inventory_list: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub lost_loot_inventory_list: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub npc_mail_items: ::protobuf::RepeatedField<super::oak_shared::OakMailItem>,
    pub mail_guids: ::protobuf::RepeatedField<::std::string::String>,
    pub unread_mail_guids: ::protobuf::RepeatedField<::std::string::String>,
    pub gear_sold_by_friends: ::protobuf::RepeatedField<GearSoldByFriendData>,
    pub profile_sdu_list: ::protobuf::RepeatedField<super::oak_shared::OakSDUSaveGameData>,
    pub unlocked_customizations: ::protobuf::RepeatedField<super::oak_shared::OakCustomizationSaveGameData>,
    pub unlocked_inventory_customization_parts: ::protobuf::RepeatedField<super::oak_shared::OakInventoryCustomizationPartInfo>,
    pub guardian_rank: ::protobuf::SingularPtrField<GuardianRankProfileData>,
    pub unlocked_crew_quarters_decorations: ::protobuf::RepeatedField<super::oak_shared::CrewQuartersDecorationItemSaveGameData>,
    pub unlocked_crew_quarters_rooms: ::protobuf::RepeatedField<super::oak_shared::CrewQuartersRoomItemSaveGameData>,
    pub enable_mouse_acceleration: bool,
    pub enable_gamepad_input: bool,
    pub use_classic_gamepad_input: bool,
    pub master_volume: f32,
    pub monitor_display_type: u32,
    pub graphics_mode: u32,
    pub frame_rate_limit: u32,
    pub base_vehicle_fov: f32,
    pub graphics_quality: u32,
    pub anisotropic_filtering: u32,
    pub shadow_quality: u32,
    pub display_performance_stats: u32,
    pub texture_detail: u32,
    pub draw_distance: u32,
    pub clutter: u32,
    pub tessellation: u32,
    pub foliage: u32,
    pub foliage_shadows: bool,
    pub planar_reflections: bool,
    pub volumetric_fog: u32,
    pub screen_space_reflections: u32,
    pub character_texture_detail: u32,
    pub character_detail: u32,
    pub ambient_occlusion_quality: u32,
    pub object_motion_blur: bool,
    pub lens_flare: bool,
    pub combat_number_long_format: bool,
    pub show_minimap_legendaries: bool,
    pub use_player_callouts: bool,
    pub friend_event_notification_lifetime: u32,
    pub friend_event_notification_frequency: u32,
    pub trade_request_reception_type: u32,
    pub head_bob_scale: f32,
    pub has_seen_first_boot: bool,
    pub subs_cc_size: f32,
    pub cc_subs_background_opacity: f32,
    pub walking_button_scheme: u32,
    pub driving_button_scheme: u32,
    pub glyph_mode: u32,
    pub use_MPH: bool,
    pub registered_downloadable_entitlements: ::protobuf::RepeatedField<super::oak_shared::RegisteredDownloadableEntitlements>,
    pub seen_news_items: ::protobuf::RepeatedField<::std::string::String>,
    pub auto_centering_enabled: bool,
    pub increased_chance_for_subscribers: bool,
    pub rare_chest_event_enabled: bool,
    pub badass_event_enabled: bool,
    pub pinata_event_enabled: bool,
    pub min_time_between_badass_events: i32,
    pub hud_scale_multiplier: f32,
    pub disable_spatial_audio__or__has_reset_console_fov: bool,
    pub total_playtime_seconds: i32,
    pub moxxis_drink_event_enabled: bool,
    pub moxxis_drink_event_bits_product_id: i32,
    pub challenge_data: ::protobuf::RepeatedField<super::oak_shared::ChallengeSaveGameData>,
    pub CitizenScienceLevelProgression: ::std::vec::Vec<i32>,
    pub default_dead_zone_inner_updated: bool,
    pub disable_event_content: bool,
    pub desired_friend_sync_state: u32,
    pub needs_shift_first_boot: bool,
    pub recently_met_players: ::protobuf::RepeatedField<RecentlyMetPlayer>,
    pub CitizenScienceActiveBoosterIndex: i32,
    pub CitizenScienceActiveBoosterRemainingTime: f32,
    pub CitizenScienceActiveBoosterTotalTime: f32,
    pub StreamerPrimaryActiveBoosterIndex: i32,
    pub StreamerPrimaryActiveBoosterRemainingTime: f32,
    pub StreamerPrimaryActiveBoosterTotalTime: f32,
    pub StreamerSecondaryActiveBoosterIndex: i32,
    pub StreamerSecondaryActiveBoosterRemainingTime: f32,
    pub StreamerSecondaryActiveBoosterTotalTime: f32,
    pub StreamerBoosterTier: i32,
    pub CitizenScienceCSBucksAmount: i32,
    pub bCitizenScienceHasSeenIntroVideo: bool,
    pub bCitizenScienceTutorialDone: bool,
    pub enable_trigger_feedback: bool,
    pub fixed_initial_zonemap_rotation: bool,
    pub vault_card: ::protobuf::SingularPtrField<super::oak_shared::VaultCardSaveGameData>,
    pub player_selected_league: u32,
    pub needs_shift_first_boot_primary: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Profile {
    fn default() -> &'a Profile {
        <Profile as ::protobuf::Message>::default_instance()
    }
}

impl Profile {
    pub fn new() -> Profile {
        ::std::default::Default::default()
    }

    // bool enable_aim_assist = 1;


    pub fn get_enable_aim_assist(&self) -> bool {
        self.enable_aim_assist
    }
    pub fn clear_enable_aim_assist(&mut self) {
        self.enable_aim_assist = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_aim_assist(&mut self, v: bool) {
        self.enable_aim_assist = v;
    }

    // bool gamepad_invert_look = 2;


    pub fn get_gamepad_invert_look(&self) -> bool {
        self.gamepad_invert_look
    }
    pub fn clear_gamepad_invert_look(&mut self) {
        self.gamepad_invert_look = false;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_invert_look(&mut self, v: bool) {
        self.gamepad_invert_look = v;
    }

    // bool gamepad_invert_turn = 3;


    pub fn get_gamepad_invert_turn(&self) -> bool {
        self.gamepad_invert_turn
    }
    pub fn clear_gamepad_invert_turn(&mut self) {
        self.gamepad_invert_turn = false;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_invert_turn(&mut self, v: bool) {
        self.gamepad_invert_turn = v;
    }

    // bool gamepad_invert_move = 4;


    pub fn get_gamepad_invert_move(&self) -> bool {
        self.gamepad_invert_move
    }
    pub fn clear_gamepad_invert_move(&mut self) {
        self.gamepad_invert_move = false;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_invert_move(&mut self, v: bool) {
        self.gamepad_invert_move = v;
    }

    // bool gamepad_invert_strafe = 5;


    pub fn get_gamepad_invert_strafe(&self) -> bool {
        self.gamepad_invert_strafe
    }
    pub fn clear_gamepad_invert_strafe(&mut self) {
        self.gamepad_invert_strafe = false;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_invert_strafe(&mut self, v: bool) {
        self.gamepad_invert_strafe = v;
    }

    // bool enable_vibration = 6;


    pub fn get_enable_vibration(&self) -> bool {
        self.enable_vibration
    }
    pub fn clear_enable_vibration(&mut self) {
        self.enable_vibration = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_vibration(&mut self, v: bool) {
        self.enable_vibration = v;
    }

    // bool invert_mouse_pitch = 7;


    pub fn get_invert_mouse_pitch(&self) -> bool {
        self.invert_mouse_pitch
    }
    pub fn clear_invert_mouse_pitch(&mut self) {
        self.invert_mouse_pitch = false;
    }

    // Param is passed by value, moved
    pub fn set_invert_mouse_pitch(&mut self, v: bool) {
        self.invert_mouse_pitch = v;
    }

    // bool enable_mouse_smoothing = 8;


    pub fn get_enable_mouse_smoothing(&self) -> bool {
        self.enable_mouse_smoothing
    }
    pub fn clear_enable_mouse_smoothing(&mut self) {
        self.enable_mouse_smoothing = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_mouse_smoothing(&mut self, v: bool) {
        self.enable_mouse_smoothing = v;
    }

    // float mouse_scale = 9;


    pub fn get_mouse_scale(&self) -> f32 {
        self.mouse_scale
    }
    pub fn clear_mouse_scale(&mut self) {
        self.mouse_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mouse_scale(&mut self, v: f32) {
        self.mouse_scale = v;
    }

    // bool show_damage_numbers = 10;


    pub fn get_show_damage_numbers(&self) -> bool {
        self.show_damage_numbers
    }
    pub fn clear_show_damage_numbers(&mut self) {
        self.show_damage_numbers = false;
    }

    // Param is passed by value, moved
    pub fn set_show_damage_numbers(&mut self, v: bool) {
        self.show_damage_numbers = v;
    }

    // bool show_damage_number_icons = 11;


    pub fn get_show_damage_number_icons(&self) -> bool {
        self.show_damage_number_icons
    }
    pub fn clear_show_damage_number_icons(&mut self) {
        self.show_damage_number_icons = false;
    }

    // Param is passed by value, moved
    pub fn set_show_damage_number_icons(&mut self, v: bool) {
        self.show_damage_number_icons = v;
    }

    // bool enable_training_messages = 12;


    pub fn get_enable_training_messages(&self) -> bool {
        self.enable_training_messages
    }
    pub fn clear_enable_training_messages(&mut self) {
        self.enable_training_messages = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_training_messages(&mut self, v: bool) {
        self.enable_training_messages = v;
    }

    // bool show_text_chat = 13;


    pub fn get_show_text_chat(&self) -> bool {
        self.show_text_chat
    }
    pub fn clear_show_text_chat(&mut self) {
        self.show_text_chat = false;
    }

    // Param is passed by value, moved
    pub fn set_show_text_chat(&mut self, v: bool) {
        self.show_text_chat = v;
    }

    // bool center_crosshair = 14;


    pub fn get_center_crosshair(&self) -> bool {
        self.center_crosshair
    }
    pub fn clear_center_crosshair(&mut self) {
        self.center_crosshair = false;
    }

    // Param is passed by value, moved
    pub fn set_center_crosshair(&mut self, v: bool) {
        self.center_crosshair = v;
    }

    // bool toggle_sprint = 15;


    pub fn get_toggle_sprint(&self) -> bool {
        self.toggle_sprint
    }
    pub fn clear_toggle_sprint(&mut self) {
        self.toggle_sprint = false;
    }

    // Param is passed by value, moved
    pub fn set_toggle_sprint(&mut self, v: bool) {
        self.toggle_sprint = v;
    }

    // bool toggle_crouch = 16;


    pub fn get_toggle_crouch(&self) -> bool {
        self.toggle_crouch
    }
    pub fn clear_toggle_crouch(&mut self) {
        self.toggle_crouch = false;
    }

    // Param is passed by value, moved
    pub fn set_toggle_crouch(&mut self, v: bool) {
        self.toggle_crouch = v;
    }

    // bool censor_content = 17;


    pub fn get_censor_content(&self) -> bool {
        self.censor_content
    }
    pub fn clear_censor_content(&mut self) {
        self.censor_content = false;
    }

    // Param is passed by value, moved
    pub fn set_censor_content(&mut self, v: bool) {
        self.censor_content = v;
    }

    // float music_volume = 18;


    pub fn get_music_volume(&self) -> f32 {
        self.music_volume
    }
    pub fn clear_music_volume(&mut self) {
        self.music_volume = 0.;
    }

    // Param is passed by value, moved
    pub fn set_music_volume(&mut self, v: f32) {
        self.music_volume = v;
    }

    // float sound_effects_volume = 19;


    pub fn get_sound_effects_volume(&self) -> f32 {
        self.sound_effects_volume
    }
    pub fn clear_sound_effects_volume(&mut self) {
        self.sound_effects_volume = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sound_effects_volume(&mut self, v: f32) {
        self.sound_effects_volume = v;
    }

    // float vo_volume = 20;


    pub fn get_vo_volume(&self) -> f32 {
        self.vo_volume
    }
    pub fn clear_vo_volume(&mut self) {
        self.vo_volume = 0.;
    }

    // Param is passed by value, moved
    pub fn set_vo_volume(&mut self, v: f32) {
        self.vo_volume = v;
    }

    // float voice_volume = 21;


    pub fn get_voice_volume(&self) -> f32 {
        self.voice_volume
    }
    pub fn clear_voice_volume(&mut self) {
        self.voice_volume = 0.;
    }

    // Param is passed by value, moved
    pub fn set_voice_volume(&mut self, v: f32) {
        self.voice_volume = v;
    }

    // bool enable_optional_vo = 22;


    pub fn get_enable_optional_vo(&self) -> bool {
        self.enable_optional_vo
    }
    pub fn clear_enable_optional_vo(&mut self) {
        self.enable_optional_vo = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_optional_vo(&mut self, v: bool) {
        self.enable_optional_vo = v;
    }

    // bool push_to_talk = 23;


    pub fn get_push_to_talk(&self) -> bool {
        self.push_to_talk
    }
    pub fn clear_push_to_talk(&mut self) {
        self.push_to_talk = false;
    }

    // Param is passed by value, moved
    pub fn set_push_to_talk(&mut self, v: bool) {
        self.push_to_talk = v;
    }

    // bool enable_controller_audio = 24;


    pub fn get_enable_controller_audio(&self) -> bool {
        self.enable_controller_audio
    }
    pub fn clear_enable_controller_audio(&mut self) {
        self.enable_controller_audio = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_controller_audio(&mut self, v: bool) {
        self.enable_controller_audio = v;
    }

    // float speaker_angle_front = 25;


    pub fn get_speaker_angle_front(&self) -> f32 {
        self.speaker_angle_front
    }
    pub fn clear_speaker_angle_front(&mut self) {
        self.speaker_angle_front = 0.;
    }

    // Param is passed by value, moved
    pub fn set_speaker_angle_front(&mut self, v: f32) {
        self.speaker_angle_front = v;
    }

    // float speaker_angle_side = 26;


    pub fn get_speaker_angle_side(&self) -> f32 {
        self.speaker_angle_side
    }
    pub fn clear_speaker_angle_side(&mut self) {
        self.speaker_angle_side = 0.;
    }

    // Param is passed by value, moved
    pub fn set_speaker_angle_side(&mut self, v: f32) {
        self.speaker_angle_side = v;
    }

    // float speaker_angle_back = 27;


    pub fn get_speaker_angle_back(&self) -> f32 {
        self.speaker_angle_back
    }
    pub fn clear_speaker_angle_back(&mut self) {
        self.speaker_angle_back = 0.;
    }

    // Param is passed by value, moved
    pub fn set_speaker_angle_back(&mut self, v: f32) {
        self.speaker_angle_back = v;
    }

    // uint32 speaker_setup = 28;


    pub fn get_speaker_setup(&self) -> u32 {
        self.speaker_setup
    }
    pub fn clear_speaker_setup(&mut self) {
        self.speaker_setup = 0;
    }

    // Param is passed by value, moved
    pub fn set_speaker_setup(&mut self, v: u32) {
        self.speaker_setup = v;
    }

    // bool mute_audio_on_focus_loss = 29;


    pub fn get_mute_audio_on_focus_loss(&self) -> bool {
        self.mute_audio_on_focus_loss
    }
    pub fn clear_mute_audio_on_focus_loss(&mut self) {
        self.mute_audio_on_focus_loss = false;
    }

    // Param is passed by value, moved
    pub fn set_mute_audio_on_focus_loss(&mut self, v: bool) {
        self.mute_audio_on_focus_loss = v;
    }

    // bool hide_strict_nat_help_dialog = 34;


    pub fn get_hide_strict_nat_help_dialog(&self) -> bool {
        self.hide_strict_nat_help_dialog
    }
    pub fn clear_hide_strict_nat_help_dialog(&mut self) {
        self.hide_strict_nat_help_dialog = false;
    }

    // Param is passed by value, moved
    pub fn set_hide_strict_nat_help_dialog(&mut self, v: bool) {
        self.hide_strict_nat_help_dialog = v;
    }

    // .OakSave.PlayerInputBindings player_input_bindings = 35;


    pub fn get_player_input_bindings(&self) -> &PlayerInputBindings {
        self.player_input_bindings.as_ref().unwrap_or_else(|| <PlayerInputBindings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_player_input_bindings(&mut self) {
        self.player_input_bindings.clear();
    }

    pub fn has_player_input_bindings(&self) -> bool {
        self.player_input_bindings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_input_bindings(&mut self, v: PlayerInputBindings) {
        self.player_input_bindings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player_input_bindings(&mut self) -> &mut PlayerInputBindings {
        if self.player_input_bindings.is_none() {
            self.player_input_bindings.set_default();
        }
        self.player_input_bindings.as_mut().unwrap()
    }

    // Take field
    pub fn take_player_input_bindings(&mut self) -> PlayerInputBindings {
        self.player_input_bindings.take().unwrap_or_else(|| PlayerInputBindings::new())
    }

    // repeated uint32 news_hashes = 36;


    pub fn get_news_hashes(&self) -> &[u32] {
        &self.news_hashes
    }
    pub fn clear_news_hashes(&mut self) {
        self.news_hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_news_hashes(&mut self, v: ::std::vec::Vec<u32>) {
        self.news_hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_news_hashes(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.news_hashes
    }

    // Take field
    pub fn take_news_hashes(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.news_hashes, ::std::vec::Vec::new())
    }

    // uint32 last_used_savegame_id = 37;


    pub fn get_last_used_savegame_id(&self) -> u32 {
        self.last_used_savegame_id
    }
    pub fn clear_last_used_savegame_id(&mut self) {
        self.last_used_savegame_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_used_savegame_id(&mut self, v: u32) {
        self.last_used_savegame_id = v;
    }

    // int32 gamepad_hip_sensitivity_level = 38;


    pub fn get_gamepad_hip_sensitivity_level(&self) -> i32 {
        self.gamepad_hip_sensitivity_level
    }
    pub fn clear_gamepad_hip_sensitivity_level(&mut self) {
        self.gamepad_hip_sensitivity_level = 0;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_hip_sensitivity_level(&mut self, v: i32) {
        self.gamepad_hip_sensitivity_level = v;
    }

    // int32 gamepad_zoomed_sensitivity_level = 39;


    pub fn get_gamepad_zoomed_sensitivity_level(&self) -> i32 {
        self.gamepad_zoomed_sensitivity_level
    }
    pub fn clear_gamepad_zoomed_sensitivity_level(&mut self) {
        self.gamepad_zoomed_sensitivity_level = 0;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_zoomed_sensitivity_level(&mut self, v: i32) {
        self.gamepad_zoomed_sensitivity_level = v;
    }

    // int32 gamepad_vehicle_sensitivity_level = 40;


    pub fn get_gamepad_vehicle_sensitivity_level(&self) -> i32 {
        self.gamepad_vehicle_sensitivity_level
    }
    pub fn clear_gamepad_vehicle_sensitivity_level(&mut self) {
        self.gamepad_vehicle_sensitivity_level = 0;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_sensitivity_level(&mut self, v: i32) {
        self.gamepad_vehicle_sensitivity_level = v;
    }

    // float gamepad_movement_dead_zone_x = 41;


    pub fn get_gamepad_movement_dead_zone_x(&self) -> f32 {
        self.gamepad_movement_dead_zone_x
    }
    pub fn clear_gamepad_movement_dead_zone_x(&mut self) {
        self.gamepad_movement_dead_zone_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_movement_dead_zone_x(&mut self, v: f32) {
        self.gamepad_movement_dead_zone_x = v;
    }

    // float gamepad_movement_dead_zone_y = 42;


    pub fn get_gamepad_movement_dead_zone_y(&self) -> f32 {
        self.gamepad_movement_dead_zone_y
    }
    pub fn clear_gamepad_movement_dead_zone_y(&mut self) {
        self.gamepad_movement_dead_zone_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_movement_dead_zone_y(&mut self, v: f32) {
        self.gamepad_movement_dead_zone_y = v;
    }

    // float gamepad_look_dead_zone_inner_x = 43;


    pub fn get_gamepad_look_dead_zone_inner_x(&self) -> f32 {
        self.gamepad_look_dead_zone_inner_x
    }
    pub fn clear_gamepad_look_dead_zone_inner_x(&mut self) {
        self.gamepad_look_dead_zone_inner_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_look_dead_zone_inner_x(&mut self, v: f32) {
        self.gamepad_look_dead_zone_inner_x = v;
    }

    // float gamepad_look_dead_zone_outer_x = 44;


    pub fn get_gamepad_look_dead_zone_outer_x(&self) -> f32 {
        self.gamepad_look_dead_zone_outer_x
    }
    pub fn clear_gamepad_look_dead_zone_outer_x(&mut self) {
        self.gamepad_look_dead_zone_outer_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_look_dead_zone_outer_x(&mut self, v: f32) {
        self.gamepad_look_dead_zone_outer_x = v;
    }

    // float gamepad_look_dead_zone_inner_y = 45;


    pub fn get_gamepad_look_dead_zone_inner_y(&self) -> f32 {
        self.gamepad_look_dead_zone_inner_y
    }
    pub fn clear_gamepad_look_dead_zone_inner_y(&mut self) {
        self.gamepad_look_dead_zone_inner_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_look_dead_zone_inner_y(&mut self, v: f32) {
        self.gamepad_look_dead_zone_inner_y = v;
    }

    // float gamepad_look_dead_zone_outer_y = 46;


    pub fn get_gamepad_look_dead_zone_outer_y(&self) -> f32 {
        self.gamepad_look_dead_zone_outer_y
    }
    pub fn clear_gamepad_look_dead_zone_outer_y(&mut self) {
        self.gamepad_look_dead_zone_outer_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_look_dead_zone_outer_y(&mut self, v: f32) {
        self.gamepad_look_dead_zone_outer_y = v;
    }

    // float gamepad_vehicle_movement_dead_zone_x = 47;


    pub fn get_gamepad_vehicle_movement_dead_zone_x(&self) -> f32 {
        self.gamepad_vehicle_movement_dead_zone_x
    }
    pub fn clear_gamepad_vehicle_movement_dead_zone_x(&mut self) {
        self.gamepad_vehicle_movement_dead_zone_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_movement_dead_zone_x(&mut self, v: f32) {
        self.gamepad_vehicle_movement_dead_zone_x = v;
    }

    // float gamepad_vehicle_movement_dead_zone_y = 48;


    pub fn get_gamepad_vehicle_movement_dead_zone_y(&self) -> f32 {
        self.gamepad_vehicle_movement_dead_zone_y
    }
    pub fn clear_gamepad_vehicle_movement_dead_zone_y(&mut self) {
        self.gamepad_vehicle_movement_dead_zone_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_movement_dead_zone_y(&mut self, v: f32) {
        self.gamepad_vehicle_movement_dead_zone_y = v;
    }

    // float gamepad_vehicle_look_dead_zone_inner_x = 49;


    pub fn get_gamepad_vehicle_look_dead_zone_inner_x(&self) -> f32 {
        self.gamepad_vehicle_look_dead_zone_inner_x
    }
    pub fn clear_gamepad_vehicle_look_dead_zone_inner_x(&mut self) {
        self.gamepad_vehicle_look_dead_zone_inner_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_look_dead_zone_inner_x(&mut self, v: f32) {
        self.gamepad_vehicle_look_dead_zone_inner_x = v;
    }

    // float gamepad_vehicle_look_dead_zone_outer_x = 50;


    pub fn get_gamepad_vehicle_look_dead_zone_outer_x(&self) -> f32 {
        self.gamepad_vehicle_look_dead_zone_outer_x
    }
    pub fn clear_gamepad_vehicle_look_dead_zone_outer_x(&mut self) {
        self.gamepad_vehicle_look_dead_zone_outer_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_look_dead_zone_outer_x(&mut self, v: f32) {
        self.gamepad_vehicle_look_dead_zone_outer_x = v;
    }

    // float gamepad_vehicle_look_dead_zone_inner_y = 51;


    pub fn get_gamepad_vehicle_look_dead_zone_inner_y(&self) -> f32 {
        self.gamepad_vehicle_look_dead_zone_inner_y
    }
    pub fn clear_gamepad_vehicle_look_dead_zone_inner_y(&mut self) {
        self.gamepad_vehicle_look_dead_zone_inner_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_look_dead_zone_inner_y(&mut self, v: f32) {
        self.gamepad_vehicle_look_dead_zone_inner_y = v;
    }

    // float gamepad_vehicle_look_dead_zone_outer_y = 52;


    pub fn get_gamepad_vehicle_look_dead_zone_outer_y(&self) -> f32 {
        self.gamepad_vehicle_look_dead_zone_outer_y
    }
    pub fn clear_gamepad_vehicle_look_dead_zone_outer_y(&mut self) {
        self.gamepad_vehicle_look_dead_zone_outer_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_look_dead_zone_outer_y(&mut self, v: f32) {
        self.gamepad_vehicle_look_dead_zone_outer_y = v;
    }

    // float gamepad_left_dead_zone_inner = 53;


    pub fn get_gamepad_left_dead_zone_inner(&self) -> f32 {
        self.gamepad_left_dead_zone_inner
    }
    pub fn clear_gamepad_left_dead_zone_inner(&mut self) {
        self.gamepad_left_dead_zone_inner = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_left_dead_zone_inner(&mut self, v: f32) {
        self.gamepad_left_dead_zone_inner = v;
    }

    // float gamepad_left_dead_zone_outer = 54;


    pub fn get_gamepad_left_dead_zone_outer(&self) -> f32 {
        self.gamepad_left_dead_zone_outer
    }
    pub fn clear_gamepad_left_dead_zone_outer(&mut self) {
        self.gamepad_left_dead_zone_outer = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_left_dead_zone_outer(&mut self, v: f32) {
        self.gamepad_left_dead_zone_outer = v;
    }

    // float gamepad_right_dead_zone_inner = 55;


    pub fn get_gamepad_right_dead_zone_inner(&self) -> f32 {
        self.gamepad_right_dead_zone_inner
    }
    pub fn clear_gamepad_right_dead_zone_inner(&mut self) {
        self.gamepad_right_dead_zone_inner = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_right_dead_zone_inner(&mut self, v: f32) {
        self.gamepad_right_dead_zone_inner = v;
    }

    // float gamepad_right_dead_zone_outer = 56;


    pub fn get_gamepad_right_dead_zone_outer(&self) -> f32 {
        self.gamepad_right_dead_zone_outer
    }
    pub fn clear_gamepad_right_dead_zone_outer(&mut self) {
        self.gamepad_right_dead_zone_outer = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_right_dead_zone_outer(&mut self, v: f32) {
        self.gamepad_right_dead_zone_outer = v;
    }

    // float gamepad_look_axial_dead_zone_scale = 57;


    pub fn get_gamepad_look_axial_dead_zone_scale(&self) -> f32 {
        self.gamepad_look_axial_dead_zone_scale
    }
    pub fn clear_gamepad_look_axial_dead_zone_scale(&mut self) {
        self.gamepad_look_axial_dead_zone_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_look_axial_dead_zone_scale(&mut self, v: f32) {
        self.gamepad_look_axial_dead_zone_scale = v;
    }

    // float gamepad_move_axial_dead_zone_scale = 58;


    pub fn get_gamepad_move_axial_dead_zone_scale(&self) -> f32 {
        self.gamepad_move_axial_dead_zone_scale
    }
    pub fn clear_gamepad_move_axial_dead_zone_scale(&mut self) {
        self.gamepad_move_axial_dead_zone_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_move_axial_dead_zone_scale(&mut self, v: f32) {
        self.gamepad_move_axial_dead_zone_scale = v;
    }

    // bool gamepad_use_advanced_hip_aim_settings = 59;


    pub fn get_gamepad_use_advanced_hip_aim_settings(&self) -> bool {
        self.gamepad_use_advanced_hip_aim_settings
    }
    pub fn clear_gamepad_use_advanced_hip_aim_settings(&mut self) {
        self.gamepad_use_advanced_hip_aim_settings = false;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_use_advanced_hip_aim_settings(&mut self, v: bool) {
        self.gamepad_use_advanced_hip_aim_settings = v;
    }

    // bool gamepad_use_advanced_zoomed_aim_settings = 60;


    pub fn get_gamepad_use_advanced_zoomed_aim_settings(&self) -> bool {
        self.gamepad_use_advanced_zoomed_aim_settings
    }
    pub fn clear_gamepad_use_advanced_zoomed_aim_settings(&mut self) {
        self.gamepad_use_advanced_zoomed_aim_settings = false;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_use_advanced_zoomed_aim_settings(&mut self, v: bool) {
        self.gamepad_use_advanced_zoomed_aim_settings = v;
    }

    // bool gamepad_use_advanced_vehicle_aim_settings = 61;


    pub fn get_gamepad_use_advanced_vehicle_aim_settings(&self) -> bool {
        self.gamepad_use_advanced_vehicle_aim_settings
    }
    pub fn clear_gamepad_use_advanced_vehicle_aim_settings(&mut self) {
        self.gamepad_use_advanced_vehicle_aim_settings = false;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_use_advanced_vehicle_aim_settings(&mut self, v: bool) {
        self.gamepad_use_advanced_vehicle_aim_settings = v;
    }

    // float gamepad_hip_yaw_rate = 62;


    pub fn get_gamepad_hip_yaw_rate(&self) -> f32 {
        self.gamepad_hip_yaw_rate
    }
    pub fn clear_gamepad_hip_yaw_rate(&mut self) {
        self.gamepad_hip_yaw_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_hip_yaw_rate(&mut self, v: f32) {
        self.gamepad_hip_yaw_rate = v;
    }

    // float gamepad_hip_pitch_rate = 63;


    pub fn get_gamepad_hip_pitch_rate(&self) -> f32 {
        self.gamepad_hip_pitch_rate
    }
    pub fn clear_gamepad_hip_pitch_rate(&mut self) {
        self.gamepad_hip_pitch_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_hip_pitch_rate(&mut self, v: f32) {
        self.gamepad_hip_pitch_rate = v;
    }

    // float gamepad_hip_extra_yaw = 64;


    pub fn get_gamepad_hip_extra_yaw(&self) -> f32 {
        self.gamepad_hip_extra_yaw
    }
    pub fn clear_gamepad_hip_extra_yaw(&mut self) {
        self.gamepad_hip_extra_yaw = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_hip_extra_yaw(&mut self, v: f32) {
        self.gamepad_hip_extra_yaw = v;
    }

    // float gamepad_hip_extra_pitch = 65;


    pub fn get_gamepad_hip_extra_pitch(&self) -> f32 {
        self.gamepad_hip_extra_pitch
    }
    pub fn clear_gamepad_hip_extra_pitch(&mut self) {
        self.gamepad_hip_extra_pitch = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_hip_extra_pitch(&mut self, v: f32) {
        self.gamepad_hip_extra_pitch = v;
    }

    // float gamepad_hip_ramp_up_time = 66;


    pub fn get_gamepad_hip_ramp_up_time(&self) -> f32 {
        self.gamepad_hip_ramp_up_time
    }
    pub fn clear_gamepad_hip_ramp_up_time(&mut self) {
        self.gamepad_hip_ramp_up_time = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_hip_ramp_up_time(&mut self, v: f32) {
        self.gamepad_hip_ramp_up_time = v;
    }

    // float gamepad_hip_ramp_up_delay = 67;


    pub fn get_gamepad_hip_ramp_up_delay(&self) -> f32 {
        self.gamepad_hip_ramp_up_delay
    }
    pub fn clear_gamepad_hip_ramp_up_delay(&mut self) {
        self.gamepad_hip_ramp_up_delay = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_hip_ramp_up_delay(&mut self, v: f32) {
        self.gamepad_hip_ramp_up_delay = v;
    }

    // float gamepad_zoomed_yaw_rate = 68;


    pub fn get_gamepad_zoomed_yaw_rate(&self) -> f32 {
        self.gamepad_zoomed_yaw_rate
    }
    pub fn clear_gamepad_zoomed_yaw_rate(&mut self) {
        self.gamepad_zoomed_yaw_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_zoomed_yaw_rate(&mut self, v: f32) {
        self.gamepad_zoomed_yaw_rate = v;
    }

    // float gamepad_zoomed_pitch_rate = 69;


    pub fn get_gamepad_zoomed_pitch_rate(&self) -> f32 {
        self.gamepad_zoomed_pitch_rate
    }
    pub fn clear_gamepad_zoomed_pitch_rate(&mut self) {
        self.gamepad_zoomed_pitch_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_zoomed_pitch_rate(&mut self, v: f32) {
        self.gamepad_zoomed_pitch_rate = v;
    }

    // float gamepad_zoomed_extra_yaw = 70;


    pub fn get_gamepad_zoomed_extra_yaw(&self) -> f32 {
        self.gamepad_zoomed_extra_yaw
    }
    pub fn clear_gamepad_zoomed_extra_yaw(&mut self) {
        self.gamepad_zoomed_extra_yaw = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_zoomed_extra_yaw(&mut self, v: f32) {
        self.gamepad_zoomed_extra_yaw = v;
    }

    // float gamepad_zoomed_extra_pitch = 71;


    pub fn get_gamepad_zoomed_extra_pitch(&self) -> f32 {
        self.gamepad_zoomed_extra_pitch
    }
    pub fn clear_gamepad_zoomed_extra_pitch(&mut self) {
        self.gamepad_zoomed_extra_pitch = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_zoomed_extra_pitch(&mut self, v: f32) {
        self.gamepad_zoomed_extra_pitch = v;
    }

    // float gamepad_zoomed_ramp_up_time = 72;


    pub fn get_gamepad_zoomed_ramp_up_time(&self) -> f32 {
        self.gamepad_zoomed_ramp_up_time
    }
    pub fn clear_gamepad_zoomed_ramp_up_time(&mut self) {
        self.gamepad_zoomed_ramp_up_time = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_zoomed_ramp_up_time(&mut self, v: f32) {
        self.gamepad_zoomed_ramp_up_time = v;
    }

    // float gamepad_zoomed_ramp_up_delay = 73;


    pub fn get_gamepad_zoomed_ramp_up_delay(&self) -> f32 {
        self.gamepad_zoomed_ramp_up_delay
    }
    pub fn clear_gamepad_zoomed_ramp_up_delay(&mut self) {
        self.gamepad_zoomed_ramp_up_delay = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_zoomed_ramp_up_delay(&mut self, v: f32) {
        self.gamepad_zoomed_ramp_up_delay = v;
    }

    // float gamepad_vehicle_yaw_rate = 74;


    pub fn get_gamepad_vehicle_yaw_rate(&self) -> f32 {
        self.gamepad_vehicle_yaw_rate
    }
    pub fn clear_gamepad_vehicle_yaw_rate(&mut self) {
        self.gamepad_vehicle_yaw_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_yaw_rate(&mut self, v: f32) {
        self.gamepad_vehicle_yaw_rate = v;
    }

    // float gamepad_vehicle_pitch_rate = 75;


    pub fn get_gamepad_vehicle_pitch_rate(&self) -> f32 {
        self.gamepad_vehicle_pitch_rate
    }
    pub fn clear_gamepad_vehicle_pitch_rate(&mut self) {
        self.gamepad_vehicle_pitch_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_pitch_rate(&mut self, v: f32) {
        self.gamepad_vehicle_pitch_rate = v;
    }

    // float gamepad_vehicle_extra_yaw = 76;


    pub fn get_gamepad_vehicle_extra_yaw(&self) -> f32 {
        self.gamepad_vehicle_extra_yaw
    }
    pub fn clear_gamepad_vehicle_extra_yaw(&mut self) {
        self.gamepad_vehicle_extra_yaw = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_extra_yaw(&mut self, v: f32) {
        self.gamepad_vehicle_extra_yaw = v;
    }

    // float gamepad_vehicle_extra_pitch = 77;


    pub fn get_gamepad_vehicle_extra_pitch(&self) -> f32 {
        self.gamepad_vehicle_extra_pitch
    }
    pub fn clear_gamepad_vehicle_extra_pitch(&mut self) {
        self.gamepad_vehicle_extra_pitch = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_extra_pitch(&mut self, v: f32) {
        self.gamepad_vehicle_extra_pitch = v;
    }

    // float gamepad_vehicle_ramp_up_time = 78;


    pub fn get_gamepad_vehicle_ramp_up_time(&self) -> f32 {
        self.gamepad_vehicle_ramp_up_time
    }
    pub fn clear_gamepad_vehicle_ramp_up_time(&mut self) {
        self.gamepad_vehicle_ramp_up_time = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_ramp_up_time(&mut self, v: f32) {
        self.gamepad_vehicle_ramp_up_time = v;
    }

    // float gamepad_vehicle_ramp_up_delay = 79;


    pub fn get_gamepad_vehicle_ramp_up_delay(&self) -> f32 {
        self.gamepad_vehicle_ramp_up_delay
    }
    pub fn clear_gamepad_vehicle_ramp_up_delay(&mut self) {
        self.gamepad_vehicle_ramp_up_delay = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gamepad_vehicle_ramp_up_delay(&mut self, v: f32) {
        self.gamepad_vehicle_ramp_up_delay = v;
    }

    // bool ironsight_aim_assist = 80;


    pub fn get_ironsight_aim_assist(&self) -> bool {
        self.ironsight_aim_assist
    }
    pub fn clear_ironsight_aim_assist(&mut self) {
        self.ironsight_aim_assist = false;
    }

    // Param is passed by value, moved
    pub fn set_ironsight_aim_assist(&mut self, v: bool) {
        self.ironsight_aim_assist = v;
    }

    // uint32 walking_joystick_scheme = 81;


    pub fn get_walking_joystick_scheme(&self) -> u32 {
        self.walking_joystick_scheme
    }
    pub fn clear_walking_joystick_scheme(&mut self) {
        self.walking_joystick_scheme = 0;
    }

    // Param is passed by value, moved
    pub fn set_walking_joystick_scheme(&mut self, v: u32) {
        self.walking_joystick_scheme = v;
    }

    // uint32 driving_joystick_scheme = 82;


    pub fn get_driving_joystick_scheme(&self) -> u32 {
        self.driving_joystick_scheme
    }
    pub fn clear_driving_joystick_scheme(&mut self) {
        self.driving_joystick_scheme = 0;
    }

    // Param is passed by value, moved
    pub fn set_driving_joystick_scheme(&mut self, v: u32) {
        self.driving_joystick_scheme = v;
    }

    // float mouse_ads_scale = 83;


    pub fn get_mouse_ads_scale(&self) -> f32 {
        self.mouse_ads_scale
    }
    pub fn clear_mouse_ads_scale(&mut self) {
        self.mouse_ads_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mouse_ads_scale(&mut self, v: f32) {
        self.mouse_ads_scale = v;
    }

    // float mouse_vehicle_scale = 84;


    pub fn get_mouse_vehicle_scale(&self) -> f32 {
        self.mouse_vehicle_scale
    }
    pub fn clear_mouse_vehicle_scale(&mut self) {
        self.mouse_vehicle_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mouse_vehicle_scale(&mut self, v: f32) {
        self.mouse_vehicle_scale = v;
    }

    // bool mouse_ironsight_aim_assist = 85;


    pub fn get_mouse_ironsight_aim_assist(&self) -> bool {
        self.mouse_ironsight_aim_assist
    }
    pub fn clear_mouse_ironsight_aim_assist(&mut self) {
        self.mouse_ironsight_aim_assist = false;
    }

    // Param is passed by value, moved
    pub fn set_mouse_ironsight_aim_assist(&mut self, v: bool) {
        self.mouse_ironsight_aim_assist = v;
    }

    // uint32 vehicle_input_mode = 86;


    pub fn get_vehicle_input_mode(&self) -> u32 {
        self.vehicle_input_mode
    }
    pub fn clear_vehicle_input_mode(&mut self) {
        self.vehicle_input_mode = 0;
    }

    // Param is passed by value, moved
    pub fn set_vehicle_input_mode(&mut self, v: u32) {
        self.vehicle_input_mode = v;
    }

    // bool weapon_aim_toggle = 87;


    pub fn get_weapon_aim_toggle(&self) -> bool {
        self.weapon_aim_toggle
    }
    pub fn clear_weapon_aim_toggle(&mut self) {
        self.weapon_aim_toggle = false;
    }

    // Param is passed by value, moved
    pub fn set_weapon_aim_toggle(&mut self, v: bool) {
        self.weapon_aim_toggle = v;
    }

    // bool mantle_requires_button = 88;


    pub fn get_mantle_requires_button(&self) -> bool {
        self.mantle_requires_button
    }
    pub fn clear_mantle_requires_button(&mut self) {
        self.mantle_requires_button = false;
    }

    // Param is passed by value, moved
    pub fn set_mantle_requires_button(&mut self, v: bool) {
        self.mantle_requires_button = v;
    }

    // bool fixed_minimap_rotation = 89;


    pub fn get_fixed_minimap_rotation(&self) -> bool {
        self.fixed_minimap_rotation
    }
    pub fn clear_fixed_minimap_rotation(&mut self) {
        self.fixed_minimap_rotation = false;
    }

    // Param is passed by value, moved
    pub fn set_fixed_minimap_rotation(&mut self, v: bool) {
        self.fixed_minimap_rotation = v;
    }

    // bool map_invert_pitch = 90;


    pub fn get_map_invert_pitch(&self) -> bool {
        self.map_invert_pitch
    }
    pub fn clear_map_invert_pitch(&mut self) {
        self.map_invert_pitch = false;
    }

    // Param is passed by value, moved
    pub fn set_map_invert_pitch(&mut self, v: bool) {
        self.map_invert_pitch = v;
    }

    // bool map_invert_yaw = 91;


    pub fn get_map_invert_yaw(&self) -> bool {
        self.map_invert_yaw
    }
    pub fn clear_map_invert_yaw(&mut self) {
        self.map_invert_yaw = false;
    }

    // Param is passed by value, moved
    pub fn set_map_invert_yaw(&mut self, v: bool) {
        self.map_invert_yaw = v;
    }

    // uint32 difficulty = 92;


    pub fn get_difficulty(&self) -> u32 {
        self.difficulty
    }
    pub fn clear_difficulty(&mut self) {
        self.difficulty = 0;
    }

    // Param is passed by value, moved
    pub fn set_difficulty(&mut self, v: u32) {
        self.difficulty = v;
    }

    // bool swap_dual_wield_controls = 93;


    pub fn get_swap_dual_wield_controls(&self) -> bool {
        self.swap_dual_wield_controls
    }
    pub fn clear_swap_dual_wield_controls(&mut self) {
        self.swap_dual_wield_controls = false;
    }

    // Param is passed by value, moved
    pub fn set_swap_dual_wield_controls(&mut self, v: bool) {
        self.swap_dual_wield_controls = v;
    }

    // float base_fov = 94;


    pub fn get_base_fov(&self) -> f32 {
        self.base_fov
    }
    pub fn clear_base_fov(&mut self) {
        self.base_fov = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_fov(&mut self, v: f32) {
        self.base_fov = v;
    }

    // uint32 crosshair_neutral_color_frame = 95;


    pub fn get_crosshair_neutral_color_frame(&self) -> u32 {
        self.crosshair_neutral_color_frame
    }
    pub fn clear_crosshair_neutral_color_frame(&mut self) {
        self.crosshair_neutral_color_frame = 0;
    }

    // Param is passed by value, moved
    pub fn set_crosshair_neutral_color_frame(&mut self, v: u32) {
        self.crosshair_neutral_color_frame = v;
    }

    // uint32 crosshair_enemy_color_frame = 96;


    pub fn get_crosshair_enemy_color_frame(&self) -> u32 {
        self.crosshair_enemy_color_frame
    }
    pub fn clear_crosshair_enemy_color_frame(&mut self) {
        self.crosshair_enemy_color_frame = 0;
    }

    // Param is passed by value, moved
    pub fn set_crosshair_enemy_color_frame(&mut self, v: u32) {
        self.crosshair_enemy_color_frame = v;
    }

    // uint32 crosshair_ally_color_frame = 97;


    pub fn get_crosshair_ally_color_frame(&self) -> u32 {
        self.crosshair_ally_color_frame
    }
    pub fn clear_crosshair_ally_color_frame(&mut self) {
        self.crosshair_ally_color_frame = 0;
    }

    // Param is passed by value, moved
    pub fn set_crosshair_ally_color_frame(&mut self, v: u32) {
        self.crosshair_ally_color_frame = v;
    }

    // bool enable_subtitles = 98;


    pub fn get_enable_subtitles(&self) -> bool {
        self.enable_subtitles
    }
    pub fn clear_enable_subtitles(&mut self) {
        self.enable_subtitles = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_subtitles(&mut self, v: bool) {
        self.enable_subtitles = v;
    }

    // bool enable_closed_captions = 99;


    pub fn get_enable_closed_captions(&self) -> bool {
        self.enable_closed_captions
    }
    pub fn clear_enable_closed_captions(&mut self) {
        self.enable_closed_captions = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_closed_captions(&mut self, v: bool) {
        self.enable_closed_captions = v;
    }

    // string last_status_menu_page = 100;


    pub fn get_last_status_menu_page(&self) -> &str {
        &self.last_status_menu_page
    }
    pub fn clear_last_status_menu_page(&mut self) {
        self.last_status_menu_page.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_status_menu_page(&mut self, v: ::std::string::String) {
        self.last_status_menu_page = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_status_menu_page(&mut self) -> &mut ::std::string::String {
        &mut self.last_status_menu_page
    }

    // Take field
    pub fn take_last_status_menu_page(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.last_status_menu_page, ::std::string::String::new())
    }

    // repeated .OakSave.OakProfileLastInventoryFilterInfo inventory_screen_last_filter = 101;


    pub fn get_inventory_screen_last_filter(&self) -> &[OakProfileLastInventoryFilterInfo] {
        &self.inventory_screen_last_filter
    }
    pub fn clear_inventory_screen_last_filter(&mut self) {
        self.inventory_screen_last_filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_inventory_screen_last_filter(&mut self, v: ::protobuf::RepeatedField<OakProfileLastInventoryFilterInfo>) {
        self.inventory_screen_last_filter = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inventory_screen_last_filter(&mut self) -> &mut ::protobuf::RepeatedField<OakProfileLastInventoryFilterInfo> {
        &mut self.inventory_screen_last_filter
    }

    // Take field
    pub fn take_inventory_screen_last_filter(&mut self) -> ::protobuf::RepeatedField<OakProfileLastInventoryFilterInfo> {
        ::std::mem::replace(&mut self.inventory_screen_last_filter, ::protobuf::RepeatedField::new())
    }

    // .OakSave.OakProfileMenuTutorialInfo tutorial_info = 102;


    pub fn get_tutorial_info(&self) -> &OakProfileMenuTutorialInfo {
        self.tutorial_info.as_ref().unwrap_or_else(|| <OakProfileMenuTutorialInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tutorial_info(&mut self) {
        self.tutorial_info.clear();
    }

    pub fn has_tutorial_info(&self) -> bool {
        self.tutorial_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tutorial_info(&mut self, v: OakProfileMenuTutorialInfo) {
        self.tutorial_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tutorial_info(&mut self) -> &mut OakProfileMenuTutorialInfo {
        if self.tutorial_info.is_none() {
            self.tutorial_info.set_default();
        }
        self.tutorial_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tutorial_info(&mut self) -> OakProfileMenuTutorialInfo {
        self.tutorial_info.take().unwrap_or_else(|| OakProfileMenuTutorialInfo::new())
    }

    // uint32 default_network_type = 103;


    pub fn get_default_network_type(&self) -> u32 {
        self.default_network_type
    }
    pub fn clear_default_network_type(&mut self) {
        self.default_network_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_default_network_type(&mut self, v: u32) {
        self.default_network_type = v;
    }

    // uint32 default_invite_type = 104;


    pub fn get_default_invite_type(&self) -> u32 {
        self.default_invite_type
    }
    pub fn clear_default_invite_type(&mut self) {
        self.default_invite_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_default_invite_type(&mut self, v: u32) {
        self.default_invite_type = v;
    }

    // string matchmaking_region = 105;


    pub fn get_matchmaking_region(&self) -> &str {
        &self.matchmaking_region
    }
    pub fn clear_matchmaking_region(&mut self) {
        self.matchmaking_region.clear();
    }

    // Param is passed by value, moved
    pub fn set_matchmaking_region(&mut self, v: ::std::string::String) {
        self.matchmaking_region = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_matchmaking_region(&mut self) -> &mut ::std::string::String {
        &mut self.matchmaking_region
    }

    // Take field
    pub fn take_matchmaking_region(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.matchmaking_region, ::std::string::String::new())
    }

    // uint32 streaming_service = 106;


    pub fn get_streaming_service(&self) -> u32 {
        self.streaming_service
    }
    pub fn clear_streaming_service(&mut self) {
        self.streaming_service = 0;
    }

    // Param is passed by value, moved
    pub fn set_streaming_service(&mut self, v: u32) {
        self.streaming_service = v;
    }

    // int32 max_cached_friend_events = 107;


    pub fn get_max_cached_friend_events(&self) -> i32 {
        self.max_cached_friend_events
    }
    pub fn clear_max_cached_friend_events(&mut self) {
        self.max_cached_friend_events = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_cached_friend_events(&mut self, v: i32) {
        self.max_cached_friend_events = v;
    }

    // int32 max_cached_friend_statuses = 108;


    pub fn get_max_cached_friend_statuses(&self) -> i32 {
        self.max_cached_friend_statuses
    }
    pub fn clear_max_cached_friend_statuses(&mut self) {
        self.max_cached_friend_statuses = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_cached_friend_statuses(&mut self, v: i32) {
        self.max_cached_friend_statuses = v;
    }

    // repeated string friend_events = 109;


    pub fn get_friend_events(&self) -> &[::std::string::String] {
        &self.friend_events
    }
    pub fn clear_friend_events(&mut self) {
        self.friend_events.clear();
    }

    // Param is passed by value, moved
    pub fn set_friend_events(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.friend_events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_friend_events(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.friend_events
    }

    // Take field
    pub fn take_friend_events(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.friend_events, ::protobuf::RepeatedField::new())
    }

    // repeated string friend_statuses = 110;


    pub fn get_friend_statuses(&self) -> &[::std::string::String] {
        &self.friend_statuses
    }
    pub fn clear_friend_statuses(&mut self) {
        self.friend_statuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_friend_statuses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.friend_statuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_friend_statuses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.friend_statuses
    }

    // Take field
    pub fn take_friend_statuses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.friend_statuses, ::protobuf::RepeatedField::new())
    }

    // int64 last_whisper_fetch_events_time = 111;


    pub fn get_last_whisper_fetch_events_time(&self) -> i64 {
        self.last_whisper_fetch_events_time
    }
    pub fn clear_last_whisper_fetch_events_time(&mut self) {
        self.last_whisper_fetch_events_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_whisper_fetch_events_time(&mut self, v: i64) {
        self.last_whisper_fetch_events_time = v;
    }

    // int64 last_whisper_fetch_statuses_time = 112;


    pub fn get_last_whisper_fetch_statuses_time(&self) -> i64 {
        self.last_whisper_fetch_statuses_time
    }
    pub fn clear_last_whisper_fetch_statuses_time(&mut self) {
        self.last_whisper_fetch_statuses_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_whisper_fetch_statuses_time(&mut self, v: i64) {
        self.last_whisper_fetch_statuses_time = v;
    }

    // uint32 desired_crossplay_state = 113;


    pub fn get_desired_crossplay_state(&self) -> u32 {
        self.desired_crossplay_state
    }
    pub fn clear_desired_crossplay_state(&mut self) {
        self.desired_crossplay_state = 0;
    }

    // Param is passed by value, moved
    pub fn set_desired_crossplay_state(&mut self, v: u32) {
        self.desired_crossplay_state = v;
    }

    // repeated .OakSave.Profile.FriendEncountersEntry friend_encounters = 133;


    pub fn get_friend_encounters(&self) -> &[Profile_FriendEncountersEntry] {
        &self.friend_encounters
    }
    pub fn clear_friend_encounters(&mut self) {
        self.friend_encounters.clear();
    }

    // Param is passed by value, moved
    pub fn set_friend_encounters(&mut self, v: ::protobuf::RepeatedField<Profile_FriendEncountersEntry>) {
        self.friend_encounters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_friend_encounters(&mut self) -> &mut ::protobuf::RepeatedField<Profile_FriendEncountersEntry> {
        &mut self.friend_encounters
    }

    // Take field
    pub fn take_friend_encounters(&mut self) -> ::protobuf::RepeatedField<Profile_FriendEncountersEntry> {
        ::std::mem::replace(&mut self.friend_encounters, ::protobuf::RepeatedField::new())
    }

    // int32 max_friend_encounter_size = 134;


    pub fn get_max_friend_encounter_size(&self) -> i32 {
        self.max_friend_encounter_size
    }
    pub fn clear_max_friend_encounter_size(&mut self) {
        self.max_friend_encounter_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_friend_encounter_size(&mut self, v: i32) {
        self.max_friend_encounter_size = v;
    }

    // repeated .OakSave.GameStatSaveGameData profile_stats_data = 135;


    pub fn get_profile_stats_data(&self) -> &[super::oak_shared::GameStatSaveGameData] {
        &self.profile_stats_data
    }
    pub fn clear_profile_stats_data(&mut self) {
        self.profile_stats_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_profile_stats_data(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::GameStatSaveGameData>) {
        self.profile_stats_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_profile_stats_data(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::GameStatSaveGameData> {
        &mut self.profile_stats_data
    }

    // Take field
    pub fn take_profile_stats_data(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::GameStatSaveGameData> {
        ::std::mem::replace(&mut self.profile_stats_data, ::protobuf::RepeatedField::new())
    }

    // repeated .OakSave.InventoryCategorySaveData bank_inventory_category_list = 136;


    pub fn get_bank_inventory_category_list(&self) -> &[super::oak_shared::InventoryCategorySaveData] {
        &self.bank_inventory_category_list
    }
    pub fn clear_bank_inventory_category_list(&mut self) {
        self.bank_inventory_category_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_inventory_category_list(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::InventoryCategorySaveData>) {
        self.bank_inventory_category_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bank_inventory_category_list(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::InventoryCategorySaveData> {
        &mut self.bank_inventory_category_list
    }

    // Take field
    pub fn take_bank_inventory_category_list(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::InventoryCategorySaveData> {
        ::std::mem::replace(&mut self.bank_inventory_category_list, ::protobuf::RepeatedField::new())
    }

    // repeated bytes bank_inventory_list = 137;


    pub fn get_bank_inventory_list(&self) -> &[::std::vec::Vec<u8>] {
        &self.bank_inventory_list
    }
    pub fn clear_bank_inventory_list(&mut self) {
        self.bank_inventory_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_inventory_list(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.bank_inventory_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bank_inventory_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.bank_inventory_list
    }

    // Take field
    pub fn take_bank_inventory_list(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.bank_inventory_list, ::protobuf::RepeatedField::new())
    }

    // repeated bytes lost_loot_inventory_list = 138;


    pub fn get_lost_loot_inventory_list(&self) -> &[::std::vec::Vec<u8>] {
        &self.lost_loot_inventory_list
    }
    pub fn clear_lost_loot_inventory_list(&mut self) {
        self.lost_loot_inventory_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_lost_loot_inventory_list(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.lost_loot_inventory_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lost_loot_inventory_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.lost_loot_inventory_list
    }

    // Take field
    pub fn take_lost_loot_inventory_list(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.lost_loot_inventory_list, ::protobuf::RepeatedField::new())
    }

    // repeated .OakSave.OakMailItem npc_mail_items = 139;


    pub fn get_npc_mail_items(&self) -> &[super::oak_shared::OakMailItem] {
        &self.npc_mail_items
    }
    pub fn clear_npc_mail_items(&mut self) {
        self.npc_mail_items.clear();
    }

    // Param is passed by value, moved
    pub fn set_npc_mail_items(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::OakMailItem>) {
        self.npc_mail_items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_npc_mail_items(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::OakMailItem> {
        &mut self.npc_mail_items
    }

    // Take field
    pub fn take_npc_mail_items(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::OakMailItem> {
        ::std::mem::replace(&mut self.npc_mail_items, ::protobuf::RepeatedField::new())
    }

    // repeated string mail_guids = 140;


    pub fn get_mail_guids(&self) -> &[::std::string::String] {
        &self.mail_guids
    }
    pub fn clear_mail_guids(&mut self) {
        self.mail_guids.clear();
    }

    // Param is passed by value, moved
    pub fn set_mail_guids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.mail_guids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mail_guids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.mail_guids
    }

    // Take field
    pub fn take_mail_guids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.mail_guids, ::protobuf::RepeatedField::new())
    }

    // repeated string unread_mail_guids = 141;


    pub fn get_unread_mail_guids(&self) -> &[::std::string::String] {
        &self.unread_mail_guids
    }
    pub fn clear_unread_mail_guids(&mut self) {
        self.unread_mail_guids.clear();
    }

    // Param is passed by value, moved
    pub fn set_unread_mail_guids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.unread_mail_guids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unread_mail_guids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.unread_mail_guids
    }

    // Take field
    pub fn take_unread_mail_guids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.unread_mail_guids, ::protobuf::RepeatedField::new())
    }

    // repeated .OakSave.GearSoldByFriendData gear_sold_by_friends = 142;


    pub fn get_gear_sold_by_friends(&self) -> &[GearSoldByFriendData] {
        &self.gear_sold_by_friends
    }
    pub fn clear_gear_sold_by_friends(&mut self) {
        self.gear_sold_by_friends.clear();
    }

    // Param is passed by value, moved
    pub fn set_gear_sold_by_friends(&mut self, v: ::protobuf::RepeatedField<GearSoldByFriendData>) {
        self.gear_sold_by_friends = v;
    }

    // Mutable pointer to the field.
    pub fn mut_gear_sold_by_friends(&mut self) -> &mut ::protobuf::RepeatedField<GearSoldByFriendData> {
        &mut self.gear_sold_by_friends
    }

    // Take field
    pub fn take_gear_sold_by_friends(&mut self) -> ::protobuf::RepeatedField<GearSoldByFriendData> {
        ::std::mem::replace(&mut self.gear_sold_by_friends, ::protobuf::RepeatedField::new())
    }

    // repeated .OakSave.OakSDUSaveGameData profile_sdu_list = 143;


    pub fn get_profile_sdu_list(&self) -> &[super::oak_shared::OakSDUSaveGameData] {
        &self.profile_sdu_list
    }
    pub fn clear_profile_sdu_list(&mut self) {
        self.profile_sdu_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_profile_sdu_list(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::OakSDUSaveGameData>) {
        self.profile_sdu_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_profile_sdu_list(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::OakSDUSaveGameData> {
        &mut self.profile_sdu_list
    }

    // Take field
    pub fn take_profile_sdu_list(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::OakSDUSaveGameData> {
        ::std::mem::replace(&mut self.profile_sdu_list, ::protobuf::RepeatedField::new())
    }

    // repeated .OakSave.OakCustomizationSaveGameData unlocked_customizations = 144;


    pub fn get_unlocked_customizations(&self) -> &[super::oak_shared::OakCustomizationSaveGameData] {
        &self.unlocked_customizations
    }
    pub fn clear_unlocked_customizations(&mut self) {
        self.unlocked_customizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_unlocked_customizations(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::OakCustomizationSaveGameData>) {
        self.unlocked_customizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unlocked_customizations(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::OakCustomizationSaveGameData> {
        &mut self.unlocked_customizations
    }

    // Take field
    pub fn take_unlocked_customizations(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::OakCustomizationSaveGameData> {
        ::std::mem::replace(&mut self.unlocked_customizations, ::protobuf::RepeatedField::new())
    }

    // repeated .OakSave.OakInventoryCustomizationPartInfo unlocked_inventory_customization_parts = 145;


    pub fn get_unlocked_inventory_customization_parts(&self) -> &[super::oak_shared::OakInventoryCustomizationPartInfo] {
        &self.unlocked_inventory_customization_parts
    }
    pub fn clear_unlocked_inventory_customization_parts(&mut self) {
        self.unlocked_inventory_customization_parts.clear();
    }

    // Param is passed by value, moved
    pub fn set_unlocked_inventory_customization_parts(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::OakInventoryCustomizationPartInfo>) {
        self.unlocked_inventory_customization_parts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unlocked_inventory_customization_parts(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::OakInventoryCustomizationPartInfo> {
        &mut self.unlocked_inventory_customization_parts
    }

    // Take field
    pub fn take_unlocked_inventory_customization_parts(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::OakInventoryCustomizationPartInfo> {
        ::std::mem::replace(&mut self.unlocked_inventory_customization_parts, ::protobuf::RepeatedField::new())
    }

    // .OakSave.GuardianRankProfileData guardian_rank = 146;


    pub fn get_guardian_rank(&self) -> &GuardianRankProfileData {
        self.guardian_rank.as_ref().unwrap_or_else(|| <GuardianRankProfileData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_guardian_rank(&mut self) {
        self.guardian_rank.clear();
    }

    pub fn has_guardian_rank(&self) -> bool {
        self.guardian_rank.is_some()
    }

    // Param is passed by value, moved
    pub fn set_guardian_rank(&mut self, v: GuardianRankProfileData) {
        self.guardian_rank = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_guardian_rank(&mut self) -> &mut GuardianRankProfileData {
        if self.guardian_rank.is_none() {
            self.guardian_rank.set_default();
        }
        self.guardian_rank.as_mut().unwrap()
    }

    // Take field
    pub fn take_guardian_rank(&mut self) -> GuardianRankProfileData {
        self.guardian_rank.take().unwrap_or_else(|| GuardianRankProfileData::new())
    }

    // repeated .OakSave.CrewQuartersDecorationItemSaveGameData unlocked_crew_quarters_decorations = 147;


    pub fn get_unlocked_crew_quarters_decorations(&self) -> &[super::oak_shared::CrewQuartersDecorationItemSaveGameData] {
        &self.unlocked_crew_quarters_decorations
    }
    pub fn clear_unlocked_crew_quarters_decorations(&mut self) {
        self.unlocked_crew_quarters_decorations.clear();
    }

    // Param is passed by value, moved
    pub fn set_unlocked_crew_quarters_decorations(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::CrewQuartersDecorationItemSaveGameData>) {
        self.unlocked_crew_quarters_decorations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unlocked_crew_quarters_decorations(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::CrewQuartersDecorationItemSaveGameData> {
        &mut self.unlocked_crew_quarters_decorations
    }

    // Take field
    pub fn take_unlocked_crew_quarters_decorations(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::CrewQuartersDecorationItemSaveGameData> {
        ::std::mem::replace(&mut self.unlocked_crew_quarters_decorations, ::protobuf::RepeatedField::new())
    }

    // repeated .OakSave.CrewQuartersRoomItemSaveGameData unlocked_crew_quarters_rooms = 148;


    pub fn get_unlocked_crew_quarters_rooms(&self) -> &[super::oak_shared::CrewQuartersRoomItemSaveGameData] {
        &self.unlocked_crew_quarters_rooms
    }
    pub fn clear_unlocked_crew_quarters_rooms(&mut self) {
        self.unlocked_crew_quarters_rooms.clear();
    }

    // Param is passed by value, moved
    pub fn set_unlocked_crew_quarters_rooms(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::CrewQuartersRoomItemSaveGameData>) {
        self.unlocked_crew_quarters_rooms = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unlocked_crew_quarters_rooms(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::CrewQuartersRoomItemSaveGameData> {
        &mut self.unlocked_crew_quarters_rooms
    }

    // Take field
    pub fn take_unlocked_crew_quarters_rooms(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::CrewQuartersRoomItemSaveGameData> {
        ::std::mem::replace(&mut self.unlocked_crew_quarters_rooms, ::protobuf::RepeatedField::new())
    }

    // bool enable_mouse_acceleration = 150;


    pub fn get_enable_mouse_acceleration(&self) -> bool {
        self.enable_mouse_acceleration
    }
    pub fn clear_enable_mouse_acceleration(&mut self) {
        self.enable_mouse_acceleration = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_mouse_acceleration(&mut self, v: bool) {
        self.enable_mouse_acceleration = v;
    }

    // bool enable_gamepad_input = 151;


    pub fn get_enable_gamepad_input(&self) -> bool {
        self.enable_gamepad_input
    }
    pub fn clear_enable_gamepad_input(&mut self) {
        self.enable_gamepad_input = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_gamepad_input(&mut self, v: bool) {
        self.enable_gamepad_input = v;
    }

    // bool use_classic_gamepad_input = 152;


    pub fn get_use_classic_gamepad_input(&self) -> bool {
        self.use_classic_gamepad_input
    }
    pub fn clear_use_classic_gamepad_input(&mut self) {
        self.use_classic_gamepad_input = false;
    }

    // Param is passed by value, moved
    pub fn set_use_classic_gamepad_input(&mut self, v: bool) {
        self.use_classic_gamepad_input = v;
    }

    // float master_volume = 153;


    pub fn get_master_volume(&self) -> f32 {
        self.master_volume
    }
    pub fn clear_master_volume(&mut self) {
        self.master_volume = 0.;
    }

    // Param is passed by value, moved
    pub fn set_master_volume(&mut self, v: f32) {
        self.master_volume = v;
    }

    // uint32 monitor_display_type = 154;


    pub fn get_monitor_display_type(&self) -> u32 {
        self.monitor_display_type
    }
    pub fn clear_monitor_display_type(&mut self) {
        self.monitor_display_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_monitor_display_type(&mut self, v: u32) {
        self.monitor_display_type = v;
    }

    // uint32 graphics_mode = 155;


    pub fn get_graphics_mode(&self) -> u32 {
        self.graphics_mode
    }
    pub fn clear_graphics_mode(&mut self) {
        self.graphics_mode = 0;
    }

    // Param is passed by value, moved
    pub fn set_graphics_mode(&mut self, v: u32) {
        self.graphics_mode = v;
    }

    // uint32 frame_rate_limit = 156;


    pub fn get_frame_rate_limit(&self) -> u32 {
        self.frame_rate_limit
    }
    pub fn clear_frame_rate_limit(&mut self) {
        self.frame_rate_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_frame_rate_limit(&mut self, v: u32) {
        self.frame_rate_limit = v;
    }

    // float base_vehicle_fov = 157;


    pub fn get_base_vehicle_fov(&self) -> f32 {
        self.base_vehicle_fov
    }
    pub fn clear_base_vehicle_fov(&mut self) {
        self.base_vehicle_fov = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_vehicle_fov(&mut self, v: f32) {
        self.base_vehicle_fov = v;
    }

    // uint32 graphics_quality = 158;


    pub fn get_graphics_quality(&self) -> u32 {
        self.graphics_quality
    }
    pub fn clear_graphics_quality(&mut self) {
        self.graphics_quality = 0;
    }

    // Param is passed by value, moved
    pub fn set_graphics_quality(&mut self, v: u32) {
        self.graphics_quality = v;
    }

    // uint32 anisotropic_filtering = 159;


    pub fn get_anisotropic_filtering(&self) -> u32 {
        self.anisotropic_filtering
    }
    pub fn clear_anisotropic_filtering(&mut self) {
        self.anisotropic_filtering = 0;
    }

    // Param is passed by value, moved
    pub fn set_anisotropic_filtering(&mut self, v: u32) {
        self.anisotropic_filtering = v;
    }

    // uint32 shadow_quality = 160;


    pub fn get_shadow_quality(&self) -> u32 {
        self.shadow_quality
    }
    pub fn clear_shadow_quality(&mut self) {
        self.shadow_quality = 0;
    }

    // Param is passed by value, moved
    pub fn set_shadow_quality(&mut self, v: u32) {
        self.shadow_quality = v;
    }

    // uint32 display_performance_stats = 161;


    pub fn get_display_performance_stats(&self) -> u32 {
        self.display_performance_stats
    }
    pub fn clear_display_performance_stats(&mut self) {
        self.display_performance_stats = 0;
    }

    // Param is passed by value, moved
    pub fn set_display_performance_stats(&mut self, v: u32) {
        self.display_performance_stats = v;
    }

    // uint32 texture_detail = 162;


    pub fn get_texture_detail(&self) -> u32 {
        self.texture_detail
    }
    pub fn clear_texture_detail(&mut self) {
        self.texture_detail = 0;
    }

    // Param is passed by value, moved
    pub fn set_texture_detail(&mut self, v: u32) {
        self.texture_detail = v;
    }

    // uint32 draw_distance = 163;


    pub fn get_draw_distance(&self) -> u32 {
        self.draw_distance
    }
    pub fn clear_draw_distance(&mut self) {
        self.draw_distance = 0;
    }

    // Param is passed by value, moved
    pub fn set_draw_distance(&mut self, v: u32) {
        self.draw_distance = v;
    }

    // uint32 clutter = 164;


    pub fn get_clutter(&self) -> u32 {
        self.clutter
    }
    pub fn clear_clutter(&mut self) {
        self.clutter = 0;
    }

    // Param is passed by value, moved
    pub fn set_clutter(&mut self, v: u32) {
        self.clutter = v;
    }

    // uint32 tessellation = 165;


    pub fn get_tessellation(&self) -> u32 {
        self.tessellation
    }
    pub fn clear_tessellation(&mut self) {
        self.tessellation = 0;
    }

    // Param is passed by value, moved
    pub fn set_tessellation(&mut self, v: u32) {
        self.tessellation = v;
    }

    // uint32 foliage = 166;


    pub fn get_foliage(&self) -> u32 {
        self.foliage
    }
    pub fn clear_foliage(&mut self) {
        self.foliage = 0;
    }

    // Param is passed by value, moved
    pub fn set_foliage(&mut self, v: u32) {
        self.foliage = v;
    }

    // bool foliage_shadows = 167;


    pub fn get_foliage_shadows(&self) -> bool {
        self.foliage_shadows
    }
    pub fn clear_foliage_shadows(&mut self) {
        self.foliage_shadows = false;
    }

    // Param is passed by value, moved
    pub fn set_foliage_shadows(&mut self, v: bool) {
        self.foliage_shadows = v;
    }

    // bool planar_reflections = 168;


    pub fn get_planar_reflections(&self) -> bool {
        self.planar_reflections
    }
    pub fn clear_planar_reflections(&mut self) {
        self.planar_reflections = false;
    }

    // Param is passed by value, moved
    pub fn set_planar_reflections(&mut self, v: bool) {
        self.planar_reflections = v;
    }

    // uint32 volumetric_fog = 169;


    pub fn get_volumetric_fog(&self) -> u32 {
        self.volumetric_fog
    }
    pub fn clear_volumetric_fog(&mut self) {
        self.volumetric_fog = 0;
    }

    // Param is passed by value, moved
    pub fn set_volumetric_fog(&mut self, v: u32) {
        self.volumetric_fog = v;
    }

    // uint32 screen_space_reflections = 170;


    pub fn get_screen_space_reflections(&self) -> u32 {
        self.screen_space_reflections
    }
    pub fn clear_screen_space_reflections(&mut self) {
        self.screen_space_reflections = 0;
    }

    // Param is passed by value, moved
    pub fn set_screen_space_reflections(&mut self, v: u32) {
        self.screen_space_reflections = v;
    }

    // uint32 character_texture_detail = 171;


    pub fn get_character_texture_detail(&self) -> u32 {
        self.character_texture_detail
    }
    pub fn clear_character_texture_detail(&mut self) {
        self.character_texture_detail = 0;
    }

    // Param is passed by value, moved
    pub fn set_character_texture_detail(&mut self, v: u32) {
        self.character_texture_detail = v;
    }

    // uint32 character_detail = 172;


    pub fn get_character_detail(&self) -> u32 {
        self.character_detail
    }
    pub fn clear_character_detail(&mut self) {
        self.character_detail = 0;
    }

    // Param is passed by value, moved
    pub fn set_character_detail(&mut self, v: u32) {
        self.character_detail = v;
    }

    // uint32 ambient_occlusion_quality = 173;


    pub fn get_ambient_occlusion_quality(&self) -> u32 {
        self.ambient_occlusion_quality
    }
    pub fn clear_ambient_occlusion_quality(&mut self) {
        self.ambient_occlusion_quality = 0;
    }

    // Param is passed by value, moved
    pub fn set_ambient_occlusion_quality(&mut self, v: u32) {
        self.ambient_occlusion_quality = v;
    }

    // bool object_motion_blur = 174;


    pub fn get_object_motion_blur(&self) -> bool {
        self.object_motion_blur
    }
    pub fn clear_object_motion_blur(&mut self) {
        self.object_motion_blur = false;
    }

    // Param is passed by value, moved
    pub fn set_object_motion_blur(&mut self, v: bool) {
        self.object_motion_blur = v;
    }

    // bool lens_flare = 175;


    pub fn get_lens_flare(&self) -> bool {
        self.lens_flare
    }
    pub fn clear_lens_flare(&mut self) {
        self.lens_flare = false;
    }

    // Param is passed by value, moved
    pub fn set_lens_flare(&mut self, v: bool) {
        self.lens_flare = v;
    }

    // bool combat_number_long_format = 176;


    pub fn get_combat_number_long_format(&self) -> bool {
        self.combat_number_long_format
    }
    pub fn clear_combat_number_long_format(&mut self) {
        self.combat_number_long_format = false;
    }

    // Param is passed by value, moved
    pub fn set_combat_number_long_format(&mut self, v: bool) {
        self.combat_number_long_format = v;
    }

    // bool show_minimap_legendaries = 177;


    pub fn get_show_minimap_legendaries(&self) -> bool {
        self.show_minimap_legendaries
    }
    pub fn clear_show_minimap_legendaries(&mut self) {
        self.show_minimap_legendaries = false;
    }

    // Param is passed by value, moved
    pub fn set_show_minimap_legendaries(&mut self, v: bool) {
        self.show_minimap_legendaries = v;
    }

    // bool use_player_callouts = 178;


    pub fn get_use_player_callouts(&self) -> bool {
        self.use_player_callouts
    }
    pub fn clear_use_player_callouts(&mut self) {
        self.use_player_callouts = false;
    }

    // Param is passed by value, moved
    pub fn set_use_player_callouts(&mut self, v: bool) {
        self.use_player_callouts = v;
    }

    // uint32 friend_event_notification_lifetime = 179;


    pub fn get_friend_event_notification_lifetime(&self) -> u32 {
        self.friend_event_notification_lifetime
    }
    pub fn clear_friend_event_notification_lifetime(&mut self) {
        self.friend_event_notification_lifetime = 0;
    }

    // Param is passed by value, moved
    pub fn set_friend_event_notification_lifetime(&mut self, v: u32) {
        self.friend_event_notification_lifetime = v;
    }

    // uint32 friend_event_notification_frequency = 180;


    pub fn get_friend_event_notification_frequency(&self) -> u32 {
        self.friend_event_notification_frequency
    }
    pub fn clear_friend_event_notification_frequency(&mut self) {
        self.friend_event_notification_frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_friend_event_notification_frequency(&mut self, v: u32) {
        self.friend_event_notification_frequency = v;
    }

    // uint32 trade_request_reception_type = 181;


    pub fn get_trade_request_reception_type(&self) -> u32 {
        self.trade_request_reception_type
    }
    pub fn clear_trade_request_reception_type(&mut self) {
        self.trade_request_reception_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_trade_request_reception_type(&mut self, v: u32) {
        self.trade_request_reception_type = v;
    }

    // float head_bob_scale = 182;


    pub fn get_head_bob_scale(&self) -> f32 {
        self.head_bob_scale
    }
    pub fn clear_head_bob_scale(&mut self) {
        self.head_bob_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_head_bob_scale(&mut self, v: f32) {
        self.head_bob_scale = v;
    }

    // bool has_seen_first_boot = 184;


    pub fn get_has_seen_first_boot(&self) -> bool {
        self.has_seen_first_boot
    }
    pub fn clear_has_seen_first_boot(&mut self) {
        self.has_seen_first_boot = false;
    }

    // Param is passed by value, moved
    pub fn set_has_seen_first_boot(&mut self, v: bool) {
        self.has_seen_first_boot = v;
    }

    // float subs_cc_size = 189;


    pub fn get_subs_cc_size(&self) -> f32 {
        self.subs_cc_size
    }
    pub fn clear_subs_cc_size(&mut self) {
        self.subs_cc_size = 0.;
    }

    // Param is passed by value, moved
    pub fn set_subs_cc_size(&mut self, v: f32) {
        self.subs_cc_size = v;
    }

    // float cc_subs_background_opacity = 190;


    pub fn get_cc_subs_background_opacity(&self) -> f32 {
        self.cc_subs_background_opacity
    }
    pub fn clear_cc_subs_background_opacity(&mut self) {
        self.cc_subs_background_opacity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cc_subs_background_opacity(&mut self, v: f32) {
        self.cc_subs_background_opacity = v;
    }

    // uint32 walking_button_scheme = 191;


    pub fn get_walking_button_scheme(&self) -> u32 {
        self.walking_button_scheme
    }
    pub fn clear_walking_button_scheme(&mut self) {
        self.walking_button_scheme = 0;
    }

    // Param is passed by value, moved
    pub fn set_walking_button_scheme(&mut self, v: u32) {
        self.walking_button_scheme = v;
    }

    // uint32 driving_button_scheme = 192;


    pub fn get_driving_button_scheme(&self) -> u32 {
        self.driving_button_scheme
    }
    pub fn clear_driving_button_scheme(&mut self) {
        self.driving_button_scheme = 0;
    }

    // Param is passed by value, moved
    pub fn set_driving_button_scheme(&mut self, v: u32) {
        self.driving_button_scheme = v;
    }

    // uint32 glyph_mode = 193;


    pub fn get_glyph_mode(&self) -> u32 {
        self.glyph_mode
    }
    pub fn clear_glyph_mode(&mut self) {
        self.glyph_mode = 0;
    }

    // Param is passed by value, moved
    pub fn set_glyph_mode(&mut self, v: u32) {
        self.glyph_mode = v;
    }

    // bool use_MPH = 194;


    pub fn get_use_MPH(&self) -> bool {
        self.use_MPH
    }
    pub fn clear_use_MPH(&mut self) {
        self.use_MPH = false;
    }

    // Param is passed by value, moved
    pub fn set_use_MPH(&mut self, v: bool) {
        self.use_MPH = v;
    }

    // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 195;


    pub fn get_registered_downloadable_entitlements(&self) -> &[super::oak_shared::RegisteredDownloadableEntitlements] {
        &self.registered_downloadable_entitlements
    }
    pub fn clear_registered_downloadable_entitlements(&mut self) {
        self.registered_downloadable_entitlements.clear();
    }

    // Param is passed by value, moved
    pub fn set_registered_downloadable_entitlements(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::RegisteredDownloadableEntitlements>) {
        self.registered_downloadable_entitlements = v;
    }

    // Mutable pointer to the field.
    pub fn mut_registered_downloadable_entitlements(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::RegisteredDownloadableEntitlements> {
        &mut self.registered_downloadable_entitlements
    }

    // Take field
    pub fn take_registered_downloadable_entitlements(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::RegisteredDownloadableEntitlements> {
        ::std::mem::replace(&mut self.registered_downloadable_entitlements, ::protobuf::RepeatedField::new())
    }

    // repeated string seen_news_items = 196;


    pub fn get_seen_news_items(&self) -> &[::std::string::String] {
        &self.seen_news_items
    }
    pub fn clear_seen_news_items(&mut self) {
        self.seen_news_items.clear();
    }

    // Param is passed by value, moved
    pub fn set_seen_news_items(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.seen_news_items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_seen_news_items(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.seen_news_items
    }

    // Take field
    pub fn take_seen_news_items(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.seen_news_items, ::protobuf::RepeatedField::new())
    }

    // bool auto_centering_enabled = 197;


    pub fn get_auto_centering_enabled(&self) -> bool {
        self.auto_centering_enabled
    }
    pub fn clear_auto_centering_enabled(&mut self) {
        self.auto_centering_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_auto_centering_enabled(&mut self, v: bool) {
        self.auto_centering_enabled = v;
    }

    // bool increased_chance_for_subscribers = 198;


    pub fn get_increased_chance_for_subscribers(&self) -> bool {
        self.increased_chance_for_subscribers
    }
    pub fn clear_increased_chance_for_subscribers(&mut self) {
        self.increased_chance_for_subscribers = false;
    }

    // Param is passed by value, moved
    pub fn set_increased_chance_for_subscribers(&mut self, v: bool) {
        self.increased_chance_for_subscribers = v;
    }

    // bool rare_chest_event_enabled = 199;


    pub fn get_rare_chest_event_enabled(&self) -> bool {
        self.rare_chest_event_enabled
    }
    pub fn clear_rare_chest_event_enabled(&mut self) {
        self.rare_chest_event_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_rare_chest_event_enabled(&mut self, v: bool) {
        self.rare_chest_event_enabled = v;
    }

    // bool badass_event_enabled = 200;


    pub fn get_badass_event_enabled(&self) -> bool {
        self.badass_event_enabled
    }
    pub fn clear_badass_event_enabled(&mut self) {
        self.badass_event_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_badass_event_enabled(&mut self, v: bool) {
        self.badass_event_enabled = v;
    }

    // bool pinata_event_enabled = 201;


    pub fn get_pinata_event_enabled(&self) -> bool {
        self.pinata_event_enabled
    }
    pub fn clear_pinata_event_enabled(&mut self) {
        self.pinata_event_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_pinata_event_enabled(&mut self, v: bool) {
        self.pinata_event_enabled = v;
    }

    // int32 min_time_between_badass_events = 202;


    pub fn get_min_time_between_badass_events(&self) -> i32 {
        self.min_time_between_badass_events
    }
    pub fn clear_min_time_between_badass_events(&mut self) {
        self.min_time_between_badass_events = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_time_between_badass_events(&mut self, v: i32) {
        self.min_time_between_badass_events = v;
    }

    // float hud_scale_multiplier = 203;


    pub fn get_hud_scale_multiplier(&self) -> f32 {
        self.hud_scale_multiplier
    }
    pub fn clear_hud_scale_multiplier(&mut self) {
        self.hud_scale_multiplier = 0.;
    }

    // Param is passed by value, moved
    pub fn set_hud_scale_multiplier(&mut self, v: f32) {
        self.hud_scale_multiplier = v;
    }

    // bool disable_spatial_audio__or__has_reset_console_fov = 204;


    pub fn get_disable_spatial_audio__or__has_reset_console_fov(&self) -> bool {
        self.disable_spatial_audio__or__has_reset_console_fov
    }
    pub fn clear_disable_spatial_audio__or__has_reset_console_fov(&mut self) {
        self.disable_spatial_audio__or__has_reset_console_fov = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_spatial_audio__or__has_reset_console_fov(&mut self, v: bool) {
        self.disable_spatial_audio__or__has_reset_console_fov = v;
    }

    // int32 total_playtime_seconds = 205;


    pub fn get_total_playtime_seconds(&self) -> i32 {
        self.total_playtime_seconds
    }
    pub fn clear_total_playtime_seconds(&mut self) {
        self.total_playtime_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_playtime_seconds(&mut self, v: i32) {
        self.total_playtime_seconds = v;
    }

    // bool moxxis_drink_event_enabled = 206;


    pub fn get_moxxis_drink_event_enabled(&self) -> bool {
        self.moxxis_drink_event_enabled
    }
    pub fn clear_moxxis_drink_event_enabled(&mut self) {
        self.moxxis_drink_event_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_moxxis_drink_event_enabled(&mut self, v: bool) {
        self.moxxis_drink_event_enabled = v;
    }

    // int32 moxxis_drink_event_bits_product_id = 207;


    pub fn get_moxxis_drink_event_bits_product_id(&self) -> i32 {
        self.moxxis_drink_event_bits_product_id
    }
    pub fn clear_moxxis_drink_event_bits_product_id(&mut self) {
        self.moxxis_drink_event_bits_product_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_moxxis_drink_event_bits_product_id(&mut self, v: i32) {
        self.moxxis_drink_event_bits_product_id = v;
    }

    // repeated .OakSave.ChallengeSaveGameData challenge_data = 208;


    pub fn get_challenge_data(&self) -> &[super::oak_shared::ChallengeSaveGameData] {
        &self.challenge_data
    }
    pub fn clear_challenge_data(&mut self) {
        self.challenge_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_challenge_data(&mut self, v: ::protobuf::RepeatedField<super::oak_shared::ChallengeSaveGameData>) {
        self.challenge_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_challenge_data(&mut self) -> &mut ::protobuf::RepeatedField<super::oak_shared::ChallengeSaveGameData> {
        &mut self.challenge_data
    }

    // Take field
    pub fn take_challenge_data(&mut self) -> ::protobuf::RepeatedField<super::oak_shared::ChallengeSaveGameData> {
        ::std::mem::replace(&mut self.challenge_data, ::protobuf::RepeatedField::new())
    }

    // repeated int32 CitizenScienceLevelProgression = 209;


    pub fn get_CitizenScienceLevelProgression(&self) -> &[i32] {
        &self.CitizenScienceLevelProgression
    }
    pub fn clear_CitizenScienceLevelProgression(&mut self) {
        self.CitizenScienceLevelProgression.clear();
    }

    // Param is passed by value, moved
    pub fn set_CitizenScienceLevelProgression(&mut self, v: ::std::vec::Vec<i32>) {
        self.CitizenScienceLevelProgression = v;
    }

    // Mutable pointer to the field.
    pub fn mut_CitizenScienceLevelProgression(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.CitizenScienceLevelProgression
    }

    // Take field
    pub fn take_CitizenScienceLevelProgression(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.CitizenScienceLevelProgression, ::std::vec::Vec::new())
    }

    // bool default_dead_zone_inner_updated = 210;


    pub fn get_default_dead_zone_inner_updated(&self) -> bool {
        self.default_dead_zone_inner_updated
    }
    pub fn clear_default_dead_zone_inner_updated(&mut self) {
        self.default_dead_zone_inner_updated = false;
    }

    // Param is passed by value, moved
    pub fn set_default_dead_zone_inner_updated(&mut self, v: bool) {
        self.default_dead_zone_inner_updated = v;
    }

    // bool disable_event_content = 211;


    pub fn get_disable_event_content(&self) -> bool {
        self.disable_event_content
    }
    pub fn clear_disable_event_content(&mut self) {
        self.disable_event_content = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_event_content(&mut self, v: bool) {
        self.disable_event_content = v;
    }

    // uint32 desired_friend_sync_state = 212;


    pub fn get_desired_friend_sync_state(&self) -> u32 {
        self.desired_friend_sync_state
    }
    pub fn clear_desired_friend_sync_state(&mut self) {
        self.desired_friend_sync_state = 0;
    }

    // Param is passed by value, moved
    pub fn set_desired_friend_sync_state(&mut self, v: u32) {
        self.desired_friend_sync_state = v;
    }

    // bool needs_shift_first_boot = 213;


    pub fn get_needs_shift_first_boot(&self) -> bool {
        self.needs_shift_first_boot
    }
    pub fn clear_needs_shift_first_boot(&mut self) {
        self.needs_shift_first_boot = false;
    }

    // Param is passed by value, moved
    pub fn set_needs_shift_first_boot(&mut self, v: bool) {
        self.needs_shift_first_boot = v;
    }

    // repeated .OakSave.RecentlyMetPlayer recently_met_players = 214;


    pub fn get_recently_met_players(&self) -> &[RecentlyMetPlayer] {
        &self.recently_met_players
    }
    pub fn clear_recently_met_players(&mut self) {
        self.recently_met_players.clear();
    }

    // Param is passed by value, moved
    pub fn set_recently_met_players(&mut self, v: ::protobuf::RepeatedField<RecentlyMetPlayer>) {
        self.recently_met_players = v;
    }

    // Mutable pointer to the field.
    pub fn mut_recently_met_players(&mut self) -> &mut ::protobuf::RepeatedField<RecentlyMetPlayer> {
        &mut self.recently_met_players
    }

    // Take field
    pub fn take_recently_met_players(&mut self) -> ::protobuf::RepeatedField<RecentlyMetPlayer> {
        ::std::mem::replace(&mut self.recently_met_players, ::protobuf::RepeatedField::new())
    }

    // int32 CitizenScienceActiveBoosterIndex = 215;


    pub fn get_CitizenScienceActiveBoosterIndex(&self) -> i32 {
        self.CitizenScienceActiveBoosterIndex
    }
    pub fn clear_CitizenScienceActiveBoosterIndex(&mut self) {
        self.CitizenScienceActiveBoosterIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_CitizenScienceActiveBoosterIndex(&mut self, v: i32) {
        self.CitizenScienceActiveBoosterIndex = v;
    }

    // float CitizenScienceActiveBoosterRemainingTime = 216;


    pub fn get_CitizenScienceActiveBoosterRemainingTime(&self) -> f32 {
        self.CitizenScienceActiveBoosterRemainingTime
    }
    pub fn clear_CitizenScienceActiveBoosterRemainingTime(&mut self) {
        self.CitizenScienceActiveBoosterRemainingTime = 0.;
    }

    // Param is passed by value, moved
    pub fn set_CitizenScienceActiveBoosterRemainingTime(&mut self, v: f32) {
        self.CitizenScienceActiveBoosterRemainingTime = v;
    }

    // float CitizenScienceActiveBoosterTotalTime = 217;


    pub fn get_CitizenScienceActiveBoosterTotalTime(&self) -> f32 {
        self.CitizenScienceActiveBoosterTotalTime
    }
    pub fn clear_CitizenScienceActiveBoosterTotalTime(&mut self) {
        self.CitizenScienceActiveBoosterTotalTime = 0.;
    }

    // Param is passed by value, moved
    pub fn set_CitizenScienceActiveBoosterTotalTime(&mut self, v: f32) {
        self.CitizenScienceActiveBoosterTotalTime = v;
    }

    // int32 StreamerPrimaryActiveBoosterIndex = 218;


    pub fn get_StreamerPrimaryActiveBoosterIndex(&self) -> i32 {
        self.StreamerPrimaryActiveBoosterIndex
    }
    pub fn clear_StreamerPrimaryActiveBoosterIndex(&mut self) {
        self.StreamerPrimaryActiveBoosterIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_StreamerPrimaryActiveBoosterIndex(&mut self, v: i32) {
        self.StreamerPrimaryActiveBoosterIndex = v;
    }

    // float StreamerPrimaryActiveBoosterRemainingTime = 219;


    pub fn get_StreamerPrimaryActiveBoosterRemainingTime(&self) -> f32 {
        self.StreamerPrimaryActiveBoosterRemainingTime
    }
    pub fn clear_StreamerPrimaryActiveBoosterRemainingTime(&mut self) {
        self.StreamerPrimaryActiveBoosterRemainingTime = 0.;
    }

    // Param is passed by value, moved
    pub fn set_StreamerPrimaryActiveBoosterRemainingTime(&mut self, v: f32) {
        self.StreamerPrimaryActiveBoosterRemainingTime = v;
    }

    // float StreamerPrimaryActiveBoosterTotalTime = 220;


    pub fn get_StreamerPrimaryActiveBoosterTotalTime(&self) -> f32 {
        self.StreamerPrimaryActiveBoosterTotalTime
    }
    pub fn clear_StreamerPrimaryActiveBoosterTotalTime(&mut self) {
        self.StreamerPrimaryActiveBoosterTotalTime = 0.;
    }

    // Param is passed by value, moved
    pub fn set_StreamerPrimaryActiveBoosterTotalTime(&mut self, v: f32) {
        self.StreamerPrimaryActiveBoosterTotalTime = v;
    }

    // int32 StreamerSecondaryActiveBoosterIndex = 221;


    pub fn get_StreamerSecondaryActiveBoosterIndex(&self) -> i32 {
        self.StreamerSecondaryActiveBoosterIndex
    }
    pub fn clear_StreamerSecondaryActiveBoosterIndex(&mut self) {
        self.StreamerSecondaryActiveBoosterIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_StreamerSecondaryActiveBoosterIndex(&mut self, v: i32) {
        self.StreamerSecondaryActiveBoosterIndex = v;
    }

    // float StreamerSecondaryActiveBoosterRemainingTime = 222;


    pub fn get_StreamerSecondaryActiveBoosterRemainingTime(&self) -> f32 {
        self.StreamerSecondaryActiveBoosterRemainingTime
    }
    pub fn clear_StreamerSecondaryActiveBoosterRemainingTime(&mut self) {
        self.StreamerSecondaryActiveBoosterRemainingTime = 0.;
    }

    // Param is passed by value, moved
    pub fn set_StreamerSecondaryActiveBoosterRemainingTime(&mut self, v: f32) {
        self.StreamerSecondaryActiveBoosterRemainingTime = v;
    }

    // float StreamerSecondaryActiveBoosterTotalTime = 223;


    pub fn get_StreamerSecondaryActiveBoosterTotalTime(&self) -> f32 {
        self.StreamerSecondaryActiveBoosterTotalTime
    }
    pub fn clear_StreamerSecondaryActiveBoosterTotalTime(&mut self) {
        self.StreamerSecondaryActiveBoosterTotalTime = 0.;
    }

    // Param is passed by value, moved
    pub fn set_StreamerSecondaryActiveBoosterTotalTime(&mut self, v: f32) {
        self.StreamerSecondaryActiveBoosterTotalTime = v;
    }

    // int32 StreamerBoosterTier = 224;


    pub fn get_StreamerBoosterTier(&self) -> i32 {
        self.StreamerBoosterTier
    }
    pub fn clear_StreamerBoosterTier(&mut self) {
        self.StreamerBoosterTier = 0;
    }

    // Param is passed by value, moved
    pub fn set_StreamerBoosterTier(&mut self, v: i32) {
        self.StreamerBoosterTier = v;
    }

    // int32 CitizenScienceCSBucksAmount = 226;


    pub fn get_CitizenScienceCSBucksAmount(&self) -> i32 {
        self.CitizenScienceCSBucksAmount
    }
    pub fn clear_CitizenScienceCSBucksAmount(&mut self) {
        self.CitizenScienceCSBucksAmount = 0;
    }

    // Param is passed by value, moved
    pub fn set_CitizenScienceCSBucksAmount(&mut self, v: i32) {
        self.CitizenScienceCSBucksAmount = v;
    }

    // bool bCitizenScienceHasSeenIntroVideo = 227;


    pub fn get_bCitizenScienceHasSeenIntroVideo(&self) -> bool {
        self.bCitizenScienceHasSeenIntroVideo
    }
    pub fn clear_bCitizenScienceHasSeenIntroVideo(&mut self) {
        self.bCitizenScienceHasSeenIntroVideo = false;
    }

    // Param is passed by value, moved
    pub fn set_bCitizenScienceHasSeenIntroVideo(&mut self, v: bool) {
        self.bCitizenScienceHasSeenIntroVideo = v;
    }

    // bool bCitizenScienceTutorialDone = 228;


    pub fn get_bCitizenScienceTutorialDone(&self) -> bool {
        self.bCitizenScienceTutorialDone
    }
    pub fn clear_bCitizenScienceTutorialDone(&mut self) {
        self.bCitizenScienceTutorialDone = false;
    }

    // Param is passed by value, moved
    pub fn set_bCitizenScienceTutorialDone(&mut self, v: bool) {
        self.bCitizenScienceTutorialDone = v;
    }

    // bool enable_trigger_feedback = 229;


    pub fn get_enable_trigger_feedback(&self) -> bool {
        self.enable_trigger_feedback
    }
    pub fn clear_enable_trigger_feedback(&mut self) {
        self.enable_trigger_feedback = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_trigger_feedback(&mut self, v: bool) {
        self.enable_trigger_feedback = v;
    }

    // bool fixed_initial_zonemap_rotation = 230;


    pub fn get_fixed_initial_zonemap_rotation(&self) -> bool {
        self.fixed_initial_zonemap_rotation
    }
    pub fn clear_fixed_initial_zonemap_rotation(&mut self) {
        self.fixed_initial_zonemap_rotation = false;
    }

    // Param is passed by value, moved
    pub fn set_fixed_initial_zonemap_rotation(&mut self, v: bool) {
        self.fixed_initial_zonemap_rotation = v;
    }

    // .OakSave.VaultCardSaveGameData vault_card = 231;


    pub fn get_vault_card(&self) -> &super::oak_shared::VaultCardSaveGameData {
        self.vault_card.as_ref().unwrap_or_else(|| <super::oak_shared::VaultCardSaveGameData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vault_card(&mut self) {
        self.vault_card.clear();
    }

    pub fn has_vault_card(&self) -> bool {
        self.vault_card.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vault_card(&mut self, v: super::oak_shared::VaultCardSaveGameData) {
        self.vault_card = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vault_card(&mut self) -> &mut super::oak_shared::VaultCardSaveGameData {
        if self.vault_card.is_none() {
            self.vault_card.set_default();
        }
        self.vault_card.as_mut().unwrap()
    }

    // Take field
    pub fn take_vault_card(&mut self) -> super::oak_shared::VaultCardSaveGameData {
        self.vault_card.take().unwrap_or_else(|| super::oak_shared::VaultCardSaveGameData::new())
    }

    // uint32 player_selected_league = 232;


    pub fn get_player_selected_league(&self) -> u32 {
        self.player_selected_league
    }
    pub fn clear_player_selected_league(&mut self) {
        self.player_selected_league = 0;
    }

    // Param is passed by value, moved
    pub fn set_player_selected_league(&mut self, v: u32) {
        self.player_selected_league = v;
    }

    // bool needs_shift_first_boot_primary = 233;


    pub fn get_needs_shift_first_boot_primary(&self) -> bool {
        self.needs_shift_first_boot_primary
    }
    pub fn clear_needs_shift_first_boot_primary(&mut self) {
        self.needs_shift_first_boot_primary = false;
    }

    // Param is passed by value, moved
    pub fn set_needs_shift_first_boot_primary(&mut self, v: bool) {
        self.needs_shift_first_boot_primary = v;
    }
}

impl ::protobuf::Message for Profile {
    fn is_initialized(&self) -> bool {
        for v in &self.player_input_bindings {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.inventory_screen_last_filter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tutorial_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.friend_encounters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.profile_stats_data {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bank_inventory_category_list {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.npc_mail_items {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gear_sold_by_friends {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.profile_sdu_list {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unlocked_customizations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unlocked_inventory_customization_parts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.guardian_rank {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unlocked_crew_quarters_decorations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unlocked_crew_quarters_rooms {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.registered_downloadable_entitlements {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.challenge_data {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recently_met_players {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vault_card {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_aim_assist = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.gamepad_invert_look = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.gamepad_invert_turn = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.gamepad_invert_move = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.gamepad_invert_strafe = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_vibration = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.invert_mouse_pitch = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_mouse_smoothing = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.mouse_scale = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_damage_numbers = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_damage_number_icons = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_training_messages = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_text_chat = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.center_crosshair = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.toggle_sprint = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.toggle_crouch = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.censor_content = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.music_volume = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.sound_effects_volume = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.vo_volume = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.voice_volume = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_optional_vo = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.push_to_talk = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_controller_audio = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speaker_angle_front = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speaker_angle_side = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speaker_angle_back = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.speaker_setup = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.mute_audio_on_focus_loss = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hide_strict_nat_help_dialog = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.player_input_bindings)?;
                },
                36 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.news_hashes)?;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_used_savegame_id = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gamepad_hip_sensitivity_level = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gamepad_zoomed_sensitivity_level = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gamepad_vehicle_sensitivity_level = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_movement_dead_zone_x = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_movement_dead_zone_y = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_look_dead_zone_inner_x = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_look_dead_zone_outer_x = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_look_dead_zone_inner_y = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_look_dead_zone_outer_y = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_movement_dead_zone_x = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_movement_dead_zone_y = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_look_dead_zone_inner_x = tmp;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_look_dead_zone_outer_x = tmp;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_look_dead_zone_inner_y = tmp;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_look_dead_zone_outer_y = tmp;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_left_dead_zone_inner = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_left_dead_zone_outer = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_right_dead_zone_inner = tmp;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_right_dead_zone_outer = tmp;
                },
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_look_axial_dead_zone_scale = tmp;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_move_axial_dead_zone_scale = tmp;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.gamepad_use_advanced_hip_aim_settings = tmp;
                },
                60 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.gamepad_use_advanced_zoomed_aim_settings = tmp;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.gamepad_use_advanced_vehicle_aim_settings = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_hip_yaw_rate = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_hip_pitch_rate = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_hip_extra_yaw = tmp;
                },
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_hip_extra_pitch = tmp;
                },
                66 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_hip_ramp_up_time = tmp;
                },
                67 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_hip_ramp_up_delay = tmp;
                },
                68 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_zoomed_yaw_rate = tmp;
                },
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_zoomed_pitch_rate = tmp;
                },
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_zoomed_extra_yaw = tmp;
                },
                71 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_zoomed_extra_pitch = tmp;
                },
                72 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_zoomed_ramp_up_time = tmp;
                },
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_zoomed_ramp_up_delay = tmp;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_yaw_rate = tmp;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_pitch_rate = tmp;
                },
                76 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_extra_yaw = tmp;
                },
                77 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_extra_pitch = tmp;
                },
                78 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_ramp_up_time = tmp;
                },
                79 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gamepad_vehicle_ramp_up_delay = tmp;
                },
                80 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ironsight_aim_assist = tmp;
                },
                81 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.walking_joystick_scheme = tmp;
                },
                82 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.driving_joystick_scheme = tmp;
                },
                83 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.mouse_ads_scale = tmp;
                },
                84 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.mouse_vehicle_scale = tmp;
                },
                85 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.mouse_ironsight_aim_assist = tmp;
                },
                86 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.vehicle_input_mode = tmp;
                },
                87 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.weapon_aim_toggle = tmp;
                },
                88 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.mantle_requires_button = tmp;
                },
                89 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fixed_minimap_rotation = tmp;
                },
                90 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.map_invert_pitch = tmp;
                },
                91 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.map_invert_yaw = tmp;
                },
                92 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.difficulty = tmp;
                },
                93 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.swap_dual_wield_controls = tmp;
                },
                94 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.base_fov = tmp;
                },
                95 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.crosshair_neutral_color_frame = tmp;
                },
                96 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.crosshair_enemy_color_frame = tmp;
                },
                97 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.crosshair_ally_color_frame = tmp;
                },
                98 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_subtitles = tmp;
                },
                99 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_closed_captions = tmp;
                },
                100 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.last_status_menu_page)?;
                },
                101 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inventory_screen_last_filter)?;
                },
                102 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tutorial_info)?;
                },
                103 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.default_network_type = tmp;
                },
                104 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.default_invite_type = tmp;
                },
                105 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.matchmaking_region)?;
                },
                106 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.streaming_service = tmp;
                },
                107 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.max_cached_friend_events = tmp;
                },
                108 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.max_cached_friend_statuses = tmp;
                },
                109 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.friend_events)?;
                },
                110 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.friend_statuses)?;
                },
                111 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_whisper_fetch_events_time = tmp;
                },
                112 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_whisper_fetch_statuses_time = tmp;
                },
                113 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.desired_crossplay_state = tmp;
                },
                133 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.friend_encounters)?;
                },
                134 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.max_friend_encounter_size = tmp;
                },
                135 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.profile_stats_data)?;
                },
                136 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.bank_inventory_category_list)?;
                },
                137 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.bank_inventory_list)?;
                },
                138 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.lost_loot_inventory_list)?;
                },
                139 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.npc_mail_items)?;
                },
                140 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.mail_guids)?;
                },
                141 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.unread_mail_guids)?;
                },
                142 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.gear_sold_by_friends)?;
                },
                143 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.profile_sdu_list)?;
                },
                144 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unlocked_customizations)?;
                },
                145 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unlocked_inventory_customization_parts)?;
                },
                146 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.guardian_rank)?;
                },
                147 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unlocked_crew_quarters_decorations)?;
                },
                148 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unlocked_crew_quarters_rooms)?;
                },
                150 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_mouse_acceleration = tmp;
                },
                151 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_gamepad_input = tmp;
                },
                152 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_classic_gamepad_input = tmp;
                },
                153 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.master_volume = tmp;
                },
                154 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.monitor_display_type = tmp;
                },
                155 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.graphics_mode = tmp;
                },
                156 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frame_rate_limit = tmp;
                },
                157 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.base_vehicle_fov = tmp;
                },
                158 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.graphics_quality = tmp;
                },
                159 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.anisotropic_filtering = tmp;
                },
                160 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shadow_quality = tmp;
                },
                161 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.display_performance_stats = tmp;
                },
                162 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.texture_detail = tmp;
                },
                163 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.draw_distance = tmp;
                },
                164 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.clutter = tmp;
                },
                165 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tessellation = tmp;
                },
                166 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.foliage = tmp;
                },
                167 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.foliage_shadows = tmp;
                },
                168 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.planar_reflections = tmp;
                },
                169 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.volumetric_fog = tmp;
                },
                170 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.screen_space_reflections = tmp;
                },
                171 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.character_texture_detail = tmp;
                },
                172 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.character_detail = tmp;
                },
                173 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ambient_occlusion_quality = tmp;
                },
                174 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.object_motion_blur = tmp;
                },
                175 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.lens_flare = tmp;
                },
                176 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.combat_number_long_format = tmp;
                },
                177 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_minimap_legendaries = tmp;
                },
                178 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_player_callouts = tmp;
                },
                179 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.friend_event_notification_lifetime = tmp;
                },
                180 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.friend_event_notification_frequency = tmp;
                },
                181 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.trade_request_reception_type = tmp;
                },
                182 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.head_bob_scale = tmp;
                },
                184 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_seen_first_boot = tmp;
                },
                189 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.subs_cc_size = tmp;
                },
                190 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.cc_subs_background_opacity = tmp;
                },
                191 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.walking_button_scheme = tmp;
                },
                192 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.driving_button_scheme = tmp;
                },
                193 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.glyph_mode = tmp;
                },
                194 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_MPH = tmp;
                },
                195 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.registered_downloadable_entitlements)?;
                },
                196 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.seen_news_items)?;
                },
                197 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.auto_centering_enabled = tmp;
                },
                198 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.increased_chance_for_subscribers = tmp;
                },
                199 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.rare_chest_event_enabled = tmp;
                },
                200 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.badass_event_enabled = tmp;
                },
                201 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.pinata_event_enabled = tmp;
                },
                202 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.min_time_between_badass_events = tmp;
                },
                203 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.hud_scale_multiplier = tmp;
                },
                204 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_spatial_audio__or__has_reset_console_fov = tmp;
                },
                205 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.total_playtime_seconds = tmp;
                },
                206 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.moxxis_drink_event_enabled = tmp;
                },
                207 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.moxxis_drink_event_bits_product_id = tmp;
                },
                208 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.challenge_data)?;
                },
                209 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.CitizenScienceLevelProgression)?;
                },
                210 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.default_dead_zone_inner_updated = tmp;
                },
                211 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_event_content = tmp;
                },
                212 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.desired_friend_sync_state = tmp;
                },
                213 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.needs_shift_first_boot = tmp;
                },
                214 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.recently_met_players)?;
                },
                215 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.CitizenScienceActiveBoosterIndex = tmp;
                },
                216 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.CitizenScienceActiveBoosterRemainingTime = tmp;
                },
                217 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.CitizenScienceActiveBoosterTotalTime = tmp;
                },
                218 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.StreamerPrimaryActiveBoosterIndex = tmp;
                },
                219 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.StreamerPrimaryActiveBoosterRemainingTime = tmp;
                },
                220 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.StreamerPrimaryActiveBoosterTotalTime = tmp;
                },
                221 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.StreamerSecondaryActiveBoosterIndex = tmp;
                },
                222 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.StreamerSecondaryActiveBoosterRemainingTime = tmp;
                },
                223 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.StreamerSecondaryActiveBoosterTotalTime = tmp;
                },
                224 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.StreamerBoosterTier = tmp;
                },
                226 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.CitizenScienceCSBucksAmount = tmp;
                },
                227 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.bCitizenScienceHasSeenIntroVideo = tmp;
                },
                228 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.bCitizenScienceTutorialDone = tmp;
                },
                229 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_trigger_feedback = tmp;
                },
                230 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fixed_initial_zonemap_rotation = tmp;
                },
                231 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vault_card)?;
                },
                232 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.player_selected_league = tmp;
                },
                233 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.needs_shift_first_boot_primary = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.enable_aim_assist != false {
            my_size += 2;
        }
        if self.gamepad_invert_look != false {
            my_size += 2;
        }
        if self.gamepad_invert_turn != false {
            my_size += 2;
        }
        if self.gamepad_invert_move != false {
            my_size += 2;
        }
        if self.gamepad_invert_strafe != false {
            my_size += 2;
        }
        if self.enable_vibration != false {
            my_size += 2;
        }
        if self.invert_mouse_pitch != false {
            my_size += 2;
        }
        if self.enable_mouse_smoothing != false {
            my_size += 2;
        }
        if self.mouse_scale != 0. {
            my_size += 5;
        }
        if self.show_damage_numbers != false {
            my_size += 2;
        }
        if self.show_damage_number_icons != false {
            my_size += 2;
        }
        if self.enable_training_messages != false {
            my_size += 2;
        }
        if self.show_text_chat != false {
            my_size += 2;
        }
        if self.center_crosshair != false {
            my_size += 2;
        }
        if self.toggle_sprint != false {
            my_size += 2;
        }
        if self.toggle_crouch != false {
            my_size += 3;
        }
        if self.censor_content != false {
            my_size += 3;
        }
        if self.music_volume != 0. {
            my_size += 6;
        }
        if self.sound_effects_volume != 0. {
            my_size += 6;
        }
        if self.vo_volume != 0. {
            my_size += 6;
        }
        if self.voice_volume != 0. {
            my_size += 6;
        }
        if self.enable_optional_vo != false {
            my_size += 3;
        }
        if self.push_to_talk != false {
            my_size += 3;
        }
        if self.enable_controller_audio != false {
            my_size += 3;
        }
        if self.speaker_angle_front != 0. {
            my_size += 6;
        }
        if self.speaker_angle_side != 0. {
            my_size += 6;
        }
        if self.speaker_angle_back != 0. {
            my_size += 6;
        }
        if self.speaker_setup != 0 {
            my_size += ::protobuf::rt::value_size(28, self.speaker_setup, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mute_audio_on_focus_loss != false {
            my_size += 3;
        }
        if self.hide_strict_nat_help_dialog != false {
            my_size += 3;
        }
        if let Some(ref v) = self.player_input_bindings.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.news_hashes {
            my_size += ::protobuf::rt::value_size(36, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.last_used_savegame_id != 0 {
            my_size += ::protobuf::rt::value_size(37, self.last_used_savegame_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gamepad_hip_sensitivity_level != 0 {
            my_size += ::protobuf::rt::value_size(38, self.gamepad_hip_sensitivity_level, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gamepad_zoomed_sensitivity_level != 0 {
            my_size += ::protobuf::rt::value_size(39, self.gamepad_zoomed_sensitivity_level, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gamepad_vehicle_sensitivity_level != 0 {
            my_size += ::protobuf::rt::value_size(40, self.gamepad_vehicle_sensitivity_level, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gamepad_movement_dead_zone_x != 0. {
            my_size += 6;
        }
        if self.gamepad_movement_dead_zone_y != 0. {
            my_size += 6;
        }
        if self.gamepad_look_dead_zone_inner_x != 0. {
            my_size += 6;
        }
        if self.gamepad_look_dead_zone_outer_x != 0. {
            my_size += 6;
        }
        if self.gamepad_look_dead_zone_inner_y != 0. {
            my_size += 6;
        }
        if self.gamepad_look_dead_zone_outer_y != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_movement_dead_zone_x != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_movement_dead_zone_y != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_look_dead_zone_inner_x != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_look_dead_zone_outer_x != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_look_dead_zone_inner_y != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_look_dead_zone_outer_y != 0. {
            my_size += 6;
        }
        if self.gamepad_left_dead_zone_inner != 0. {
            my_size += 6;
        }
        if self.gamepad_left_dead_zone_outer != 0. {
            my_size += 6;
        }
        if self.gamepad_right_dead_zone_inner != 0. {
            my_size += 6;
        }
        if self.gamepad_right_dead_zone_outer != 0. {
            my_size += 6;
        }
        if self.gamepad_look_axial_dead_zone_scale != 0. {
            my_size += 6;
        }
        if self.gamepad_move_axial_dead_zone_scale != 0. {
            my_size += 6;
        }
        if self.gamepad_use_advanced_hip_aim_settings != false {
            my_size += 3;
        }
        if self.gamepad_use_advanced_zoomed_aim_settings != false {
            my_size += 3;
        }
        if self.gamepad_use_advanced_vehicle_aim_settings != false {
            my_size += 3;
        }
        if self.gamepad_hip_yaw_rate != 0. {
            my_size += 6;
        }
        if self.gamepad_hip_pitch_rate != 0. {
            my_size += 6;
        }
        if self.gamepad_hip_extra_yaw != 0. {
            my_size += 6;
        }
        if self.gamepad_hip_extra_pitch != 0. {
            my_size += 6;
        }
        if self.gamepad_hip_ramp_up_time != 0. {
            my_size += 6;
        }
        if self.gamepad_hip_ramp_up_delay != 0. {
            my_size += 6;
        }
        if self.gamepad_zoomed_yaw_rate != 0. {
            my_size += 6;
        }
        if self.gamepad_zoomed_pitch_rate != 0. {
            my_size += 6;
        }
        if self.gamepad_zoomed_extra_yaw != 0. {
            my_size += 6;
        }
        if self.gamepad_zoomed_extra_pitch != 0. {
            my_size += 6;
        }
        if self.gamepad_zoomed_ramp_up_time != 0. {
            my_size += 6;
        }
        if self.gamepad_zoomed_ramp_up_delay != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_yaw_rate != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_pitch_rate != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_extra_yaw != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_extra_pitch != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_ramp_up_time != 0. {
            my_size += 6;
        }
        if self.gamepad_vehicle_ramp_up_delay != 0. {
            my_size += 6;
        }
        if self.ironsight_aim_assist != false {
            my_size += 3;
        }
        if self.walking_joystick_scheme != 0 {
            my_size += ::protobuf::rt::value_size(81, self.walking_joystick_scheme, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.driving_joystick_scheme != 0 {
            my_size += ::protobuf::rt::value_size(82, self.driving_joystick_scheme, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mouse_ads_scale != 0. {
            my_size += 6;
        }
        if self.mouse_vehicle_scale != 0. {
            my_size += 6;
        }
        if self.mouse_ironsight_aim_assist != false {
            my_size += 3;
        }
        if self.vehicle_input_mode != 0 {
            my_size += ::protobuf::rt::value_size(86, self.vehicle_input_mode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.weapon_aim_toggle != false {
            my_size += 3;
        }
        if self.mantle_requires_button != false {
            my_size += 3;
        }
        if self.fixed_minimap_rotation != false {
            my_size += 3;
        }
        if self.map_invert_pitch != false {
            my_size += 3;
        }
        if self.map_invert_yaw != false {
            my_size += 3;
        }
        if self.difficulty != 0 {
            my_size += ::protobuf::rt::value_size(92, self.difficulty, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.swap_dual_wield_controls != false {
            my_size += 3;
        }
        if self.base_fov != 0. {
            my_size += 6;
        }
        if self.crosshair_neutral_color_frame != 0 {
            my_size += ::protobuf::rt::value_size(95, self.crosshair_neutral_color_frame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.crosshair_enemy_color_frame != 0 {
            my_size += ::protobuf::rt::value_size(96, self.crosshair_enemy_color_frame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.crosshair_ally_color_frame != 0 {
            my_size += ::protobuf::rt::value_size(97, self.crosshair_ally_color_frame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.enable_subtitles != false {
            my_size += 3;
        }
        if self.enable_closed_captions != false {
            my_size += 3;
        }
        if !self.last_status_menu_page.is_empty() {
            my_size += ::protobuf::rt::string_size(100, &self.last_status_menu_page);
        }
        for value in &self.inventory_screen_last_filter {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.tutorial_info.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.default_network_type != 0 {
            my_size += ::protobuf::rt::value_size(103, self.default_network_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.default_invite_type != 0 {
            my_size += ::protobuf::rt::value_size(104, self.default_invite_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.matchmaking_region.is_empty() {
            my_size += ::protobuf::rt::string_size(105, &self.matchmaking_region);
        }
        if self.streaming_service != 0 {
            my_size += ::protobuf::rt::value_size(106, self.streaming_service, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_cached_friend_events != 0 {
            my_size += ::protobuf::rt::value_size(107, self.max_cached_friend_events, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_cached_friend_statuses != 0 {
            my_size += ::protobuf::rt::value_size(108, self.max_cached_friend_statuses, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.friend_events {
            my_size += ::protobuf::rt::string_size(109, &value);
        };
        for value in &self.friend_statuses {
            my_size += ::protobuf::rt::string_size(110, &value);
        };
        if self.last_whisper_fetch_events_time != 0 {
            my_size += ::protobuf::rt::value_size(111, self.last_whisper_fetch_events_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_whisper_fetch_statuses_time != 0 {
            my_size += ::protobuf::rt::value_size(112, self.last_whisper_fetch_statuses_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.desired_crossplay_state != 0 {
            my_size += ::protobuf::rt::value_size(113, self.desired_crossplay_state, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.friend_encounters {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.max_friend_encounter_size != 0 {
            my_size += ::protobuf::rt::value_size(134, self.max_friend_encounter_size, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.profile_stats_data {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.bank_inventory_category_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.bank_inventory_list {
            my_size += ::protobuf::rt::bytes_size(137, &value);
        };
        for value in &self.lost_loot_inventory_list {
            my_size += ::protobuf::rt::bytes_size(138, &value);
        };
        for value in &self.npc_mail_items {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.mail_guids {
            my_size += ::protobuf::rt::string_size(140, &value);
        };
        for value in &self.unread_mail_guids {
            my_size += ::protobuf::rt::string_size(141, &value);
        };
        for value in &self.gear_sold_by_friends {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.profile_sdu_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.unlocked_customizations {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.unlocked_inventory_customization_parts {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.guardian_rank.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.unlocked_crew_quarters_decorations {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.unlocked_crew_quarters_rooms {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.enable_mouse_acceleration != false {
            my_size += 3;
        }
        if self.enable_gamepad_input != false {
            my_size += 3;
        }
        if self.use_classic_gamepad_input != false {
            my_size += 3;
        }
        if self.master_volume != 0. {
            my_size += 6;
        }
        if self.monitor_display_type != 0 {
            my_size += ::protobuf::rt::value_size(154, self.monitor_display_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.graphics_mode != 0 {
            my_size += ::protobuf::rt::value_size(155, self.graphics_mode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frame_rate_limit != 0 {
            my_size += ::protobuf::rt::value_size(156, self.frame_rate_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.base_vehicle_fov != 0. {
            my_size += 6;
        }
        if self.graphics_quality != 0 {
            my_size += ::protobuf::rt::value_size(158, self.graphics_quality, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.anisotropic_filtering != 0 {
            my_size += ::protobuf::rt::value_size(159, self.anisotropic_filtering, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shadow_quality != 0 {
            my_size += ::protobuf::rt::value_size(160, self.shadow_quality, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.display_performance_stats != 0 {
            my_size += ::protobuf::rt::value_size(161, self.display_performance_stats, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.texture_detail != 0 {
            my_size += ::protobuf::rt::value_size(162, self.texture_detail, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.draw_distance != 0 {
            my_size += ::protobuf::rt::value_size(163, self.draw_distance, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.clutter != 0 {
            my_size += ::protobuf::rt::value_size(164, self.clutter, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tessellation != 0 {
            my_size += ::protobuf::rt::value_size(165, self.tessellation, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.foliage != 0 {
            my_size += ::protobuf::rt::value_size(166, self.foliage, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.foliage_shadows != false {
            my_size += 3;
        }
        if self.planar_reflections != false {
            my_size += 3;
        }
        if self.volumetric_fog != 0 {
            my_size += ::protobuf::rt::value_size(169, self.volumetric_fog, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.screen_space_reflections != 0 {
            my_size += ::protobuf::rt::value_size(170, self.screen_space_reflections, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.character_texture_detail != 0 {
            my_size += ::protobuf::rt::value_size(171, self.character_texture_detail, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.character_detail != 0 {
            my_size += ::protobuf::rt::value_size(172, self.character_detail, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ambient_occlusion_quality != 0 {
            my_size += ::protobuf::rt::value_size(173, self.ambient_occlusion_quality, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.object_motion_blur != false {
            my_size += 3;
        }
        if self.lens_flare != false {
            my_size += 3;
        }
        if self.combat_number_long_format != false {
            my_size += 3;
        }
        if self.show_minimap_legendaries != false {
            my_size += 3;
        }
        if self.use_player_callouts != false {
            my_size += 3;
        }
        if self.friend_event_notification_lifetime != 0 {
            my_size += ::protobuf::rt::value_size(179, self.friend_event_notification_lifetime, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.friend_event_notification_frequency != 0 {
            my_size += ::protobuf::rt::value_size(180, self.friend_event_notification_frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.trade_request_reception_type != 0 {
            my_size += ::protobuf::rt::value_size(181, self.trade_request_reception_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.head_bob_scale != 0. {
            my_size += 6;
        }
        if self.has_seen_first_boot != false {
            my_size += 3;
        }
        if self.subs_cc_size != 0. {
            my_size += 6;
        }
        if self.cc_subs_background_opacity != 0. {
            my_size += 6;
        }
        if self.walking_button_scheme != 0 {
            my_size += ::protobuf::rt::value_size(191, self.walking_button_scheme, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.driving_button_scheme != 0 {
            my_size += ::protobuf::rt::value_size(192, self.driving_button_scheme, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.glyph_mode != 0 {
            my_size += ::protobuf::rt::value_size(193, self.glyph_mode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.use_MPH != false {
            my_size += 3;
        }
        for value in &self.registered_downloadable_entitlements {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.seen_news_items {
            my_size += ::protobuf::rt::string_size(196, &value);
        };
        if self.auto_centering_enabled != false {
            my_size += 3;
        }
        if self.increased_chance_for_subscribers != false {
            my_size += 3;
        }
        if self.rare_chest_event_enabled != false {
            my_size += 3;
        }
        if self.badass_event_enabled != false {
            my_size += 3;
        }
        if self.pinata_event_enabled != false {
            my_size += 3;
        }
        if self.min_time_between_badass_events != 0 {
            my_size += ::protobuf::rt::value_size(202, self.min_time_between_badass_events, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hud_scale_multiplier != 0. {
            my_size += 6;
        }
        if self.disable_spatial_audio__or__has_reset_console_fov != false {
            my_size += 3;
        }
        if self.total_playtime_seconds != 0 {
            my_size += ::protobuf::rt::value_size(205, self.total_playtime_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.moxxis_drink_event_enabled != false {
            my_size += 3;
        }
        if self.moxxis_drink_event_bits_product_id != 0 {
            my_size += ::protobuf::rt::value_size(207, self.moxxis_drink_event_bits_product_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.challenge_data {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.CitizenScienceLevelProgression {
            my_size += ::protobuf::rt::value_size(209, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.default_dead_zone_inner_updated != false {
            my_size += 3;
        }
        if self.disable_event_content != false {
            my_size += 3;
        }
        if self.desired_friend_sync_state != 0 {
            my_size += ::protobuf::rt::value_size(212, self.desired_friend_sync_state, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.needs_shift_first_boot != false {
            my_size += 3;
        }
        for value in &self.recently_met_players {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.CitizenScienceActiveBoosterIndex != 0 {
            my_size += ::protobuf::rt::value_size(215, self.CitizenScienceActiveBoosterIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.CitizenScienceActiveBoosterRemainingTime != 0. {
            my_size += 6;
        }
        if self.CitizenScienceActiveBoosterTotalTime != 0. {
            my_size += 6;
        }
        if self.StreamerPrimaryActiveBoosterIndex != 0 {
            my_size += ::protobuf::rt::value_size(218, self.StreamerPrimaryActiveBoosterIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.StreamerPrimaryActiveBoosterRemainingTime != 0. {
            my_size += 6;
        }
        if self.StreamerPrimaryActiveBoosterTotalTime != 0. {
            my_size += 6;
        }
        if self.StreamerSecondaryActiveBoosterIndex != 0 {
            my_size += ::protobuf::rt::value_size(221, self.StreamerSecondaryActiveBoosterIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.StreamerSecondaryActiveBoosterRemainingTime != 0. {
            my_size += 6;
        }
        if self.StreamerSecondaryActiveBoosterTotalTime != 0. {
            my_size += 6;
        }
        if self.StreamerBoosterTier != 0 {
            my_size += ::protobuf::rt::value_size(224, self.StreamerBoosterTier, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.CitizenScienceCSBucksAmount != 0 {
            my_size += ::protobuf::rt::value_size(226, self.CitizenScienceCSBucksAmount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bCitizenScienceHasSeenIntroVideo != false {
            my_size += 3;
        }
        if self.bCitizenScienceTutorialDone != false {
            my_size += 3;
        }
        if self.enable_trigger_feedback != false {
            my_size += 3;
        }
        if self.fixed_initial_zonemap_rotation != false {
            my_size += 3;
        }
        if let Some(ref v) = self.vault_card.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.player_selected_league != 0 {
            my_size += ::protobuf::rt::value_size(232, self.player_selected_league, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.needs_shift_first_boot_primary != false {
            my_size += 3;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.enable_aim_assist != false {
            os.write_bool(1, self.enable_aim_assist)?;
        }
        if self.gamepad_invert_look != false {
            os.write_bool(2, self.gamepad_invert_look)?;
        }
        if self.gamepad_invert_turn != false {
            os.write_bool(3, self.gamepad_invert_turn)?;
        }
        if self.gamepad_invert_move != false {
            os.write_bool(4, self.gamepad_invert_move)?;
        }
        if self.gamepad_invert_strafe != false {
            os.write_bool(5, self.gamepad_invert_strafe)?;
        }
        if self.enable_vibration != false {
            os.write_bool(6, self.enable_vibration)?;
        }
        if self.invert_mouse_pitch != false {
            os.write_bool(7, self.invert_mouse_pitch)?;
        }
        if self.enable_mouse_smoothing != false {
            os.write_bool(8, self.enable_mouse_smoothing)?;
        }
        if self.mouse_scale != 0. {
            os.write_float(9, self.mouse_scale)?;
        }
        if self.show_damage_numbers != false {
            os.write_bool(10, self.show_damage_numbers)?;
        }
        if self.show_damage_number_icons != false {
            os.write_bool(11, self.show_damage_number_icons)?;
        }
        if self.enable_training_messages != false {
            os.write_bool(12, self.enable_training_messages)?;
        }
        if self.show_text_chat != false {
            os.write_bool(13, self.show_text_chat)?;
        }
        if self.center_crosshair != false {
            os.write_bool(14, self.center_crosshair)?;
        }
        if self.toggle_sprint != false {
            os.write_bool(15, self.toggle_sprint)?;
        }
        if self.toggle_crouch != false {
            os.write_bool(16, self.toggle_crouch)?;
        }
        if self.censor_content != false {
            os.write_bool(17, self.censor_content)?;
        }
        if self.music_volume != 0. {
            os.write_float(18, self.music_volume)?;
        }
        if self.sound_effects_volume != 0. {
            os.write_float(19, self.sound_effects_volume)?;
        }
        if self.vo_volume != 0. {
            os.write_float(20, self.vo_volume)?;
        }
        if self.voice_volume != 0. {
            os.write_float(21, self.voice_volume)?;
        }
        if self.enable_optional_vo != false {
            os.write_bool(22, self.enable_optional_vo)?;
        }
        if self.push_to_talk != false {
            os.write_bool(23, self.push_to_talk)?;
        }
        if self.enable_controller_audio != false {
            os.write_bool(24, self.enable_controller_audio)?;
        }
        if self.speaker_angle_front != 0. {
            os.write_float(25, self.speaker_angle_front)?;
        }
        if self.speaker_angle_side != 0. {
            os.write_float(26, self.speaker_angle_side)?;
        }
        if self.speaker_angle_back != 0. {
            os.write_float(27, self.speaker_angle_back)?;
        }
        if self.speaker_setup != 0 {
            os.write_uint32(28, self.speaker_setup)?;
        }
        if self.mute_audio_on_focus_loss != false {
            os.write_bool(29, self.mute_audio_on_focus_loss)?;
        }
        if self.hide_strict_nat_help_dialog != false {
            os.write_bool(34, self.hide_strict_nat_help_dialog)?;
        }
        if let Some(ref v) = self.player_input_bindings.as_ref() {
            os.write_tag(35, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.news_hashes {
            os.write_uint32(36, *v)?;
        };
        if self.last_used_savegame_id != 0 {
            os.write_uint32(37, self.last_used_savegame_id)?;
        }
        if self.gamepad_hip_sensitivity_level != 0 {
            os.write_int32(38, self.gamepad_hip_sensitivity_level)?;
        }
        if self.gamepad_zoomed_sensitivity_level != 0 {
            os.write_int32(39, self.gamepad_zoomed_sensitivity_level)?;
        }
        if self.gamepad_vehicle_sensitivity_level != 0 {
            os.write_int32(40, self.gamepad_vehicle_sensitivity_level)?;
        }
        if self.gamepad_movement_dead_zone_x != 0. {
            os.write_float(41, self.gamepad_movement_dead_zone_x)?;
        }
        if self.gamepad_movement_dead_zone_y != 0. {
            os.write_float(42, self.gamepad_movement_dead_zone_y)?;
        }
        if self.gamepad_look_dead_zone_inner_x != 0. {
            os.write_float(43, self.gamepad_look_dead_zone_inner_x)?;
        }
        if self.gamepad_look_dead_zone_outer_x != 0. {
            os.write_float(44, self.gamepad_look_dead_zone_outer_x)?;
        }
        if self.gamepad_look_dead_zone_inner_y != 0. {
            os.write_float(45, self.gamepad_look_dead_zone_inner_y)?;
        }
        if self.gamepad_look_dead_zone_outer_y != 0. {
            os.write_float(46, self.gamepad_look_dead_zone_outer_y)?;
        }
        if self.gamepad_vehicle_movement_dead_zone_x != 0. {
            os.write_float(47, self.gamepad_vehicle_movement_dead_zone_x)?;
        }
        if self.gamepad_vehicle_movement_dead_zone_y != 0. {
            os.write_float(48, self.gamepad_vehicle_movement_dead_zone_y)?;
        }
        if self.gamepad_vehicle_look_dead_zone_inner_x != 0. {
            os.write_float(49, self.gamepad_vehicle_look_dead_zone_inner_x)?;
        }
        if self.gamepad_vehicle_look_dead_zone_outer_x != 0. {
            os.write_float(50, self.gamepad_vehicle_look_dead_zone_outer_x)?;
        }
        if self.gamepad_vehicle_look_dead_zone_inner_y != 0. {
            os.write_float(51, self.gamepad_vehicle_look_dead_zone_inner_y)?;
        }
        if self.gamepad_vehicle_look_dead_zone_outer_y != 0. {
            os.write_float(52, self.gamepad_vehicle_look_dead_zone_outer_y)?;
        }
        if self.gamepad_left_dead_zone_inner != 0. {
            os.write_float(53, self.gamepad_left_dead_zone_inner)?;
        }
        if self.gamepad_left_dead_zone_outer != 0. {
            os.write_float(54, self.gamepad_left_dead_zone_outer)?;
        }
        if self.gamepad_right_dead_zone_inner != 0. {
            os.write_float(55, self.gamepad_right_dead_zone_inner)?;
        }
        if self.gamepad_right_dead_zone_outer != 0. {
            os.write_float(56, self.gamepad_right_dead_zone_outer)?;
        }
        if self.gamepad_look_axial_dead_zone_scale != 0. {
            os.write_float(57, self.gamepad_look_axial_dead_zone_scale)?;
        }
        if self.gamepad_move_axial_dead_zone_scale != 0. {
            os.write_float(58, self.gamepad_move_axial_dead_zone_scale)?;
        }
        if self.gamepad_use_advanced_hip_aim_settings != false {
            os.write_bool(59, self.gamepad_use_advanced_hip_aim_settings)?;
        }
        if self.gamepad_use_advanced_zoomed_aim_settings != false {
            os.write_bool(60, self.gamepad_use_advanced_zoomed_aim_settings)?;
        }
        if self.gamepad_use_advanced_vehicle_aim_settings != false {
            os.write_bool(61, self.gamepad_use_advanced_vehicle_aim_settings)?;
        }
        if self.gamepad_hip_yaw_rate != 0. {
            os.write_float(62, self.gamepad_hip_yaw_rate)?;
        }
        if self.gamepad_hip_pitch_rate != 0. {
            os.write_float(63, self.gamepad_hip_pitch_rate)?;
        }
        if self.gamepad_hip_extra_yaw != 0. {
            os.write_float(64, self.gamepad_hip_extra_yaw)?;
        }
        if self.gamepad_hip_extra_pitch != 0. {
            os.write_float(65, self.gamepad_hip_extra_pitch)?;
        }
        if self.gamepad_hip_ramp_up_time != 0. {
            os.write_float(66, self.gamepad_hip_ramp_up_time)?;
        }
        if self.gamepad_hip_ramp_up_delay != 0. {
            os.write_float(67, self.gamepad_hip_ramp_up_delay)?;
        }
        if self.gamepad_zoomed_yaw_rate != 0. {
            os.write_float(68, self.gamepad_zoomed_yaw_rate)?;
        }
        if self.gamepad_zoomed_pitch_rate != 0. {
            os.write_float(69, self.gamepad_zoomed_pitch_rate)?;
        }
        if self.gamepad_zoomed_extra_yaw != 0. {
            os.write_float(70, self.gamepad_zoomed_extra_yaw)?;
        }
        if self.gamepad_zoomed_extra_pitch != 0. {
            os.write_float(71, self.gamepad_zoomed_extra_pitch)?;
        }
        if self.gamepad_zoomed_ramp_up_time != 0. {
            os.write_float(72, self.gamepad_zoomed_ramp_up_time)?;
        }
        if self.gamepad_zoomed_ramp_up_delay != 0. {
            os.write_float(73, self.gamepad_zoomed_ramp_up_delay)?;
        }
        if self.gamepad_vehicle_yaw_rate != 0. {
            os.write_float(74, self.gamepad_vehicle_yaw_rate)?;
        }
        if self.gamepad_vehicle_pitch_rate != 0. {
            os.write_float(75, self.gamepad_vehicle_pitch_rate)?;
        }
        if self.gamepad_vehicle_extra_yaw != 0. {
            os.write_float(76, self.gamepad_vehicle_extra_yaw)?;
        }
        if self.gamepad_vehicle_extra_pitch != 0. {
            os.write_float(77, self.gamepad_vehicle_extra_pitch)?;
        }
        if self.gamepad_vehicle_ramp_up_time != 0. {
            os.write_float(78, self.gamepad_vehicle_ramp_up_time)?;
        }
        if self.gamepad_vehicle_ramp_up_delay != 0. {
            os.write_float(79, self.gamepad_vehicle_ramp_up_delay)?;
        }
        if self.ironsight_aim_assist != false {
            os.write_bool(80, self.ironsight_aim_assist)?;
        }
        if self.walking_joystick_scheme != 0 {
            os.write_uint32(81, self.walking_joystick_scheme)?;
        }
        if self.driving_joystick_scheme != 0 {
            os.write_uint32(82, self.driving_joystick_scheme)?;
        }
        if self.mouse_ads_scale != 0. {
            os.write_float(83, self.mouse_ads_scale)?;
        }
        if self.mouse_vehicle_scale != 0. {
            os.write_float(84, self.mouse_vehicle_scale)?;
        }
        if self.mouse_ironsight_aim_assist != false {
            os.write_bool(85, self.mouse_ironsight_aim_assist)?;
        }
        if self.vehicle_input_mode != 0 {
            os.write_uint32(86, self.vehicle_input_mode)?;
        }
        if self.weapon_aim_toggle != false {
            os.write_bool(87, self.weapon_aim_toggle)?;
        }
        if self.mantle_requires_button != false {
            os.write_bool(88, self.mantle_requires_button)?;
        }
        if self.fixed_minimap_rotation != false {
            os.write_bool(89, self.fixed_minimap_rotation)?;
        }
        if self.map_invert_pitch != false {
            os.write_bool(90, self.map_invert_pitch)?;
        }
        if self.map_invert_yaw != false {
            os.write_bool(91, self.map_invert_yaw)?;
        }
        if self.difficulty != 0 {
            os.write_uint32(92, self.difficulty)?;
        }
        if self.swap_dual_wield_controls != false {
            os.write_bool(93, self.swap_dual_wield_controls)?;
        }
        if self.base_fov != 0. {
            os.write_float(94, self.base_fov)?;
        }
        if self.crosshair_neutral_color_frame != 0 {
            os.write_uint32(95, self.crosshair_neutral_color_frame)?;
        }
        if self.crosshair_enemy_color_frame != 0 {
            os.write_uint32(96, self.crosshair_enemy_color_frame)?;
        }
        if self.crosshair_ally_color_frame != 0 {
            os.write_uint32(97, self.crosshair_ally_color_frame)?;
        }
        if self.enable_subtitles != false {
            os.write_bool(98, self.enable_subtitles)?;
        }
        if self.enable_closed_captions != false {
            os.write_bool(99, self.enable_closed_captions)?;
        }
        if !self.last_status_menu_page.is_empty() {
            os.write_string(100, &self.last_status_menu_page)?;
        }
        for v in &self.inventory_screen_last_filter {
            os.write_tag(101, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.tutorial_info.as_ref() {
            os.write_tag(102, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.default_network_type != 0 {
            os.write_uint32(103, self.default_network_type)?;
        }
        if self.default_invite_type != 0 {
            os.write_uint32(104, self.default_invite_type)?;
        }
        if !self.matchmaking_region.is_empty() {
            os.write_string(105, &self.matchmaking_region)?;
        }
        if self.streaming_service != 0 {
            os.write_uint32(106, self.streaming_service)?;
        }
        if self.max_cached_friend_events != 0 {
            os.write_int32(107, self.max_cached_friend_events)?;
        }
        if self.max_cached_friend_statuses != 0 {
            os.write_int32(108, self.max_cached_friend_statuses)?;
        }
        for v in &self.friend_events {
            os.write_string(109, &v)?;
        };
        for v in &self.friend_statuses {
            os.write_string(110, &v)?;
        };
        if self.last_whisper_fetch_events_time != 0 {
            os.write_int64(111, self.last_whisper_fetch_events_time)?;
        }
        if self.last_whisper_fetch_statuses_time != 0 {
            os.write_int64(112, self.last_whisper_fetch_statuses_time)?;
        }
        if self.desired_crossplay_state != 0 {
            os.write_uint32(113, self.desired_crossplay_state)?;
        }
        for v in &self.friend_encounters {
            os.write_tag(133, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.max_friend_encounter_size != 0 {
            os.write_int32(134, self.max_friend_encounter_size)?;
        }
        for v in &self.profile_stats_data {
            os.write_tag(135, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.bank_inventory_category_list {
            os.write_tag(136, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.bank_inventory_list {
            os.write_bytes(137, &v)?;
        };
        for v in &self.lost_loot_inventory_list {
            os.write_bytes(138, &v)?;
        };
        for v in &self.npc_mail_items {
            os.write_tag(139, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.mail_guids {
            os.write_string(140, &v)?;
        };
        for v in &self.unread_mail_guids {
            os.write_string(141, &v)?;
        };
        for v in &self.gear_sold_by_friends {
            os.write_tag(142, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.profile_sdu_list {
            os.write_tag(143, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.unlocked_customizations {
            os.write_tag(144, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.unlocked_inventory_customization_parts {
            os.write_tag(145, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.guardian_rank.as_ref() {
            os.write_tag(146, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.unlocked_crew_quarters_decorations {
            os.write_tag(147, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.unlocked_crew_quarters_rooms {
            os.write_tag(148, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.enable_mouse_acceleration != false {
            os.write_bool(150, self.enable_mouse_acceleration)?;
        }
        if self.enable_gamepad_input != false {
            os.write_bool(151, self.enable_gamepad_input)?;
        }
        if self.use_classic_gamepad_input != false {
            os.write_bool(152, self.use_classic_gamepad_input)?;
        }
        if self.master_volume != 0. {
            os.write_float(153, self.master_volume)?;
        }
        if self.monitor_display_type != 0 {
            os.write_uint32(154, self.monitor_display_type)?;
        }
        if self.graphics_mode != 0 {
            os.write_uint32(155, self.graphics_mode)?;
        }
        if self.frame_rate_limit != 0 {
            os.write_uint32(156, self.frame_rate_limit)?;
        }
        if self.base_vehicle_fov != 0. {
            os.write_float(157, self.base_vehicle_fov)?;
        }
        if self.graphics_quality != 0 {
            os.write_uint32(158, self.graphics_quality)?;
        }
        if self.anisotropic_filtering != 0 {
            os.write_uint32(159, self.anisotropic_filtering)?;
        }
        if self.shadow_quality != 0 {
            os.write_uint32(160, self.shadow_quality)?;
        }
        if self.display_performance_stats != 0 {
            os.write_uint32(161, self.display_performance_stats)?;
        }
        if self.texture_detail != 0 {
            os.write_uint32(162, self.texture_detail)?;
        }
        if self.draw_distance != 0 {
            os.write_uint32(163, self.draw_distance)?;
        }
        if self.clutter != 0 {
            os.write_uint32(164, self.clutter)?;
        }
        if self.tessellation != 0 {
            os.write_uint32(165, self.tessellation)?;
        }
        if self.foliage != 0 {
            os.write_uint32(166, self.foliage)?;
        }
        if self.foliage_shadows != false {
            os.write_bool(167, self.foliage_shadows)?;
        }
        if self.planar_reflections != false {
            os.write_bool(168, self.planar_reflections)?;
        }
        if self.volumetric_fog != 0 {
            os.write_uint32(169, self.volumetric_fog)?;
        }
        if self.screen_space_reflections != 0 {
            os.write_uint32(170, self.screen_space_reflections)?;
        }
        if self.character_texture_detail != 0 {
            os.write_uint32(171, self.character_texture_detail)?;
        }
        if self.character_detail != 0 {
            os.write_uint32(172, self.character_detail)?;
        }
        if self.ambient_occlusion_quality != 0 {
            os.write_uint32(173, self.ambient_occlusion_quality)?;
        }
        if self.object_motion_blur != false {
            os.write_bool(174, self.object_motion_blur)?;
        }
        if self.lens_flare != false {
            os.write_bool(175, self.lens_flare)?;
        }
        if self.combat_number_long_format != false {
            os.write_bool(176, self.combat_number_long_format)?;
        }
        if self.show_minimap_legendaries != false {
            os.write_bool(177, self.show_minimap_legendaries)?;
        }
        if self.use_player_callouts != false {
            os.write_bool(178, self.use_player_callouts)?;
        }
        if self.friend_event_notification_lifetime != 0 {
            os.write_uint32(179, self.friend_event_notification_lifetime)?;
        }
        if self.friend_event_notification_frequency != 0 {
            os.write_uint32(180, self.friend_event_notification_frequency)?;
        }
        if self.trade_request_reception_type != 0 {
            os.write_uint32(181, self.trade_request_reception_type)?;
        }
        if self.head_bob_scale != 0. {
            os.write_float(182, self.head_bob_scale)?;
        }
        if self.has_seen_first_boot != false {
            os.write_bool(184, self.has_seen_first_boot)?;
        }
        if self.subs_cc_size != 0. {
            os.write_float(189, self.subs_cc_size)?;
        }
        if self.cc_subs_background_opacity != 0. {
            os.write_float(190, self.cc_subs_background_opacity)?;
        }
        if self.walking_button_scheme != 0 {
            os.write_uint32(191, self.walking_button_scheme)?;
        }
        if self.driving_button_scheme != 0 {
            os.write_uint32(192, self.driving_button_scheme)?;
        }
        if self.glyph_mode != 0 {
            os.write_uint32(193, self.glyph_mode)?;
        }
        if self.use_MPH != false {
            os.write_bool(194, self.use_MPH)?;
        }
        for v in &self.registered_downloadable_entitlements {
            os.write_tag(195, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.seen_news_items {
            os.write_string(196, &v)?;
        };
        if self.auto_centering_enabled != false {
            os.write_bool(197, self.auto_centering_enabled)?;
        }
        if self.increased_chance_for_subscribers != false {
            os.write_bool(198, self.increased_chance_for_subscribers)?;
        }
        if self.rare_chest_event_enabled != false {
            os.write_bool(199, self.rare_chest_event_enabled)?;
        }
        if self.badass_event_enabled != false {
            os.write_bool(200, self.badass_event_enabled)?;
        }
        if self.pinata_event_enabled != false {
            os.write_bool(201, self.pinata_event_enabled)?;
        }
        if self.min_time_between_badass_events != 0 {
            os.write_int32(202, self.min_time_between_badass_events)?;
        }
        if self.hud_scale_multiplier != 0. {
            os.write_float(203, self.hud_scale_multiplier)?;
        }
        if self.disable_spatial_audio__or__has_reset_console_fov != false {
            os.write_bool(204, self.disable_spatial_audio__or__has_reset_console_fov)?;
        }
        if self.total_playtime_seconds != 0 {
            os.write_int32(205, self.total_playtime_seconds)?;
        }
        if self.moxxis_drink_event_enabled != false {
            os.write_bool(206, self.moxxis_drink_event_enabled)?;
        }
        if self.moxxis_drink_event_bits_product_id != 0 {
            os.write_int32(207, self.moxxis_drink_event_bits_product_id)?;
        }
        for v in &self.challenge_data {
            os.write_tag(208, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.CitizenScienceLevelProgression {
            os.write_int32(209, *v)?;
        };
        if self.default_dead_zone_inner_updated != false {
            os.write_bool(210, self.default_dead_zone_inner_updated)?;
        }
        if self.disable_event_content != false {
            os.write_bool(211, self.disable_event_content)?;
        }
        if self.desired_friend_sync_state != 0 {
            os.write_uint32(212, self.desired_friend_sync_state)?;
        }
        if self.needs_shift_first_boot != false {
            os.write_bool(213, self.needs_shift_first_boot)?;
        }
        for v in &self.recently_met_players {
            os.write_tag(214, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.CitizenScienceActiveBoosterIndex != 0 {
            os.write_int32(215, self.CitizenScienceActiveBoosterIndex)?;
        }
        if self.CitizenScienceActiveBoosterRemainingTime != 0. {
            os.write_float(216, self.CitizenScienceActiveBoosterRemainingTime)?;
        }
        if self.CitizenScienceActiveBoosterTotalTime != 0. {
            os.write_float(217, self.CitizenScienceActiveBoosterTotalTime)?;
        }
        if self.StreamerPrimaryActiveBoosterIndex != 0 {
            os.write_int32(218, self.StreamerPrimaryActiveBoosterIndex)?;
        }
        if self.StreamerPrimaryActiveBoosterRemainingTime != 0. {
            os.write_float(219, self.StreamerPrimaryActiveBoosterRemainingTime)?;
        }
        if self.StreamerPrimaryActiveBoosterTotalTime != 0. {
            os.write_float(220, self.StreamerPrimaryActiveBoosterTotalTime)?;
        }
        if self.StreamerSecondaryActiveBoosterIndex != 0 {
            os.write_int32(221, self.StreamerSecondaryActiveBoosterIndex)?;
        }
        if self.StreamerSecondaryActiveBoosterRemainingTime != 0. {
            os.write_float(222, self.StreamerSecondaryActiveBoosterRemainingTime)?;
        }
        if self.StreamerSecondaryActiveBoosterTotalTime != 0. {
            os.write_float(223, self.StreamerSecondaryActiveBoosterTotalTime)?;
        }
        if self.StreamerBoosterTier != 0 {
            os.write_int32(224, self.StreamerBoosterTier)?;
        }
        if self.CitizenScienceCSBucksAmount != 0 {
            os.write_int32(226, self.CitizenScienceCSBucksAmount)?;
        }
        if self.bCitizenScienceHasSeenIntroVideo != false {
            os.write_bool(227, self.bCitizenScienceHasSeenIntroVideo)?;
        }
        if self.bCitizenScienceTutorialDone != false {
            os.write_bool(228, self.bCitizenScienceTutorialDone)?;
        }
        if self.enable_trigger_feedback != false {
            os.write_bool(229, self.enable_trigger_feedback)?;
        }
        if self.fixed_initial_zonemap_rotation != false {
            os.write_bool(230, self.fixed_initial_zonemap_rotation)?;
        }
        if let Some(ref v) = self.vault_card.as_ref() {
            os.write_tag(231, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.player_selected_league != 0 {
            os.write_uint32(232, self.player_selected_league)?;
        }
        if self.needs_shift_first_boot_primary != false {
            os.write_bool(233, self.needs_shift_first_boot_primary)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Profile {
        Profile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_aim_assist",
                |m: &Profile| { &m.enable_aim_assist },
                |m: &mut Profile| { &mut m.enable_aim_assist },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "gamepad_invert_look",
                |m: &Profile| { &m.gamepad_invert_look },
                |m: &mut Profile| { &mut m.gamepad_invert_look },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "gamepad_invert_turn",
                |m: &Profile| { &m.gamepad_invert_turn },
                |m: &mut Profile| { &mut m.gamepad_invert_turn },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "gamepad_invert_move",
                |m: &Profile| { &m.gamepad_invert_move },
                |m: &mut Profile| { &mut m.gamepad_invert_move },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "gamepad_invert_strafe",
                |m: &Profile| { &m.gamepad_invert_strafe },
                |m: &mut Profile| { &mut m.gamepad_invert_strafe },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_vibration",
                |m: &Profile| { &m.enable_vibration },
                |m: &mut Profile| { &mut m.enable_vibration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "invert_mouse_pitch",
                |m: &Profile| { &m.invert_mouse_pitch },
                |m: &mut Profile| { &mut m.invert_mouse_pitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_mouse_smoothing",
                |m: &Profile| { &m.enable_mouse_smoothing },
                |m: &mut Profile| { &mut m.enable_mouse_smoothing },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "mouse_scale",
                |m: &Profile| { &m.mouse_scale },
                |m: &mut Profile| { &mut m.mouse_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_damage_numbers",
                |m: &Profile| { &m.show_damage_numbers },
                |m: &mut Profile| { &mut m.show_damage_numbers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_damage_number_icons",
                |m: &Profile| { &m.show_damage_number_icons },
                |m: &mut Profile| { &mut m.show_damage_number_icons },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_training_messages",
                |m: &Profile| { &m.enable_training_messages },
                |m: &mut Profile| { &mut m.enable_training_messages },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_text_chat",
                |m: &Profile| { &m.show_text_chat },
                |m: &mut Profile| { &mut m.show_text_chat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "center_crosshair",
                |m: &Profile| { &m.center_crosshair },
                |m: &mut Profile| { &mut m.center_crosshair },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "toggle_sprint",
                |m: &Profile| { &m.toggle_sprint },
                |m: &mut Profile| { &mut m.toggle_sprint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "toggle_crouch",
                |m: &Profile| { &m.toggle_crouch },
                |m: &mut Profile| { &mut m.toggle_crouch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "censor_content",
                |m: &Profile| { &m.censor_content },
                |m: &mut Profile| { &mut m.censor_content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "music_volume",
                |m: &Profile| { &m.music_volume },
                |m: &mut Profile| { &mut m.music_volume },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "sound_effects_volume",
                |m: &Profile| { &m.sound_effects_volume },
                |m: &mut Profile| { &mut m.sound_effects_volume },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "vo_volume",
                |m: &Profile| { &m.vo_volume },
                |m: &mut Profile| { &mut m.vo_volume },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "voice_volume",
                |m: &Profile| { &m.voice_volume },
                |m: &mut Profile| { &mut m.voice_volume },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_optional_vo",
                |m: &Profile| { &m.enable_optional_vo },
                |m: &mut Profile| { &mut m.enable_optional_vo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "push_to_talk",
                |m: &Profile| { &m.push_to_talk },
                |m: &mut Profile| { &mut m.push_to_talk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_controller_audio",
                |m: &Profile| { &m.enable_controller_audio },
                |m: &mut Profile| { &mut m.enable_controller_audio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "speaker_angle_front",
                |m: &Profile| { &m.speaker_angle_front },
                |m: &mut Profile| { &mut m.speaker_angle_front },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "speaker_angle_side",
                |m: &Profile| { &m.speaker_angle_side },
                |m: &mut Profile| { &mut m.speaker_angle_side },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "speaker_angle_back",
                |m: &Profile| { &m.speaker_angle_back },
                |m: &mut Profile| { &mut m.speaker_angle_back },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "speaker_setup",
                |m: &Profile| { &m.speaker_setup },
                |m: &mut Profile| { &mut m.speaker_setup },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "mute_audio_on_focus_loss",
                |m: &Profile| { &m.mute_audio_on_focus_loss },
                |m: &mut Profile| { &mut m.mute_audio_on_focus_loss },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "hide_strict_nat_help_dialog",
                |m: &Profile| { &m.hide_strict_nat_help_dialog },
                |m: &mut Profile| { &mut m.hide_strict_nat_help_dialog },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerInputBindings>>(
                "player_input_bindings",
                |m: &Profile| { &m.player_input_bindings },
                |m: &mut Profile| { &mut m.player_input_bindings },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "news_hashes",
                |m: &Profile| { &m.news_hashes },
                |m: &mut Profile| { &mut m.news_hashes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_used_savegame_id",
                |m: &Profile| { &m.last_used_savegame_id },
                |m: &mut Profile| { &mut m.last_used_savegame_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "gamepad_hip_sensitivity_level",
                |m: &Profile| { &m.gamepad_hip_sensitivity_level },
                |m: &mut Profile| { &mut m.gamepad_hip_sensitivity_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "gamepad_zoomed_sensitivity_level",
                |m: &Profile| { &m.gamepad_zoomed_sensitivity_level },
                |m: &mut Profile| { &mut m.gamepad_zoomed_sensitivity_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "gamepad_vehicle_sensitivity_level",
                |m: &Profile| { &m.gamepad_vehicle_sensitivity_level },
                |m: &mut Profile| { &mut m.gamepad_vehicle_sensitivity_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_movement_dead_zone_x",
                |m: &Profile| { &m.gamepad_movement_dead_zone_x },
                |m: &mut Profile| { &mut m.gamepad_movement_dead_zone_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_movement_dead_zone_y",
                |m: &Profile| { &m.gamepad_movement_dead_zone_y },
                |m: &mut Profile| { &mut m.gamepad_movement_dead_zone_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_look_dead_zone_inner_x",
                |m: &Profile| { &m.gamepad_look_dead_zone_inner_x },
                |m: &mut Profile| { &mut m.gamepad_look_dead_zone_inner_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_look_dead_zone_outer_x",
                |m: &Profile| { &m.gamepad_look_dead_zone_outer_x },
                |m: &mut Profile| { &mut m.gamepad_look_dead_zone_outer_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_look_dead_zone_inner_y",
                |m: &Profile| { &m.gamepad_look_dead_zone_inner_y },
                |m: &mut Profile| { &mut m.gamepad_look_dead_zone_inner_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_look_dead_zone_outer_y",
                |m: &Profile| { &m.gamepad_look_dead_zone_outer_y },
                |m: &mut Profile| { &mut m.gamepad_look_dead_zone_outer_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_movement_dead_zone_x",
                |m: &Profile| { &m.gamepad_vehicle_movement_dead_zone_x },
                |m: &mut Profile| { &mut m.gamepad_vehicle_movement_dead_zone_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_movement_dead_zone_y",
                |m: &Profile| { &m.gamepad_vehicle_movement_dead_zone_y },
                |m: &mut Profile| { &mut m.gamepad_vehicle_movement_dead_zone_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_look_dead_zone_inner_x",
                |m: &Profile| { &m.gamepad_vehicle_look_dead_zone_inner_x },
                |m: &mut Profile| { &mut m.gamepad_vehicle_look_dead_zone_inner_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_look_dead_zone_outer_x",
                |m: &Profile| { &m.gamepad_vehicle_look_dead_zone_outer_x },
                |m: &mut Profile| { &mut m.gamepad_vehicle_look_dead_zone_outer_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_look_dead_zone_inner_y",
                |m: &Profile| { &m.gamepad_vehicle_look_dead_zone_inner_y },
                |m: &mut Profile| { &mut m.gamepad_vehicle_look_dead_zone_inner_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_look_dead_zone_outer_y",
                |m: &Profile| { &m.gamepad_vehicle_look_dead_zone_outer_y },
                |m: &mut Profile| { &mut m.gamepad_vehicle_look_dead_zone_outer_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_left_dead_zone_inner",
                |m: &Profile| { &m.gamepad_left_dead_zone_inner },
                |m: &mut Profile| { &mut m.gamepad_left_dead_zone_inner },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_left_dead_zone_outer",
                |m: &Profile| { &m.gamepad_left_dead_zone_outer },
                |m: &mut Profile| { &mut m.gamepad_left_dead_zone_outer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_right_dead_zone_inner",
                |m: &Profile| { &m.gamepad_right_dead_zone_inner },
                |m: &mut Profile| { &mut m.gamepad_right_dead_zone_inner },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_right_dead_zone_outer",
                |m: &Profile| { &m.gamepad_right_dead_zone_outer },
                |m: &mut Profile| { &mut m.gamepad_right_dead_zone_outer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_look_axial_dead_zone_scale",
                |m: &Profile| { &m.gamepad_look_axial_dead_zone_scale },
                |m: &mut Profile| { &mut m.gamepad_look_axial_dead_zone_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_move_axial_dead_zone_scale",
                |m: &Profile| { &m.gamepad_move_axial_dead_zone_scale },
                |m: &mut Profile| { &mut m.gamepad_move_axial_dead_zone_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "gamepad_use_advanced_hip_aim_settings",
                |m: &Profile| { &m.gamepad_use_advanced_hip_aim_settings },
                |m: &mut Profile| { &mut m.gamepad_use_advanced_hip_aim_settings },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "gamepad_use_advanced_zoomed_aim_settings",
                |m: &Profile| { &m.gamepad_use_advanced_zoomed_aim_settings },
                |m: &mut Profile| { &mut m.gamepad_use_advanced_zoomed_aim_settings },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "gamepad_use_advanced_vehicle_aim_settings",
                |m: &Profile| { &m.gamepad_use_advanced_vehicle_aim_settings },
                |m: &mut Profile| { &mut m.gamepad_use_advanced_vehicle_aim_settings },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_hip_yaw_rate",
                |m: &Profile| { &m.gamepad_hip_yaw_rate },
                |m: &mut Profile| { &mut m.gamepad_hip_yaw_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_hip_pitch_rate",
                |m: &Profile| { &m.gamepad_hip_pitch_rate },
                |m: &mut Profile| { &mut m.gamepad_hip_pitch_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_hip_extra_yaw",
                |m: &Profile| { &m.gamepad_hip_extra_yaw },
                |m: &mut Profile| { &mut m.gamepad_hip_extra_yaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_hip_extra_pitch",
                |m: &Profile| { &m.gamepad_hip_extra_pitch },
                |m: &mut Profile| { &mut m.gamepad_hip_extra_pitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_hip_ramp_up_time",
                |m: &Profile| { &m.gamepad_hip_ramp_up_time },
                |m: &mut Profile| { &mut m.gamepad_hip_ramp_up_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_hip_ramp_up_delay",
                |m: &Profile| { &m.gamepad_hip_ramp_up_delay },
                |m: &mut Profile| { &mut m.gamepad_hip_ramp_up_delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_zoomed_yaw_rate",
                |m: &Profile| { &m.gamepad_zoomed_yaw_rate },
                |m: &mut Profile| { &mut m.gamepad_zoomed_yaw_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_zoomed_pitch_rate",
                |m: &Profile| { &m.gamepad_zoomed_pitch_rate },
                |m: &mut Profile| { &mut m.gamepad_zoomed_pitch_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_zoomed_extra_yaw",
                |m: &Profile| { &m.gamepad_zoomed_extra_yaw },
                |m: &mut Profile| { &mut m.gamepad_zoomed_extra_yaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_zoomed_extra_pitch",
                |m: &Profile| { &m.gamepad_zoomed_extra_pitch },
                |m: &mut Profile| { &mut m.gamepad_zoomed_extra_pitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_zoomed_ramp_up_time",
                |m: &Profile| { &m.gamepad_zoomed_ramp_up_time },
                |m: &mut Profile| { &mut m.gamepad_zoomed_ramp_up_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_zoomed_ramp_up_delay",
                |m: &Profile| { &m.gamepad_zoomed_ramp_up_delay },
                |m: &mut Profile| { &mut m.gamepad_zoomed_ramp_up_delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_yaw_rate",
                |m: &Profile| { &m.gamepad_vehicle_yaw_rate },
                |m: &mut Profile| { &mut m.gamepad_vehicle_yaw_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_pitch_rate",
                |m: &Profile| { &m.gamepad_vehicle_pitch_rate },
                |m: &mut Profile| { &mut m.gamepad_vehicle_pitch_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_extra_yaw",
                |m: &Profile| { &m.gamepad_vehicle_extra_yaw },
                |m: &mut Profile| { &mut m.gamepad_vehicle_extra_yaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_extra_pitch",
                |m: &Profile| { &m.gamepad_vehicle_extra_pitch },
                |m: &mut Profile| { &mut m.gamepad_vehicle_extra_pitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_ramp_up_time",
                |m: &Profile| { &m.gamepad_vehicle_ramp_up_time },
                |m: &mut Profile| { &mut m.gamepad_vehicle_ramp_up_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gamepad_vehicle_ramp_up_delay",
                |m: &Profile| { &m.gamepad_vehicle_ramp_up_delay },
                |m: &mut Profile| { &mut m.gamepad_vehicle_ramp_up_delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ironsight_aim_assist",
                |m: &Profile| { &m.ironsight_aim_assist },
                |m: &mut Profile| { &mut m.ironsight_aim_assist },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "walking_joystick_scheme",
                |m: &Profile| { &m.walking_joystick_scheme },
                |m: &mut Profile| { &mut m.walking_joystick_scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "driving_joystick_scheme",
                |m: &Profile| { &m.driving_joystick_scheme },
                |m: &mut Profile| { &mut m.driving_joystick_scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "mouse_ads_scale",
                |m: &Profile| { &m.mouse_ads_scale },
                |m: &mut Profile| { &mut m.mouse_ads_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "mouse_vehicle_scale",
                |m: &Profile| { &m.mouse_vehicle_scale },
                |m: &mut Profile| { &mut m.mouse_vehicle_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "mouse_ironsight_aim_assist",
                |m: &Profile| { &m.mouse_ironsight_aim_assist },
                |m: &mut Profile| { &mut m.mouse_ironsight_aim_assist },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "vehicle_input_mode",
                |m: &Profile| { &m.vehicle_input_mode },
                |m: &mut Profile| { &mut m.vehicle_input_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "weapon_aim_toggle",
                |m: &Profile| { &m.weapon_aim_toggle },
                |m: &mut Profile| { &mut m.weapon_aim_toggle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "mantle_requires_button",
                |m: &Profile| { &m.mantle_requires_button },
                |m: &mut Profile| { &mut m.mantle_requires_button },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "fixed_minimap_rotation",
                |m: &Profile| { &m.fixed_minimap_rotation },
                |m: &mut Profile| { &mut m.fixed_minimap_rotation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "map_invert_pitch",
                |m: &Profile| { &m.map_invert_pitch },
                |m: &mut Profile| { &mut m.map_invert_pitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "map_invert_yaw",
                |m: &Profile| { &m.map_invert_yaw },
                |m: &mut Profile| { &mut m.map_invert_yaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "difficulty",
                |m: &Profile| { &m.difficulty },
                |m: &mut Profile| { &mut m.difficulty },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "swap_dual_wield_controls",
                |m: &Profile| { &m.swap_dual_wield_controls },
                |m: &mut Profile| { &mut m.swap_dual_wield_controls },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "base_fov",
                |m: &Profile| { &m.base_fov },
                |m: &mut Profile| { &mut m.base_fov },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "crosshair_neutral_color_frame",
                |m: &Profile| { &m.crosshair_neutral_color_frame },
                |m: &mut Profile| { &mut m.crosshair_neutral_color_frame },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "crosshair_enemy_color_frame",
                |m: &Profile| { &m.crosshair_enemy_color_frame },
                |m: &mut Profile| { &mut m.crosshair_enemy_color_frame },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "crosshair_ally_color_frame",
                |m: &Profile| { &m.crosshair_ally_color_frame },
                |m: &mut Profile| { &mut m.crosshair_ally_color_frame },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_subtitles",
                |m: &Profile| { &m.enable_subtitles },
                |m: &mut Profile| { &mut m.enable_subtitles },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_closed_captions",
                |m: &Profile| { &m.enable_closed_captions },
                |m: &mut Profile| { &mut m.enable_closed_captions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "last_status_menu_page",
                |m: &Profile| { &m.last_status_menu_page },
                |m: &mut Profile| { &mut m.last_status_menu_page },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OakProfileLastInventoryFilterInfo>>(
                "inventory_screen_last_filter",
                |m: &Profile| { &m.inventory_screen_last_filter },
                |m: &mut Profile| { &mut m.inventory_screen_last_filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OakProfileMenuTutorialInfo>>(
                "tutorial_info",
                |m: &Profile| { &m.tutorial_info },
                |m: &mut Profile| { &mut m.tutorial_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "default_network_type",
                |m: &Profile| { &m.default_network_type },
                |m: &mut Profile| { &mut m.default_network_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "default_invite_type",
                |m: &Profile| { &m.default_invite_type },
                |m: &mut Profile| { &mut m.default_invite_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "matchmaking_region",
                |m: &Profile| { &m.matchmaking_region },
                |m: &mut Profile| { &mut m.matchmaking_region },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "streaming_service",
                |m: &Profile| { &m.streaming_service },
                |m: &mut Profile| { &mut m.streaming_service },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "max_cached_friend_events",
                |m: &Profile| { &m.max_cached_friend_events },
                |m: &mut Profile| { &mut m.max_cached_friend_events },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "max_cached_friend_statuses",
                |m: &Profile| { &m.max_cached_friend_statuses },
                |m: &mut Profile| { &mut m.max_cached_friend_statuses },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "friend_events",
                |m: &Profile| { &m.friend_events },
                |m: &mut Profile| { &mut m.friend_events },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "friend_statuses",
                |m: &Profile| { &m.friend_statuses },
                |m: &mut Profile| { &mut m.friend_statuses },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_whisper_fetch_events_time",
                |m: &Profile| { &m.last_whisper_fetch_events_time },
                |m: &mut Profile| { &mut m.last_whisper_fetch_events_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_whisper_fetch_statuses_time",
                |m: &Profile| { &m.last_whisper_fetch_statuses_time },
                |m: &mut Profile| { &mut m.last_whisper_fetch_statuses_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "desired_crossplay_state",
                |m: &Profile| { &m.desired_crossplay_state },
                |m: &mut Profile| { &mut m.desired_crossplay_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Profile_FriendEncountersEntry>>(
                "friend_encounters",
                |m: &Profile| { &m.friend_encounters },
                |m: &mut Profile| { &mut m.friend_encounters },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "max_friend_encounter_size",
                |m: &Profile| { &m.max_friend_encounter_size },
                |m: &mut Profile| { &mut m.max_friend_encounter_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::GameStatSaveGameData>>(
                "profile_stats_data",
                |m: &Profile| { &m.profile_stats_data },
                |m: &mut Profile| { &mut m.profile_stats_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::InventoryCategorySaveData>>(
                "bank_inventory_category_list",
                |m: &Profile| { &m.bank_inventory_category_list },
                |m: &mut Profile| { &mut m.bank_inventory_category_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "bank_inventory_list",
                |m: &Profile| { &m.bank_inventory_list },
                |m: &mut Profile| { &mut m.bank_inventory_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "lost_loot_inventory_list",
                |m: &Profile| { &m.lost_loot_inventory_list },
                |m: &mut Profile| { &mut m.lost_loot_inventory_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::OakMailItem>>(
                "npc_mail_items",
                |m: &Profile| { &m.npc_mail_items },
                |m: &mut Profile| { &mut m.npc_mail_items },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mail_guids",
                |m: &Profile| { &m.mail_guids },
                |m: &mut Profile| { &mut m.mail_guids },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unread_mail_guids",
                |m: &Profile| { &m.unread_mail_guids },
                |m: &mut Profile| { &mut m.unread_mail_guids },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GearSoldByFriendData>>(
                "gear_sold_by_friends",
                |m: &Profile| { &m.gear_sold_by_friends },
                |m: &mut Profile| { &mut m.gear_sold_by_friends },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::OakSDUSaveGameData>>(
                "profile_sdu_list",
                |m: &Profile| { &m.profile_sdu_list },
                |m: &mut Profile| { &mut m.profile_sdu_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::OakCustomizationSaveGameData>>(
                "unlocked_customizations",
                |m: &Profile| { &m.unlocked_customizations },
                |m: &mut Profile| { &mut m.unlocked_customizations },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::OakInventoryCustomizationPartInfo>>(
                "unlocked_inventory_customization_parts",
                |m: &Profile| { &m.unlocked_inventory_customization_parts },
                |m: &mut Profile| { &mut m.unlocked_inventory_customization_parts },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GuardianRankProfileData>>(
                "guardian_rank",
                |m: &Profile| { &m.guardian_rank },
                |m: &mut Profile| { &mut m.guardian_rank },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::CrewQuartersDecorationItemSaveGameData>>(
                "unlocked_crew_quarters_decorations",
                |m: &Profile| { &m.unlocked_crew_quarters_decorations },
                |m: &mut Profile| { &mut m.unlocked_crew_quarters_decorations },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::CrewQuartersRoomItemSaveGameData>>(
                "unlocked_crew_quarters_rooms",
                |m: &Profile| { &m.unlocked_crew_quarters_rooms },
                |m: &mut Profile| { &mut m.unlocked_crew_quarters_rooms },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_mouse_acceleration",
                |m: &Profile| { &m.enable_mouse_acceleration },
                |m: &mut Profile| { &mut m.enable_mouse_acceleration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_gamepad_input",
                |m: &Profile| { &m.enable_gamepad_input },
                |m: &mut Profile| { &mut m.enable_gamepad_input },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_classic_gamepad_input",
                |m: &Profile| { &m.use_classic_gamepad_input },
                |m: &mut Profile| { &mut m.use_classic_gamepad_input },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "master_volume",
                |m: &Profile| { &m.master_volume },
                |m: &mut Profile| { &mut m.master_volume },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "monitor_display_type",
                |m: &Profile| { &m.monitor_display_type },
                |m: &mut Profile| { &mut m.monitor_display_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "graphics_mode",
                |m: &Profile| { &m.graphics_mode },
                |m: &mut Profile| { &mut m.graphics_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "frame_rate_limit",
                |m: &Profile| { &m.frame_rate_limit },
                |m: &mut Profile| { &mut m.frame_rate_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "base_vehicle_fov",
                |m: &Profile| { &m.base_vehicle_fov },
                |m: &mut Profile| { &mut m.base_vehicle_fov },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "graphics_quality",
                |m: &Profile| { &m.graphics_quality },
                |m: &mut Profile| { &mut m.graphics_quality },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "anisotropic_filtering",
                |m: &Profile| { &m.anisotropic_filtering },
                |m: &mut Profile| { &mut m.anisotropic_filtering },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shadow_quality",
                |m: &Profile| { &m.shadow_quality },
                |m: &mut Profile| { &mut m.shadow_quality },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "display_performance_stats",
                |m: &Profile| { &m.display_performance_stats },
                |m: &mut Profile| { &mut m.display_performance_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "texture_detail",
                |m: &Profile| { &m.texture_detail },
                |m: &mut Profile| { &mut m.texture_detail },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "draw_distance",
                |m: &Profile| { &m.draw_distance },
                |m: &mut Profile| { &mut m.draw_distance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "clutter",
                |m: &Profile| { &m.clutter },
                |m: &mut Profile| { &mut m.clutter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tessellation",
                |m: &Profile| { &m.tessellation },
                |m: &mut Profile| { &mut m.tessellation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "foliage",
                |m: &Profile| { &m.foliage },
                |m: &mut Profile| { &mut m.foliage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "foliage_shadows",
                |m: &Profile| { &m.foliage_shadows },
                |m: &mut Profile| { &mut m.foliage_shadows },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "planar_reflections",
                |m: &Profile| { &m.planar_reflections },
                |m: &mut Profile| { &mut m.planar_reflections },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "volumetric_fog",
                |m: &Profile| { &m.volumetric_fog },
                |m: &mut Profile| { &mut m.volumetric_fog },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "screen_space_reflections",
                |m: &Profile| { &m.screen_space_reflections },
                |m: &mut Profile| { &mut m.screen_space_reflections },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "character_texture_detail",
                |m: &Profile| { &m.character_texture_detail },
                |m: &mut Profile| { &mut m.character_texture_detail },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "character_detail",
                |m: &Profile| { &m.character_detail },
                |m: &mut Profile| { &mut m.character_detail },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "ambient_occlusion_quality",
                |m: &Profile| { &m.ambient_occlusion_quality },
                |m: &mut Profile| { &mut m.ambient_occlusion_quality },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "object_motion_blur",
                |m: &Profile| { &m.object_motion_blur },
                |m: &mut Profile| { &mut m.object_motion_blur },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "lens_flare",
                |m: &Profile| { &m.lens_flare },
                |m: &mut Profile| { &mut m.lens_flare },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "combat_number_long_format",
                |m: &Profile| { &m.combat_number_long_format },
                |m: &mut Profile| { &mut m.combat_number_long_format },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_minimap_legendaries",
                |m: &Profile| { &m.show_minimap_legendaries },
                |m: &mut Profile| { &mut m.show_minimap_legendaries },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_player_callouts",
                |m: &Profile| { &m.use_player_callouts },
                |m: &mut Profile| { &mut m.use_player_callouts },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "friend_event_notification_lifetime",
                |m: &Profile| { &m.friend_event_notification_lifetime },
                |m: &mut Profile| { &mut m.friend_event_notification_lifetime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "friend_event_notification_frequency",
                |m: &Profile| { &m.friend_event_notification_frequency },
                |m: &mut Profile| { &mut m.friend_event_notification_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "trade_request_reception_type",
                |m: &Profile| { &m.trade_request_reception_type },
                |m: &mut Profile| { &mut m.trade_request_reception_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "head_bob_scale",
                |m: &Profile| { &m.head_bob_scale },
                |m: &mut Profile| { &mut m.head_bob_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has_seen_first_boot",
                |m: &Profile| { &m.has_seen_first_boot },
                |m: &mut Profile| { &mut m.has_seen_first_boot },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "subs_cc_size",
                |m: &Profile| { &m.subs_cc_size },
                |m: &mut Profile| { &mut m.subs_cc_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "cc_subs_background_opacity",
                |m: &Profile| { &m.cc_subs_background_opacity },
                |m: &mut Profile| { &mut m.cc_subs_background_opacity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "walking_button_scheme",
                |m: &Profile| { &m.walking_button_scheme },
                |m: &mut Profile| { &mut m.walking_button_scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "driving_button_scheme",
                |m: &Profile| { &m.driving_button_scheme },
                |m: &mut Profile| { &mut m.driving_button_scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "glyph_mode",
                |m: &Profile| { &m.glyph_mode },
                |m: &mut Profile| { &mut m.glyph_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_MPH",
                |m: &Profile| { &m.use_MPH },
                |m: &mut Profile| { &mut m.use_MPH },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::RegisteredDownloadableEntitlements>>(
                "registered_downloadable_entitlements",
                |m: &Profile| { &m.registered_downloadable_entitlements },
                |m: &mut Profile| { &mut m.registered_downloadable_entitlements },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seen_news_items",
                |m: &Profile| { &m.seen_news_items },
                |m: &mut Profile| { &mut m.seen_news_items },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "auto_centering_enabled",
                |m: &Profile| { &m.auto_centering_enabled },
                |m: &mut Profile| { &mut m.auto_centering_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "increased_chance_for_subscribers",
                |m: &Profile| { &m.increased_chance_for_subscribers },
                |m: &mut Profile| { &mut m.increased_chance_for_subscribers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "rare_chest_event_enabled",
                |m: &Profile| { &m.rare_chest_event_enabled },
                |m: &mut Profile| { &mut m.rare_chest_event_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "badass_event_enabled",
                |m: &Profile| { &m.badass_event_enabled },
                |m: &mut Profile| { &mut m.badass_event_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "pinata_event_enabled",
                |m: &Profile| { &m.pinata_event_enabled },
                |m: &mut Profile| { &mut m.pinata_event_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "min_time_between_badass_events",
                |m: &Profile| { &m.min_time_between_badass_events },
                |m: &mut Profile| { &mut m.min_time_between_badass_events },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "hud_scale_multiplier",
                |m: &Profile| { &m.hud_scale_multiplier },
                |m: &mut Profile| { &mut m.hud_scale_multiplier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "disable_spatial_audio__or__has_reset_console_fov",
                |m: &Profile| { &m.disable_spatial_audio__or__has_reset_console_fov },
                |m: &mut Profile| { &mut m.disable_spatial_audio__or__has_reset_console_fov },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "total_playtime_seconds",
                |m: &Profile| { &m.total_playtime_seconds },
                |m: &mut Profile| { &mut m.total_playtime_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "moxxis_drink_event_enabled",
                |m: &Profile| { &m.moxxis_drink_event_enabled },
                |m: &mut Profile| { &mut m.moxxis_drink_event_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "moxxis_drink_event_bits_product_id",
                |m: &Profile| { &m.moxxis_drink_event_bits_product_id },
                |m: &mut Profile| { &mut m.moxxis_drink_event_bits_product_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::ChallengeSaveGameData>>(
                "challenge_data",
                |m: &Profile| { &m.challenge_data },
                |m: &mut Profile| { &mut m.challenge_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "CitizenScienceLevelProgression",
                |m: &Profile| { &m.CitizenScienceLevelProgression },
                |m: &mut Profile| { &mut m.CitizenScienceLevelProgression },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "default_dead_zone_inner_updated",
                |m: &Profile| { &m.default_dead_zone_inner_updated },
                |m: &mut Profile| { &mut m.default_dead_zone_inner_updated },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "disable_event_content",
                |m: &Profile| { &m.disable_event_content },
                |m: &mut Profile| { &mut m.disable_event_content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "desired_friend_sync_state",
                |m: &Profile| { &m.desired_friend_sync_state },
                |m: &mut Profile| { &mut m.desired_friend_sync_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "needs_shift_first_boot",
                |m: &Profile| { &m.needs_shift_first_boot },
                |m: &mut Profile| { &mut m.needs_shift_first_boot },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RecentlyMetPlayer>>(
                "recently_met_players",
                |m: &Profile| { &m.recently_met_players },
                |m: &mut Profile| { &mut m.recently_met_players },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "CitizenScienceActiveBoosterIndex",
                |m: &Profile| { &m.CitizenScienceActiveBoosterIndex },
                |m: &mut Profile| { &mut m.CitizenScienceActiveBoosterIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "CitizenScienceActiveBoosterRemainingTime",
                |m: &Profile| { &m.CitizenScienceActiveBoosterRemainingTime },
                |m: &mut Profile| { &mut m.CitizenScienceActiveBoosterRemainingTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "CitizenScienceActiveBoosterTotalTime",
                |m: &Profile| { &m.CitizenScienceActiveBoosterTotalTime },
                |m: &mut Profile| { &mut m.CitizenScienceActiveBoosterTotalTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "StreamerPrimaryActiveBoosterIndex",
                |m: &Profile| { &m.StreamerPrimaryActiveBoosterIndex },
                |m: &mut Profile| { &mut m.StreamerPrimaryActiveBoosterIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "StreamerPrimaryActiveBoosterRemainingTime",
                |m: &Profile| { &m.StreamerPrimaryActiveBoosterRemainingTime },
                |m: &mut Profile| { &mut m.StreamerPrimaryActiveBoosterRemainingTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "StreamerPrimaryActiveBoosterTotalTime",
                |m: &Profile| { &m.StreamerPrimaryActiveBoosterTotalTime },
                |m: &mut Profile| { &mut m.StreamerPrimaryActiveBoosterTotalTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "StreamerSecondaryActiveBoosterIndex",
                |m: &Profile| { &m.StreamerSecondaryActiveBoosterIndex },
                |m: &mut Profile| { &mut m.StreamerSecondaryActiveBoosterIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "StreamerSecondaryActiveBoosterRemainingTime",
                |m: &Profile| { &m.StreamerSecondaryActiveBoosterRemainingTime },
                |m: &mut Profile| { &mut m.StreamerSecondaryActiveBoosterRemainingTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "StreamerSecondaryActiveBoosterTotalTime",
                |m: &Profile| { &m.StreamerSecondaryActiveBoosterTotalTime },
                |m: &mut Profile| { &mut m.StreamerSecondaryActiveBoosterTotalTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "StreamerBoosterTier",
                |m: &Profile| { &m.StreamerBoosterTier },
                |m: &mut Profile| { &mut m.StreamerBoosterTier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "CitizenScienceCSBucksAmount",
                |m: &Profile| { &m.CitizenScienceCSBucksAmount },
                |m: &mut Profile| { &mut m.CitizenScienceCSBucksAmount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "bCitizenScienceHasSeenIntroVideo",
                |m: &Profile| { &m.bCitizenScienceHasSeenIntroVideo },
                |m: &mut Profile| { &mut m.bCitizenScienceHasSeenIntroVideo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "bCitizenScienceTutorialDone",
                |m: &Profile| { &m.bCitizenScienceTutorialDone },
                |m: &mut Profile| { &mut m.bCitizenScienceTutorialDone },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_trigger_feedback",
                |m: &Profile| { &m.enable_trigger_feedback },
                |m: &mut Profile| { &mut m.enable_trigger_feedback },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "fixed_initial_zonemap_rotation",
                |m: &Profile| { &m.fixed_initial_zonemap_rotation },
                |m: &mut Profile| { &mut m.fixed_initial_zonemap_rotation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oak_shared::VaultCardSaveGameData>>(
                "vault_card",
                |m: &Profile| { &m.vault_card },
                |m: &mut Profile| { &mut m.vault_card },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "player_selected_league",
                |m: &Profile| { &m.player_selected_league },
                |m: &mut Profile| { &mut m.player_selected_league },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "needs_shift_first_boot_primary",
                |m: &Profile| { &m.needs_shift_first_boot_primary },
                |m: &mut Profile| { &mut m.needs_shift_first_boot_primary },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Profile>(
                "Profile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Profile {
        static instance: ::protobuf::rt::LazyV2<Profile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Profile::new)
    }
}

impl ::protobuf::Clear for Profile {
    fn clear(&mut self) {
        self.enable_aim_assist = false;
        self.gamepad_invert_look = false;
        self.gamepad_invert_turn = false;
        self.gamepad_invert_move = false;
        self.gamepad_invert_strafe = false;
        self.enable_vibration = false;
        self.invert_mouse_pitch = false;
        self.enable_mouse_smoothing = false;
        self.mouse_scale = 0.;
        self.show_damage_numbers = false;
        self.show_damage_number_icons = false;
        self.enable_training_messages = false;
        self.show_text_chat = false;
        self.center_crosshair = false;
        self.toggle_sprint = false;
        self.toggle_crouch = false;
        self.censor_content = false;
        self.music_volume = 0.;
        self.sound_effects_volume = 0.;
        self.vo_volume = 0.;
        self.voice_volume = 0.;
        self.enable_optional_vo = false;
        self.push_to_talk = false;
        self.enable_controller_audio = false;
        self.speaker_angle_front = 0.;
        self.speaker_angle_side = 0.;
        self.speaker_angle_back = 0.;
        self.speaker_setup = 0;
        self.mute_audio_on_focus_loss = false;
        self.hide_strict_nat_help_dialog = false;
        self.player_input_bindings.clear();
        self.news_hashes.clear();
        self.last_used_savegame_id = 0;
        self.gamepad_hip_sensitivity_level = 0;
        self.gamepad_zoomed_sensitivity_level = 0;
        self.gamepad_vehicle_sensitivity_level = 0;
        self.gamepad_movement_dead_zone_x = 0.;
        self.gamepad_movement_dead_zone_y = 0.;
        self.gamepad_look_dead_zone_inner_x = 0.;
        self.gamepad_look_dead_zone_outer_x = 0.;
        self.gamepad_look_dead_zone_inner_y = 0.;
        self.gamepad_look_dead_zone_outer_y = 0.;
        self.gamepad_vehicle_movement_dead_zone_x = 0.;
        self.gamepad_vehicle_movement_dead_zone_y = 0.;
        self.gamepad_vehicle_look_dead_zone_inner_x = 0.;
        self.gamepad_vehicle_look_dead_zone_outer_x = 0.;
        self.gamepad_vehicle_look_dead_zone_inner_y = 0.;
        self.gamepad_vehicle_look_dead_zone_outer_y = 0.;
        self.gamepad_left_dead_zone_inner = 0.;
        self.gamepad_left_dead_zone_outer = 0.;
        self.gamepad_right_dead_zone_inner = 0.;
        self.gamepad_right_dead_zone_outer = 0.;
        self.gamepad_look_axial_dead_zone_scale = 0.;
        self.gamepad_move_axial_dead_zone_scale = 0.;
        self.gamepad_use_advanced_hip_aim_settings = false;
        self.gamepad_use_advanced_zoomed_aim_settings = false;
        self.gamepad_use_advanced_vehicle_aim_settings = false;
        self.gamepad_hip_yaw_rate = 0.;
        self.gamepad_hip_pitch_rate = 0.;
        self.gamepad_hip_extra_yaw = 0.;
        self.gamepad_hip_extra_pitch = 0.;
        self.gamepad_hip_ramp_up_time = 0.;
        self.gamepad_hip_ramp_up_delay = 0.;
        self.gamepad_zoomed_yaw_rate = 0.;
        self.gamepad_zoomed_pitch_rate = 0.;
        self.gamepad_zoomed_extra_yaw = 0.;
        self.gamepad_zoomed_extra_pitch = 0.;
        self.gamepad_zoomed_ramp_up_time = 0.;
        self.gamepad_zoomed_ramp_up_delay = 0.;
        self.gamepad_vehicle_yaw_rate = 0.;
        self.gamepad_vehicle_pitch_rate = 0.;
        self.gamepad_vehicle_extra_yaw = 0.;
        self.gamepad_vehicle_extra_pitch = 0.;
        self.gamepad_vehicle_ramp_up_time = 0.;
        self.gamepad_vehicle_ramp_up_delay = 0.;
        self.ironsight_aim_assist = false;
        self.walking_joystick_scheme = 0;
        self.driving_joystick_scheme = 0;
        self.mouse_ads_scale = 0.;
        self.mouse_vehicle_scale = 0.;
        self.mouse_ironsight_aim_assist = false;
        self.vehicle_input_mode = 0;
        self.weapon_aim_toggle = false;
        self.mantle_requires_button = false;
        self.fixed_minimap_rotation = false;
        self.map_invert_pitch = false;
        self.map_invert_yaw = false;
        self.difficulty = 0;
        self.swap_dual_wield_controls = false;
        self.base_fov = 0.;
        self.crosshair_neutral_color_frame = 0;
        self.crosshair_enemy_color_frame = 0;
        self.crosshair_ally_color_frame = 0;
        self.enable_subtitles = false;
        self.enable_closed_captions = false;
        self.last_status_menu_page.clear();
        self.inventory_screen_last_filter.clear();
        self.tutorial_info.clear();
        self.default_network_type = 0;
        self.default_invite_type = 0;
        self.matchmaking_region.clear();
        self.streaming_service = 0;
        self.max_cached_friend_events = 0;
        self.max_cached_friend_statuses = 0;
        self.friend_events.clear();
        self.friend_statuses.clear();
        self.last_whisper_fetch_events_time = 0;
        self.last_whisper_fetch_statuses_time = 0;
        self.desired_crossplay_state = 0;
        self.friend_encounters.clear();
        self.max_friend_encounter_size = 0;
        self.profile_stats_data.clear();
        self.bank_inventory_category_list.clear();
        self.bank_inventory_list.clear();
        self.lost_loot_inventory_list.clear();
        self.npc_mail_items.clear();
        self.mail_guids.clear();
        self.unread_mail_guids.clear();
        self.gear_sold_by_friends.clear();
        self.profile_sdu_list.clear();
        self.unlocked_customizations.clear();
        self.unlocked_inventory_customization_parts.clear();
        self.guardian_rank.clear();
        self.unlocked_crew_quarters_decorations.clear();
        self.unlocked_crew_quarters_rooms.clear();
        self.enable_mouse_acceleration = false;
        self.enable_gamepad_input = false;
        self.use_classic_gamepad_input = false;
        self.master_volume = 0.;
        self.monitor_display_type = 0;
        self.graphics_mode = 0;
        self.frame_rate_limit = 0;
        self.base_vehicle_fov = 0.;
        self.graphics_quality = 0;
        self.anisotropic_filtering = 0;
        self.shadow_quality = 0;
        self.display_performance_stats = 0;
        self.texture_detail = 0;
        self.draw_distance = 0;
        self.clutter = 0;
        self.tessellation = 0;
        self.foliage = 0;
        self.foliage_shadows = false;
        self.planar_reflections = false;
        self.volumetric_fog = 0;
        self.screen_space_reflections = 0;
        self.character_texture_detail = 0;
        self.character_detail = 0;
        self.ambient_occlusion_quality = 0;
        self.object_motion_blur = false;
        self.lens_flare = false;
        self.combat_number_long_format = false;
        self.show_minimap_legendaries = false;
        self.use_player_callouts = false;
        self.friend_event_notification_lifetime = 0;
        self.friend_event_notification_frequency = 0;
        self.trade_request_reception_type = 0;
        self.head_bob_scale = 0.;
        self.has_seen_first_boot = false;
        self.subs_cc_size = 0.;
        self.cc_subs_background_opacity = 0.;
        self.walking_button_scheme = 0;
        self.driving_button_scheme = 0;
        self.glyph_mode = 0;
        self.use_MPH = false;
        self.registered_downloadable_entitlements.clear();
        self.seen_news_items.clear();
        self.auto_centering_enabled = false;
        self.increased_chance_for_subscribers = false;
        self.rare_chest_event_enabled = false;
        self.badass_event_enabled = false;
        self.pinata_event_enabled = false;
        self.min_time_between_badass_events = 0;
        self.hud_scale_multiplier = 0.;
        self.disable_spatial_audio__or__has_reset_console_fov = false;
        self.total_playtime_seconds = 0;
        self.moxxis_drink_event_enabled = false;
        self.moxxis_drink_event_bits_product_id = 0;
        self.challenge_data.clear();
        self.CitizenScienceLevelProgression.clear();
        self.default_dead_zone_inner_updated = false;
        self.disable_event_content = false;
        self.desired_friend_sync_state = 0;
        self.needs_shift_first_boot = false;
        self.recently_met_players.clear();
        self.CitizenScienceActiveBoosterIndex = 0;
        self.CitizenScienceActiveBoosterRemainingTime = 0.;
        self.CitizenScienceActiveBoosterTotalTime = 0.;
        self.StreamerPrimaryActiveBoosterIndex = 0;
        self.StreamerPrimaryActiveBoosterRemainingTime = 0.;
        self.StreamerPrimaryActiveBoosterTotalTime = 0.;
        self.StreamerSecondaryActiveBoosterIndex = 0;
        self.StreamerSecondaryActiveBoosterRemainingTime = 0.;
        self.StreamerSecondaryActiveBoosterTotalTime = 0.;
        self.StreamerBoosterTier = 0;
        self.CitizenScienceCSBucksAmount = 0;
        self.bCitizenScienceHasSeenIntroVideo = false;
        self.bCitizenScienceTutorialDone = false;
        self.enable_trigger_feedback = false;
        self.fixed_initial_zonemap_rotation = false;
        self.vault_card.clear();
        self.player_selected_league = 0;
        self.needs_shift_first_boot_primary = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Profile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Profile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Profile_FriendEncountersEntry {
    // message fields
    pub key: ::std::string::String,
    pub value: ::protobuf::SingularPtrField<OakFriendEncounterData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Profile_FriendEncountersEntry {
    fn default() -> &'a Profile_FriendEncountersEntry {
        <Profile_FriendEncountersEntry as ::protobuf::Message>::default_instance()
    }
}

impl Profile_FriendEncountersEntry {
    pub fn new() -> Profile_FriendEncountersEntry {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // .OakSave.OakFriendEncounterData value = 2;


    pub fn get_value(&self) -> &OakFriendEncounterData {
        self.value.as_ref().unwrap_or_else(|| <OakFriendEncounterData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: OakFriendEncounterData) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut OakFriendEncounterData {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> OakFriendEncounterData {
        self.value.take().unwrap_or_else(|| OakFriendEncounterData::new())
    }
}

impl ::protobuf::Message for Profile_FriendEncountersEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Profile_FriendEncountersEntry {
        Profile_FriendEncountersEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &Profile_FriendEncountersEntry| { &m.key },
                |m: &mut Profile_FriendEncountersEntry| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OakFriendEncounterData>>(
                "value",
                |m: &Profile_FriendEncountersEntry| { &m.value },
                |m: &mut Profile_FriendEncountersEntry| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Profile_FriendEncountersEntry>(
                "Profile.FriendEncountersEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Profile_FriendEncountersEntry {
        static instance: ::protobuf::rt::LazyV2<Profile_FriendEncountersEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Profile_FriendEncountersEntry::new)
    }
}

impl ::protobuf::Clear for Profile_FriendEncountersEntry {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Profile_FriendEncountersEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Profile_FriendEncountersEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11oak_profile.proto\x12\x07OakSave\x1a\x10oak_shared.proto\"h\n\x19P\
    layerInputBinding_Button\x12*\n\x10rebind_data_path\x18\x01\x20\x01(\tR\
    \x0erebindDataPathB\0\x12\x1d\n\tkey_names\x18\x02\x20\x03(\tR\x08keyNam\
    esB\0:\0\"h\n\x1bPlayerInputBinding_Axis_Key\x12\x1b\n\x08key_name\x18\
    \x01\x20\x01(\tR\x07keyNameB\0\x12*\n\x08scale_3d\x18\x02\x20\x01(\x0b2\
    \r.OakSave.Vec3R\x07scale3dB\0:\0\"\x83\x01\n\x17PlayerInputBinding_Axis\
    \x12*\n\x10rebind_data_path\x18\x01\x20\x01(\tR\x0erebindDataPathB\0\x12\
    :\n\x04keys\x18\x02\x20\x03(\x0b2$.OakSave.PlayerInputBinding_Axis_KeyR\
    \x04keysB\0:\0\"\x95\x02\n\x1bPlayerInputBinding_Category\x12.\n\x12cate\
    gory_data_path\x18\x01\x20\x01(\tR\x10categoryDataPathB\0\x12,\n\x11cont\
    ext_data_path\x18\x02\x20\x01(\tR\x0fcontextDataPathB\0\x12M\n\x0fbutton\
    _bindings\x18\x03\x20\x03(\x0b2\".OakSave.PlayerInputBinding_ButtonR\x0e\
    buttonBindingsB\0\x12G\n\raxis_bindings\x18\x04\x20\x03(\x0b2\x20.OakSav\
    e.PlayerInputBinding_AxisR\x0caxisBindingsB\0:\0\"_\n\x13PlayerInputBind\
    ings\x12F\n\ncategories\x18\x01\x20\x03(\x0b2$.OakSave.PlayerInputBindin\
    g_CategoryR\ncategoriesB\0:\0\"w\n!OakProfileLastInventoryFilterInfo\x12\
    \"\n\x0cslot_type_id\x18\x01\x20\x01(\tR\nslotTypeIdB\0\x12,\n\x11last_f\
    ilter_index\x18\x02\x20\x01(\x05R\x0flastFilterIndexB\0:\0\"\xc7\x01\n\
    \x1aOakProfileMenuTutorialInfo\x12'\n\x0eseen_tutorials\x18\x01\x20\x03(\
    \tR\rseenTutorialsB\0\x12/\n\x12tutorials_disabled\x18\x02\x20\x01(\x08R\
    \x11tutorialsDisabledB\0\x12M\n#tutorials_allowed_in_non_game_modes\x18\
    \x03\x20\x01(\x08R\x1etutorialsAllowedInNonGameModesB\0:\0\"u\n\x16OakFr\
    iendEncounterData\x12'\n\x0enum_encounters\x18\x01\x20\x01(\rR\rnumEncou\
    ntersB\0\x120\n\x13time_last_encounter\x18\x02\x20\x01(\x03R\x11timeLast\
    EncounterB\0:\0\"\xb1\x01\n\x14GearSoldByFriendData\x12.\n\x12gear_seria\
    l_number\x18\x01\x20\x01(\tR\x10gearSerialNumberB\0\x12A\n\x1cplayer_cla\
    ss_identifier_hash\x18\x02\x20\x01(\x05R\x19playerClassIdentifierHashB\0\
    \x12$\n\rfriend_net_id\x18\x03\x20\x01(\tR\x0bfriendNetIdB\0:\0\"o\n\x1e\
    GuardianRankRewardSaveGameData\x12\x1f\n\nnum_tokens\x18\x01\x20\x01(\
    \x05R\tnumTokensB\0\x12*\n\x10reward_data_path\x18\x02\x20\x01(\tR\x0ere\
    wardDataPathB\0:\0\"\xeb\x02\n\x17GuardianRankProfileData\x12+\n\x10avai\
    lable_tokens\x18\x01\x20\x01(\x05R\x0favailableTokensB\0\x12L\n\x0crank_\
    rewards\x18\x02\x20\x03(\x0b2'.OakSave.GuardianRankRewardSaveGameDataR\
    \x0brankRewardsB\0\x12%\n\rguardian_rank\x18\x03\x20\x01(\x05R\x0cguardi\
    anRankB\0\x121\n\x13guardian_experience\x18\x04\x20\x01(\x05R\x12guardia\
    nExperienceB\0\x12?\n\x1bguardian_reward_random_seed\x18\x05\x20\x01(\
    \x05R\x18guardianRewardRandomSeedB\0\x128\n\x17new_guardian_experience\
    \x18\x06\x20\x01(\x03R\x15newGuardianExperienceB\0:\0\"\xad\x01\n\x11Rec\
    entlyMetPlayer\x12(\n\x0fshift_player_id\x18\x01\x20\x01(\tR\rshiftPlaye\
    rIdB\0\x123\n\x15first_party_player_id\x18\x02\x20\x01(\tR\x12firstParty\
    PlayerIdB\0\x127\n\x17show_shift_player_entry\x18\x03\x20\x01(\x08R\x14s\
    howShiftPlayerEntryB\0:\0\"\x84b\n\x07Profile\x12,\n\x11enable_aim_assis\
    t\x18\x01\x20\x01(\x08R\x0fenableAimAssistB\0\x120\n\x13gamepad_invert_l\
    ook\x18\x02\x20\x01(\x08R\x11gamepadInvertLookB\0\x120\n\x13gamepad_inve\
    rt_turn\x18\x03\x20\x01(\x08R\x11gamepadInvertTurnB\0\x120\n\x13gamepad_\
    invert_move\x18\x04\x20\x01(\x08R\x11gamepadInvertMoveB\0\x124\n\x15game\
    pad_invert_strafe\x18\x05\x20\x01(\x08R\x13gamepadInvertStrafeB\0\x12+\n\
    \x10enable_vibration\x18\x06\x20\x01(\x08R\x0fenableVibrationB\0\x12.\n\
    \x12invert_mouse_pitch\x18\x07\x20\x01(\x08R\x10invertMousePitchB\0\x126\
    \n\x16enable_mouse_smoothing\x18\x08\x20\x01(\x08R\x14enableMouseSmoothi\
    ngB\0\x12!\n\x0bmouse_scale\x18\t\x20\x01(\x02R\nmouseScaleB\0\x120\n\
    \x13show_damage_numbers\x18\n\x20\x01(\x08R\x11showDamageNumbersB\0\x129\
    \n\x18show_damage_number_icons\x18\x0b\x20\x01(\x08R\x15showDamageNumber\
    IconsB\0\x12:\n\x18enable_training_messages\x18\x0c\x20\x01(\x08R\x16ena\
    bleTrainingMessagesB\0\x12&\n\x0eshow_text_chat\x18\r\x20\x01(\x08R\x0cs\
    howTextChatB\0\x12+\n\x10center_crosshair\x18\x0e\x20\x01(\x08R\x0fcente\
    rCrosshairB\0\x12%\n\rtoggle_sprint\x18\x0f\x20\x01(\x08R\x0ctoggleSprin\
    tB\0\x12%\n\rtoggle_crouch\x18\x10\x20\x01(\x08R\x0ctoggleCrouchB\0\x12'\
    \n\x0ecensor_content\x18\x11\x20\x01(\x08R\rcensorContentB\0\x12#\n\x0cm\
    usic_volume\x18\x12\x20\x01(\x02R\x0bmusicVolumeB\0\x122\n\x14sound_effe\
    cts_volume\x18\x13\x20\x01(\x02R\x12soundEffectsVolumeB\0\x12\x1d\n\tvo_\
    volume\x18\x14\x20\x01(\x02R\x08voVolumeB\0\x12#\n\x0cvoice_volume\x18\
    \x15\x20\x01(\x02R\x0bvoiceVolumeB\0\x12.\n\x12enable_optional_vo\x18\
    \x16\x20\x01(\x08R\x10enableOptionalVoB\0\x12\"\n\x0cpush_to_talk\x18\
    \x17\x20\x01(\x08R\npushToTalkB\0\x128\n\x17enable_controller_audio\x18\
    \x18\x20\x01(\x08R\x15enableControllerAudioB\0\x120\n\x13speaker_angle_f\
    ront\x18\x19\x20\x01(\x02R\x11speakerAngleFrontB\0\x12.\n\x12speaker_ang\
    le_side\x18\x1a\x20\x01(\x02R\x10speakerAngleSideB\0\x12.\n\x12speaker_a\
    ngle_back\x18\x1b\x20\x01(\x02R\x10speakerAngleBackB\0\x12%\n\rspeaker_s\
    etup\x18\x1c\x20\x01(\rR\x0cspeakerSetupB\0\x128\n\x18mute_audio_on_focu\
    s_loss\x18\x1d\x20\x01(\x08R\x14muteAudioOnFocusLossB\0\x12>\n\x1bhide_s\
    trict_nat_help_dialog\x18\"\x20\x01(\x08R\x17hideStrictNatHelpDialogB\0\
    \x12R\n\x15player_input_bindings\x18#\x20\x01(\x0b2\x1c.OakSave.PlayerIn\
    putBindingsR\x13playerInputBindingsB\0\x12!\n\x0bnews_hashes\x18$\x20\
    \x03(\rR\nnewsHashesB\0\x123\n\x15last_used_savegame_id\x18%\x20\x01(\rR\
    \x12lastUsedSavegameIdB\0\x12C\n\x1dgamepad_hip_sensitivity_level\x18&\
    \x20\x01(\x05R\x1agamepadHipSensitivityLevelB\0\x12I\n\x20gamepad_zoomed\
    _sensitivity_level\x18'\x20\x01(\x05R\x1dgamepadZoomedSensitivityLevelB\
    \0\x12K\n!gamepad_vehicle_sensitivity_level\x18(\x20\x01(\x05R\x1egamepa\
    dVehicleSensitivityLevelB\0\x12@\n\x1cgamepad_movement_dead_zone_x\x18)\
    \x20\x01(\x02R\x18gamepadMovementDeadZoneXB\0\x12@\n\x1cgamepad_movement\
    _dead_zone_y\x18*\x20\x01(\x02R\x18gamepadMovementDeadZoneYB\0\x12C\n\
    \x1egamepad_look_dead_zone_inner_x\x18+\x20\x01(\x02R\x19gamepadLookDead\
    ZoneInnerXB\0\x12C\n\x1egamepad_look_dead_zone_outer_x\x18,\x20\x01(\x02\
    R\x19gamepadLookDeadZoneOuterXB\0\x12C\n\x1egamepad_look_dead_zone_inner\
    _y\x18-\x20\x01(\x02R\x19gamepadLookDeadZoneInnerYB\0\x12C\n\x1egamepad_\
    look_dead_zone_outer_y\x18.\x20\x01(\x02R\x19gamepadLookDeadZoneOuterYB\
    \0\x12O\n$gamepad_vehicle_movement_dead_zone_x\x18/\x20\x01(\x02R\x1fgam\
    epadVehicleMovementDeadZoneXB\0\x12O\n$gamepad_vehicle_movement_dead_zon\
    e_y\x180\x20\x01(\x02R\x1fgamepadVehicleMovementDeadZoneYB\0\x12R\n&game\
    pad_vehicle_look_dead_zone_inner_x\x181\x20\x01(\x02R\x20gamepadVehicleL\
    ookDeadZoneInnerXB\0\x12R\n&gamepad_vehicle_look_dead_zone_outer_x\x182\
    \x20\x01(\x02R\x20gamepadVehicleLookDeadZoneOuterXB\0\x12R\n&gamepad_veh\
    icle_look_dead_zone_inner_y\x183\x20\x01(\x02R\x20gamepadVehicleLookDead\
    ZoneInnerYB\0\x12R\n&gamepad_vehicle_look_dead_zone_outer_y\x184\x20\x01\
    (\x02R\x20gamepadVehicleLookDeadZoneOuterYB\0\x12@\n\x1cgamepad_left_dea\
    d_zone_inner\x185\x20\x01(\x02R\x18gamepadLeftDeadZoneInnerB\0\x12@\n\
    \x1cgamepad_left_dead_zone_outer\x186\x20\x01(\x02R\x18gamepadLeftDeadZo\
    neOuterB\0\x12B\n\x1dgamepad_right_dead_zone_inner\x187\x20\x01(\x02R\
    \x19gamepadRightDeadZoneInnerB\0\x12B\n\x1dgamepad_right_dead_zone_outer\
    \x188\x20\x01(\x02R\x19gamepadRightDeadZoneOuterB\0\x12K\n\"gamepad_look\
    _axial_dead_zone_scale\x189\x20\x01(\x02R\x1dgamepadLookAxialDeadZoneSca\
    leB\0\x12K\n\"gamepad_move_axial_dead_zone_scale\x18:\x20\x01(\x02R\x1dg\
    amepadMoveAxialDeadZoneScaleB\0\x12Q\n%gamepad_use_advanced_hip_aim_sett\
    ings\x18;\x20\x01(\x08R\x20gamepadUseAdvancedHipAimSettingsB\0\x12W\n(ga\
    mepad_use_advanced_zoomed_aim_settings\x18<\x20\x01(\x08R#gamepadUseAdva\
    ncedZoomedAimSettingsB\0\x12Y\n)gamepad_use_advanced_vehicle_aim_setting\
    s\x18=\x20\x01(\x08R$gamepadUseAdvancedVehicleAimSettingsB\0\x121\n\x14g\
    amepad_hip_yaw_rate\x18>\x20\x01(\x02R\x11gamepadHipYawRateB\0\x125\n\
    \x16gamepad_hip_pitch_rate\x18?\x20\x01(\x02R\x13gamepadHipPitchRateB\0\
    \x123\n\x15gamepad_hip_extra_yaw\x18@\x20\x01(\x02R\x12gamepadHipExtraYa\
    wB\0\x127\n\x17gamepad_hip_extra_pitch\x18A\x20\x01(\x02R\x14gamepadHipE\
    xtraPitchB\0\x128\n\x18gamepad_hip_ramp_up_time\x18B\x20\x01(\x02R\x14ga\
    mepadHipRampUpTimeB\0\x12:\n\x19gamepad_hip_ramp_up_delay\x18C\x20\x01(\
    \x02R\x15gamepadHipRampUpDelayB\0\x127\n\x17gamepad_zoomed_yaw_rate\x18D\
    \x20\x01(\x02R\x14gamepadZoomedYawRateB\0\x12;\n\x19gamepad_zoomed_pitch\
    _rate\x18E\x20\x01(\x02R\x16gamepadZoomedPitchRateB\0\x129\n\x18gamepad_\
    zoomed_extra_yaw\x18F\x20\x01(\x02R\x15gamepadZoomedExtraYawB\0\x12=\n\
    \x1agamepad_zoomed_extra_pitch\x18G\x20\x01(\x02R\x17gamepadZoomedExtraP\
    itchB\0\x12>\n\x1bgamepad_zoomed_ramp_up_time\x18H\x20\x01(\x02R\x17game\
    padZoomedRampUpTimeB\0\x12@\n\x1cgamepad_zoomed_ramp_up_delay\x18I\x20\
    \x01(\x02R\x18gamepadZoomedRampUpDelayB\0\x129\n\x18gamepad_vehicle_yaw_\
    rate\x18J\x20\x01(\x02R\x15gamepadVehicleYawRateB\0\x12=\n\x1agamepad_ve\
    hicle_pitch_rate\x18K\x20\x01(\x02R\x17gamepadVehiclePitchRateB\0\x12;\n\
    \x19gamepad_vehicle_extra_yaw\x18L\x20\x01(\x02R\x16gamepadVehicleExtraY\
    awB\0\x12?\n\x1bgamepad_vehicle_extra_pitch\x18M\x20\x01(\x02R\x18gamepa\
    dVehicleExtraPitchB\0\x12@\n\x1cgamepad_vehicle_ramp_up_time\x18N\x20\
    \x01(\x02R\x18gamepadVehicleRampUpTimeB\0\x12B\n\x1dgamepad_vehicle_ramp\
    _up_delay\x18O\x20\x01(\x02R\x19gamepadVehicleRampUpDelayB\0\x122\n\x14i\
    ronsight_aim_assist\x18P\x20\x01(\x08R\x12ironsightAimAssistB\0\x128\n\
    \x17walking_joystick_scheme\x18Q\x20\x01(\rR\x15walkingJoystickSchemeB\0\
    \x128\n\x17driving_joystick_scheme\x18R\x20\x01(\rR\x15drivingJoystickSc\
    hemeB\0\x12(\n\x0fmouse_ads_scale\x18S\x20\x01(\x02R\rmouseAdsScaleB\0\
    \x120\n\x13mouse_vehicle_scale\x18T\x20\x01(\x02R\x11mouseVehicleScaleB\
    \0\x12=\n\x1amouse_ironsight_aim_assist\x18U\x20\x01(\x08R\x17mouseIrons\
    ightAimAssistB\0\x12.\n\x12vehicle_input_mode\x18V\x20\x01(\rR\x10vehicl\
    eInputModeB\0\x12,\n\x11weapon_aim_toggle\x18W\x20\x01(\x08R\x0fweaponAi\
    mToggleB\0\x126\n\x16mantle_requires_button\x18X\x20\x01(\x08R\x14mantle\
    RequiresButtonB\0\x126\n\x16fixed_minimap_rotation\x18Y\x20\x01(\x08R\
    \x14fixedMinimapRotationB\0\x12*\n\x10map_invert_pitch\x18Z\x20\x01(\x08\
    R\x0emapInvertPitchB\0\x12&\n\x0emap_invert_yaw\x18[\x20\x01(\x08R\x0cma\
    pInvertYawB\0\x12\x20\n\ndifficulty\x18\\\x20\x01(\rR\ndifficultyB\0\x12\
    9\n\x18swap_dual_wield_controls\x18]\x20\x01(\x08R\x15swapDualWieldContr\
    olsB\0\x12\x1b\n\x08base_fov\x18^\x20\x01(\x02R\x07baseFovB\0\x12C\n\x1d\
    crosshair_neutral_color_frame\x18_\x20\x01(\rR\x1acrosshairNeutralColorF\
    rameB\0\x12?\n\x1bcrosshair_enemy_color_frame\x18`\x20\x01(\rR\x18crossh\
    airEnemyColorFrameB\0\x12=\n\x1acrosshair_ally_color_frame\x18a\x20\x01(\
    \rR\x17crosshairAllyColorFrameB\0\x12+\n\x10enable_subtitles\x18b\x20\
    \x01(\x08R\x0fenableSubtitlesB\0\x126\n\x16enable_closed_captions\x18c\
    \x20\x01(\x08R\x14enableClosedCaptionsB\0\x123\n\x15last_status_menu_pag\
    e\x18d\x20\x01(\tR\x12lastStatusMenuPageB\0\x12m\n\x1cinventory_screen_l\
    ast_filter\x18e\x20\x03(\x0b2*.OakSave.OakProfileLastInventoryFilterInfo\
    R\x19inventoryScreenLastFilterB\0\x12J\n\rtutorial_info\x18f\x20\x01(\
    \x0b2#.OakSave.OakProfileMenuTutorialInfoR\x0ctutorialInfoB\0\x122\n\x14\
    default_network_type\x18g\x20\x01(\rR\x12defaultNetworkTypeB\0\x120\n\
    \x13default_invite_type\x18h\x20\x01(\rR\x11defaultInviteTypeB\0\x12/\n\
    \x12matchmaking_region\x18i\x20\x01(\tR\x11matchmakingRegionB\0\x12-\n\
    \x11streaming_service\x18j\x20\x01(\rR\x10streamingServiceB\0\x129\n\x18\
    max_cached_friend_events\x18k\x20\x01(\x05R\x15maxCachedFriendEventsB\0\
    \x12=\n\x1amax_cached_friend_statuses\x18l\x20\x01(\x05R\x17maxCachedFri\
    endStatusesB\0\x12%\n\rfriend_events\x18m\x20\x03(\tR\x0cfriendEventsB\0\
    \x12)\n\x0ffriend_statuses\x18n\x20\x03(\tR\x0efriendStatusesB\0\x12D\n\
    \x1elast_whisper_fetch_events_time\x18o\x20\x01(\x03R\x1alastWhisperFetc\
    hEventsTimeB\0\x12H\n\x20last_whisper_fetch_statuses_time\x18p\x20\x01(\
    \x03R\x1clastWhisperFetchStatusesTimeB\0\x128\n\x17desired_crossplay_sta\
    te\x18q\x20\x01(\rR\x15desiredCrossplayStateB\0\x12V\n\x11friend_encount\
    ers\x18\x85\x01\x20\x03(\x0b2&.OakSave.Profile.FriendEncountersEntryR\
    \x10friendEncountersB\0\x12<\n\x19max_friend_encounter_size\x18\x86\x01\
    \x20\x01(\x05R\x16maxFriendEncounterSizeB\0\x12N\n\x12profile_stats_data\
    \x18\x87\x01\x20\x03(\x0b2\x1d.OakSave.GameStatSaveGameDataR\x10profileS\
    tatsDataB\0\x12f\n\x1cbank_inventory_category_list\x18\x88\x01\x20\x03(\
    \x0b2\".OakSave.InventoryCategorySaveDataR\x19bankInventoryCategoryListB\
    \0\x121\n\x13bank_inventory_list\x18\x89\x01\x20\x03(\x0cR\x11bankInvent\
    oryListB\0\x12:\n\x18lost_loot_inventory_list\x18\x8a\x01\x20\x03(\x0cR\
    \x15lostLootInventoryListB\0\x12=\n\x0enpc_mail_items\x18\x8b\x01\x20\
    \x03(\x0b2\x14.OakSave.OakMailItemR\x0cnpcMailItemsB\0\x12\x20\n\nmail_g\
    uids\x18\x8c\x01\x20\x03(\tR\tmailGuidsB\0\x12-\n\x11unread_mail_guids\
    \x18\x8d\x01\x20\x03(\tR\x0funreadMailGuidsB\0\x12Q\n\x14gear_sold_by_fr\
    iends\x18\x8e\x01\x20\x03(\x0b2\x1d.OakSave.GearSoldByFriendDataR\x11gea\
    rSoldByFriendsB\0\x12H\n\x10profile_sdu_list\x18\x8f\x01\x20\x03(\x0b2\
    \x1b.OakSave.OakSDUSaveGameDataR\x0eprofileSduListB\0\x12a\n\x17unlocked\
    _customizations\x18\x90\x01\x20\x03(\x0b2%.OakSave.OakCustomizationSaveG\
    ameDataR\x16unlockedCustomizationsB\0\x12\x82\x01\n&unlocked_inventory_c\
    ustomization_parts\x18\x91\x01\x20\x03(\x0b2*.OakSave.OakInventoryCustom\
    izationPartInfoR#unlockedInventoryCustomizationPartsB\0\x12H\n\rguardian\
    _rank\x18\x92\x01\x20\x01(\x0b2\x20.OakSave.GuardianRankProfileDataR\x0c\
    guardianRankB\0\x12\x7f\n\"unlocked_crew_quarters_decorations\x18\x93\
    \x01\x20\x03(\x0b2/.OakSave.CrewQuartersDecorationItemSaveGameDataR\x1fu\
    nlockedCrewQuartersDecorationsB\0\x12m\n\x1cunlocked_crew_quarters_rooms\
    \x18\x94\x01\x20\x03(\x0b2).OakSave.CrewQuartersRoomItemSaveGameDataR\
    \x19unlockedCrewQuartersRoomsB\0\x12=\n\x19enable_mouse_acceleration\x18\
    \x96\x01\x20\x01(\x08R\x17enableMouseAccelerationB\0\x123\n\x14enable_ga\
    mepad_input\x18\x97\x01\x20\x01(\x08R\x12enableGamepadInputB\0\x12<\n\
    \x19use_classic_gamepad_input\x18\x98\x01\x20\x01(\x08R\x16useClassicGam\
    epadInputB\0\x12&\n\rmaster_volume\x18\x99\x01\x20\x01(\x02R\x0cmasterVo\
    lumeB\0\x123\n\x14monitor_display_type\x18\x9a\x01\x20\x01(\rR\x12monito\
    rDisplayTypeB\0\x12&\n\rgraphics_mode\x18\x9b\x01\x20\x01(\rR\x0cgraphic\
    sModeB\0\x12+\n\x10frame_rate_limit\x18\x9c\x01\x20\x01(\rR\x0eframeRate\
    LimitB\0\x12+\n\x10base_vehicle_fov\x18\x9d\x01\x20\x01(\x02R\x0ebaseVeh\
    icleFovB\0\x12,\n\x10graphics_quality\x18\x9e\x01\x20\x01(\rR\x0fgraphic\
    sQualityB\0\x126\n\x15anisotropic_filtering\x18\x9f\x01\x20\x01(\rR\x14a\
    nisotropicFilteringB\0\x12(\n\x0eshadow_quality\x18\xa0\x01\x20\x01(\rR\
    \rshadowQualityB\0\x12=\n\x19display_performance_stats\x18\xa1\x01\x20\
    \x01(\rR\x17displayPerformanceStatsB\0\x12(\n\x0etexture_detail\x18\xa2\
    \x01\x20\x01(\rR\rtextureDetailB\0\x12&\n\rdraw_distance\x18\xa3\x01\x20\
    \x01(\rR\x0cdrawDistanceB\0\x12\x1b\n\x07clutter\x18\xa4\x01\x20\x01(\rR\
    \x07clutterB\0\x12%\n\x0ctessellation\x18\xa5\x01\x20\x01(\rR\x0ctessell\
    ationB\0\x12\x1b\n\x07foliage\x18\xa6\x01\x20\x01(\rR\x07foliageB\0\x12*\
    \n\x0ffoliage_shadows\x18\xa7\x01\x20\x01(\x08R\x0efoliageShadowsB\0\x12\
    0\n\x12planar_reflections\x18\xa8\x01\x20\x01(\x08R\x11planarReflections\
    B\0\x12(\n\x0evolumetric_fog\x18\xa9\x01\x20\x01(\rR\rvolumetricFogB\0\
    \x12;\n\x18screen_space_reflections\x18\xaa\x01\x20\x01(\rR\x16screenSpa\
    ceReflectionsB\0\x12;\n\x18character_texture_detail\x18\xab\x01\x20\x01(\
    \rR\x16characterTextureDetailB\0\x12,\n\x10character_detail\x18\xac\x01\
    \x20\x01(\rR\x0fcharacterDetailB\0\x12=\n\x19ambient_occlusion_quality\
    \x18\xad\x01\x20\x01(\rR\x17ambientOcclusionQualityB\0\x12/\n\x12object_\
    motion_blur\x18\xae\x01\x20\x01(\x08R\x10objectMotionBlurB\0\x12\x20\n\n\
    lens_flare\x18\xaf\x01\x20\x01(\x08R\tlensFlareB\0\x12<\n\x19combat_numb\
    er_long_format\x18\xb0\x01\x20\x01(\x08R\x16combatNumberLongFormatB\0\
    \x12;\n\x18show_minimap_legendaries\x18\xb1\x01\x20\x01(\x08R\x16showMin\
    imapLegendariesB\0\x121\n\x13use_player_callouts\x18\xb2\x01\x20\x01(\
    \x08R\x11usePlayerCalloutsB\0\x12N\n\"friend_event_notification_lifetime\
    \x18\xb3\x01\x20\x01(\rR\x1ffriendEventNotificationLifetimeB\0\x12P\n#fr\
    iend_event_notification_frequency\x18\xb4\x01\x20\x01(\rR\x20friendEvent\
    NotificationFrequencyB\0\x12B\n\x1ctrade_request_reception_type\x18\xb5\
    \x01\x20\x01(\rR\x19tradeRequestReceptionTypeB\0\x12'\n\x0ehead_bob_scal\
    e\x18\xb6\x01\x20\x01(\x02R\x0cheadBobScaleB\0\x120\n\x13has_seen_first_\
    boot\x18\xb8\x01\x20\x01(\x08R\x10hasSeenFirstBootB\0\x12#\n\x0csubs_cc_\
    size\x18\xbd\x01\x20\x01(\x02R\nsubsCcSizeB\0\x12>\n\x1acc_subs_backgrou\
    nd_opacity\x18\xbe\x01\x20\x01(\x02R\x17ccSubsBackgroundOpacityB\0\x125\
    \n\x15walking_button_scheme\x18\xbf\x01\x20\x01(\rR\x13walkingButtonSche\
    meB\0\x125\n\x15driving_button_scheme\x18\xc0\x01\x20\x01(\rR\x13driving\
    ButtonSchemeB\0\x12\x20\n\nglyph_mode\x18\xc1\x01\x20\x01(\rR\tglyphMode\
    B\0\x12\x1a\n\x07use_MPH\x18\xc2\x01\x20\x01(\x08R\x06useMPHB\0\x12\x80\
    \x01\n$registered_downloadable_entitlements\x18\xc3\x01\x20\x03(\x0b2+.O\
    akSave.RegisteredDownloadableEntitlementsR\"registeredDownloadableEntitl\
    ementsB\0\x12)\n\x0fseen_news_items\x18\xc4\x01\x20\x03(\tR\rseenNewsIte\
    msB\0\x127\n\x16auto_centering_enabled\x18\xc5\x01\x20\x01(\x08R\x14auto\
    CenteringEnabledB\0\x12J\n\x20increased_chance_for_subscribers\x18\xc6\
    \x01\x20\x01(\x08R\x1dincreasedChanceForSubscribersB\0\x12:\n\x18rare_ch\
    est_event_enabled\x18\xc7\x01\x20\x01(\x08R\x15rareChestEventEnabledB\0\
    \x123\n\x14badass_event_enabled\x18\xc8\x01\x20\x01(\x08R\x12badassEvent\
    EnabledB\0\x123\n\x14pinata_event_enabled\x18\xc9\x01\x20\x01(\x08R\x12p\
    inataEventEnabledB\0\x12E\n\x1emin_time_between_badass_events\x18\xca\
    \x01\x20\x01(\x05R\x1aminTimeBetweenBadassEventsB\0\x123\n\x14hud_scale_\
    multiplier\x18\xcb\x01\x20\x01(\x02R\x12hudScaleMultiplierB\0\x12d\n0dis\
    able_spatial_audio__or__has_reset_console_fov\x18\xcc\x01\x20\x01(\x08R'\
    disableSpatialAudioOrHasResetConsoleFovB\0\x127\n\x16total_playtime_seco\
    nds\x18\xcd\x01\x20\x01(\x05R\x14totalPlaytimeSecondsB\0\x12>\n\x1amoxxi\
    s_drink_event_enabled\x18\xce\x01\x20\x01(\x08R\x17moxxisDrinkEventEnabl\
    edB\0\x12L\n\"moxxis_drink_event_bits_product_id\x18\xcf\x01\x20\x01(\
    \x05R\x1dmoxxisDrinkEventBitsProductIdB\0\x12H\n\x0echallenge_data\x18\
    \xd0\x01\x20\x03(\x0b2\x1e.OakSave.ChallengeSaveGameDataR\rchallengeData\
    B\0\x12I\n\x1eCitizenScienceLevelProgression\x18\xd1\x01\x20\x03(\x05R\
    \x1eCitizenScienceLevelProgressionB\0\x12G\n\x1fdefault_dead_zone_inner_\
    updated\x18\xd2\x01\x20\x01(\x08R\x1bdefaultDeadZoneInnerUpdatedB\0\x125\
    \n\x15disable_event_content\x18\xd3\x01\x20\x01(\x08R\x13disableEventCon\
    tentB\0\x12<\n\x19desired_friend_sync_state\x18\xd4\x01\x20\x01(\rR\x16d\
    esiredFriendSyncStateB\0\x126\n\x16needs_shift_first_boot\x18\xd5\x01\
    \x20\x01(\x08R\x13needsShiftFirstBootB\0\x12O\n\x14recently_met_players\
    \x18\xd6\x01\x20\x03(\x0b2\x1a.OakSave.RecentlyMetPlayerR\x12recentlyMet\
    PlayersB\0\x12M\n\x20CitizenScienceActiveBoosterIndex\x18\xd7\x01\x20\
    \x01(\x05R\x20CitizenScienceActiveBoosterIndexB\0\x12]\n(CitizenScienceA\
    ctiveBoosterRemainingTime\x18\xd8\x01\x20\x01(\x02R(CitizenScienceActive\
    BoosterRemainingTimeB\0\x12U\n$CitizenScienceActiveBoosterTotalTime\x18\
    \xd9\x01\x20\x01(\x02R$CitizenScienceActiveBoosterTotalTimeB\0\x12O\n!St\
    reamerPrimaryActiveBoosterIndex\x18\xda\x01\x20\x01(\x05R!StreamerPrimar\
    yActiveBoosterIndexB\0\x12_\n)StreamerPrimaryActiveBoosterRemainingTime\
    \x18\xdb\x01\x20\x01(\x02R)StreamerPrimaryActiveBoosterRemainingTimeB\0\
    \x12W\n%StreamerPrimaryActiveBoosterTotalTime\x18\xdc\x01\x20\x01(\x02R%\
    StreamerPrimaryActiveBoosterTotalTimeB\0\x12S\n#StreamerSecondaryActiveB\
    oosterIndex\x18\xdd\x01\x20\x01(\x05R#StreamerSecondaryActiveBoosterInde\
    xB\0\x12c\n+StreamerSecondaryActiveBoosterRemainingTime\x18\xde\x01\x20\
    \x01(\x02R+StreamerSecondaryActiveBoosterRemainingTimeB\0\x12[\n'Streame\
    rSecondaryActiveBoosterTotalTime\x18\xdf\x01\x20\x01(\x02R'StreamerSecon\
    daryActiveBoosterTotalTimeB\0\x123\n\x13StreamerBoosterTier\x18\xe0\x01\
    \x20\x01(\x05R\x13StreamerBoosterTierB\0\x12C\n\x1bCitizenScienceCSBucks\
    Amount\x18\xe2\x01\x20\x01(\x05R\x1bCitizenScienceCSBucksAmountB\0\x12M\
    \n\x20bCitizenScienceHasSeenIntroVideo\x18\xe3\x01\x20\x01(\x08R\x20bCit\
    izenScienceHasSeenIntroVideoB\0\x12C\n\x1bbCitizenScienceTutorialDone\
    \x18\xe4\x01\x20\x01(\x08R\x1bbCitizenScienceTutorialDoneB\0\x129\n\x17e\
    nable_trigger_feedback\x18\xe5\x01\x20\x01(\x08R\x15enableTriggerFeedbac\
    kB\0\x12F\n\x1efixed_initial_zonemap_rotation\x18\xe6\x01\x20\x01(\x08R\
    \x1bfixedInitialZonemapRotationB\0\x12@\n\nvault_card\x18\xe7\x01\x20\
    \x01(\x0b2\x1e.OakSave.VaultCardSaveGameDataR\tvaultCardB\0\x127\n\x16pl\
    ayer_selected_league\x18\xe8\x01\x20\x01(\rR\x14playerSelectedLeagueB\0\
    \x12E\n\x1eneeds_shift_first_boot_primary\x18\xe9\x01\x20\x01(\x08R\x1an\
    eedsShiftFirstBootPrimaryB\0\x1af\n\x15FriendEncountersEntry\x12\x12\n\
    \x03key\x18\x01\x20\x01(\tR\x03keyB\0\x127\n\x05value\x18\x02\x20\x01(\
    \x0b2\x1f.OakSave.OakFriendEncounterDataR\x05valueB\0:\0:\0B\0b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
